/* DO NOT EDIT: File is autogenerated */
CREATE VIEW <%= entity.data_module.sql.quoted_schema %>.<%= entity.sql.dialect.quote("vw#{entity.name}") %>
AS
SELECT <%= entity.attributes.select{|a| a.jpa.persistent? }.collect{|a| "T.#{a.sql.quoted_column_name}" }.join(", ") %>
FROM
  <%= entity.sql.qualified_table_name %> T
WHERE
  T."EndDate" IS NULL;

CREATE FUNCTION <%= entity.data_module.sql.quoted_schema %>.<%= entity.sql.dialect.quote("sp#{entity.name}ViewDML") %>()
RETURNS TRIGGER
LANGUAGE plpgsql
AS $function$
   BEGIN
      <%
         create_columns = entity.attributes.select{|a| a.jpa.persistent?}.collect{|a| a.sql.quoted_column_name }
         update_columns = entity.attributes.select{|a| a.jpa.persistent? && !a.immutable?}.collect{|a| a.sql.quoted_column_name }
      %>
      IF TG_OP = 'INSERT' THEN
        WITH ROWS AS (
          INSERT INTO <%= entity.sql.qualified_table_name %>(<%= create_columns.join(', ') %>, "StartDate")
            VALUES (<%= create_columns.collect{|c| "NEW.#{c}" }.join(", ") %>, current_timestamp)
            RETURNING <%= entity.primary_key.sql.quoted_column_name %>
        )
        INSERT INTO <%= entity.data_module.sql.quoted_schema %>.<%= entity.sql.dialect.quote("#{entity.sql.table_name}History") %>("Op", <%= entity.sql.dialect.quote("#{entity.name}#{entity.primary_key.sql.column_name}") %>, <%= update_columns.join(', ') %>, "SnapshotAt")
          SELECT 'I', ROWS.<%= entity.primary_key.sql.quoted_column_name %>, <%= update_columns.collect{|c| "NEW.#{c}" }.join(', ') %>, current_timestamp
          FROM ROWS;
        RETURN NEW;
      ELSIF TG_OP = 'UPDATE' THEN
        UPDATE <%= entity.sql.qualified_table_name %>
          SET <%= update_columns.collect{|c| "#{c} = NEW.#{c}" }.join(', ') %>
          WHERE <%= entity.primary_key.sql.quoted_column_name %> = OLD.<%= entity.primary_key.sql.quoted_column_name %>;
        INSERT INTO <%= entity.data_module.sql.quoted_schema %>.<%= entity.sql.dialect.quote("#{entity.sql.table_name}History") %>("Op", <%= entity.sql.dialect.quote("#{entity.name}#{entity.primary_key.sql.column_name}") %>, <%= update_columns.join(', ') %>, "SnapshotAt")
          VALUES ('U', OLD.<%= entity.primary_key.sql.quoted_column_name %>, <%= update_columns.collect{|c| "NEW.#{c}" }.join(', ') %>, current_timestamp);
       RETURN NEW;
      ELSIF TG_OP = 'DELETE' THEN
        UPDATE <%= entity.sql.qualified_table_name %>
          SET "EndDate" = current_timestamp
          WHERE <%= entity.primary_key.sql.quoted_column_name %> = OLD.<%= entity.primary_key.sql.quoted_column_name %>;
        INSERT INTO <%= entity.data_module.sql.quoted_schema %>.<%= entity.sql.dialect.quote("#{entity.sql.table_name}History") %>("Op", <%= entity.sql.dialect.quote("#{entity.name}#{entity.primary_key.sql.column_name}") %>, <%= update_columns.join(', ') %>, "SnapshotAt")
          VALUES ('D', OLD.<%= entity.primary_key.sql.quoted_column_name %>, <%= update_columns.collect{|c| "OLD.#{c}" }.join(', ') %>, current_timestamp);
       RETURN OLD;
      END IF;
      RETURN NEW;
    END;
$function$;

CREATE TRIGGER <%= entity.sql.dialect.quote("trg#{entity.name}ViewDML") %>
  INSTEAD OF INSERT OR UPDATE OR DELETE ON <%= entity.data_module.sql.quoted_schema %>.<%= entity.sql.dialect.quote("vw#{entity.name}") %>
  FOR EACH ROW EXECUTE PROCEDURE <%= entity.data_module.sql.quoted_schema %>.<%= entity.sql.dialect.quote("sp#{entity.name}ViewDML") %>();
