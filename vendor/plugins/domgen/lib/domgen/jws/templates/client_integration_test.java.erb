/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.jws.qualified_client_integration_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public class <%= repository.jws.client_integration_test_name %>
  extends <%= repository.jws.qualified_abstract_fake_server_test_name %>
{
<%

def java_characteristic_fixture(p, parent_context = nil)
  type_spec = ''
  v =
    if p.integer?
      "42"
    elsif p.reference?
      java_characteristic_fixture(p.referenced_entity.primary_key)
    elsif p.boolean?
      "true"
    elsif p.enumeration?
      "#{p.enumeration.ee.qualified_name}.#{p.enumeration.values[0]}"
    elsif p.struct?
      if parent_context == p.referenced_struct
        type_spec = "<#{p.referenced_struct.ee.qualified_name}>"
        ''
      else
        java_create_struct(p.referenced_struct, p.characteristic_container)
      end
    elsif p.datetime?
      "javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar( \"2014-03-01T10:09:00.000+00:00\" ).toGregorianCalendar().getTime()"
    elsif p.date?
      "javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar( \"2014-02-01T00:00:00.000+00:00\" ).toGregorianCalendar().getTime()"
    elsif p.text?
      "\"Hello Space!\""
    else
      Domgen.error("Unknown parameter type for #{p.qualified_name}")
    end
  !p.collection? ? v : (p.collection_type == :sequence) ? "java.util.Arrays.#{type_spec}asList( #{v} )" : "new java.util.HashSet<>( java.util.Arrays.#{type_spec}asList( #{v} ) )"
end

def java_create_struct(struct, context)
  result = "new #{struct.ee.qualified_name}("
  result << struct.fields.collect { |p| java_characteristic_fixture(p, context) }.join(", ")
  result << ")"
end

def jws_characteristic_fixture(service, p, force_singular = false)
  v =
    if p.integer?
      "new java.math.BigInteger( \"42\" )"
    elsif p.reference?
      jws_characteristic_fixture(service, p.referenced_entity.primary_key)
    elsif p.boolean?
      "true"
    elsif p.enumeration?
      "#{p.method.service.jws.api_package}.#{p.enumeration.name}.#{p.enumeration.values[0]}"
    elsif p.struct?
      "convert( #{service.jws.api_package}.#{p.referenced_struct.name}.class, #{java_create_struct(p.referenced_struct, p.characteristic_container)} )"
    elsif p.datetime?
      "javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar( \"2014-03-01T10:09:00.000+00:00\" )"
    elsif p.date?
      "javax.xml.datatype.DatatypeFactory.newInstance().newXMLGregorianCalendar( \"2014-02-01T00:00:00.000+00:00\" )"
    elsif p.text?
      "\"Hello Space!\""
    else
      Domgen.error("Unknown parameter type for #{p.qualified_name}")
    end
  return v if !p.collection? || force_singular

  # Collections in generated api are always lists
  "java.util.Arrays.asList( #{v} )"
end

def jws_create_struct(service, struct)
  result = "new #{service.jws.api_package}.#{struct.name}(){{"
  result << struct.fields.collect { |p| "set#{p.name.to_s.gsub(/ID$/,'Id')}(#{jws_characteristic_fixture(service, p)});" }.join(" ")
  result << "}}"
end

  repository.data_modules.select{|dm|dm.jws?}.each do |data_module|
    data_module.services.select{|s|s.jws?}.each do |service|
      service.methods.select{|m|m.jws?}.each do |method|
        method_name_prefix = "#{service.data_module.name}#{service.name}#{method.name}"
-%>
  @org.testng.annotations.Test
  public void call<%= method_name_prefix %>Success()
    throws Exception
  {
<% if method.return_value.return_type != :void -%>
    org.mockito.Mockito.when( get<%= "#{data_module.name.to_s == repository.name.to_s ? '' : data_module.name}#{service.name}" %>().<%= Domgen::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p|java_characteristic_fixture(p)}.join(", ") %>) ).thenReturn( <%= java_characteristic_fixture(method.return_value) %> );
    final Object result =
<% end -%>
      get<%= "#{data_module.name.to_s == repository.name.to_s ? '' : data_module.name}#{service.name}" %>Client().<%= Domgen::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p|jws_characteristic_fixture(p.method.service, p)}.join(",") %>)<%= method.return_value.collection? ? '.get( 0 )' : '' %>;

    org.mockito.Mockito.verify( get<%= "#{data_module.name.to_s == repository.name.to_s ? '' : data_module.name}#{service.name}" %>(), org.mockito.Mockito.times( 1 ) ).<%= Domgen::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p|java_characteristic_fixture(p)}.join(", ") %>);

<% if method.return_value.return_type != :void -%>
<% if method.return_value.struct? -%>
    {
      final java.io.StringWriter xml = new java.io.StringWriter();
      final Object expectedResult = <%= java_characteristic_fixture(method.return_value) %><%= method.return_value.collection? ? '.get( 0 )' : '' %>;
      javax.xml.bind.JAXB.marshal( result, xml );
      final Object actualOutput = javax.xml.bind.JAXB.unmarshal( new java.io.StringReader( xml.toString() ), <%= method.return_value.referenced_struct.ee.qualified_name %>.class );
      org.testng.Assert.assertEquals( actualOutput, expectedResult );
    }
<% else  -%>
    org.testng.Assert.assertEquals( result, <%= jws_characteristic_fixture(service, method.return_value, true) %> );
<% end -%>
<% end -%>
  }

<%      method.exceptions.each do |exception| -%>
  @org.testng.annotations.Test
  public void call<%= method_name_prefix %>Error<%= exception.name %>()
    throws Exception
  {
    org.mockito.Mockito.doThrow( new <%= exception.jws.qualified_name  %>( "Damn!", new <%= exception.jws.qualified_fault_info_name %>(<%= exception.parameters.collect{|p|java_characteristic_fixture(p)}.join(", ") %>), null ) ).when( get<%= "#{data_module.name.to_s == repository.name.to_s ? '' : data_module.name}#{service.name}" %>() ).<%= Domgen::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p|java_characteristic_fixture(p)}.join(",") %>);

    try
    {
      get<%= "#{data_module.name.to_s == repository.name.to_s ? '' : data_module.name}#{service.name}" %>Client().<%= Domgen::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p|jws_characteristic_fixture(service, p)}.join(",") %>);
    }
    catch( final <%= service.jws.api_package %>.<%= exception.name %>Exception e )
    {
      org.testng.Assert.assertEquals( e.getMessage(), "Damn!" );
      org.testng.Assert.assertEquals( asXml( e.getFaultInfo() ), asXml( convert( <%= service.jws.api_package %>.<%= exception.name %>.class, new <%= exception.jws.qualified_fault_info_name %>(<%= exception.parameters.collect{|p|java_characteristic_fixture(p)}.join(", ") %>) ) ) );
      return;
    }
    org.testng.Assert.fail("Expected exception not raised");
  }

<%
        end
      end
    end
  end
-%>
  private <S> S convert( final Class<S> toType, final Object from )
  {
    final java.io.StringWriter xml = new java.io.StringWriter();
    javax.xml.bind.JAXB.marshal( from, xml );
    return javax.xml.bind.JAXB.unmarshal( new java.io.StringReader( xml.toString() ), toType );
  }

  private String asXml( final Object object )
  {
    final java.io.StringWriter xml = new java.io.StringWriter();
    javax.xml.bind.JAXB.marshal( object, xml );
    return xml.toString();
  }
}
