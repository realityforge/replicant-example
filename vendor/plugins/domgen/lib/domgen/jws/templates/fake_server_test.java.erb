/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.jws.qualified_fake_server_test_name) %>;

@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public class <%= repository.jws.fake_server_test_name %>
{
  private <%= repository.jws.qualified_fake_server_name %> _server;
<%
  repository.data_modules.select{|dm|dm.jws?}.each do |data_module|
    data_module.services.select{|s|s.jws?}.each do |service|
-%>
  private <%= service.jws.qualified_java_service_name %> _<%= service.data_module.name %><%= service.name %>;
<%
    end
  end
-%>

  @org.testng.annotations.BeforeMethod
  public void preTest()
    throws Exception
  {
    _server = new <%= repository.jws.qualified_fake_server_name %>();
    _server.start();
<%
  repository.data_modules.select{|dm|dm.jws?}.each do |data_module|
    data_module.services.select{|s|s.jws?}.each do |service|
-%>
    _<%= service.data_module.name %><%= service.name %> = org.mockito.Mockito.mock( <%= service.jws.qualified_java_service_name %>.class );
    _server.set<%= "#{data_module.name.to_s == repository.name.to_s ? '' : data_module.name}#{service.name}" %>( _<%= service.data_module.name %><%= service.name %> );
    //_<%= service.data_module.name %><%= service.name %>Client = new SimpleCalendarServiceService().get<%= service.name %>Port();
    //( (javax.xml.ws.BindingProvider) _<%= service.data_module.name %><%= service.name %>Client ).getRequestContext().put( javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY, _server.get<%= "#{data_module.name.to_s == repository.name.to_s ? '' : data_module.name}#{service.name}" %>Address() );
<%
    end
  end
-%>
  }

  @org.testng.annotations.AfterMethod
  public void postTest()
    throws Exception
  {
    if ( null != _server )
    {
      _server.stop();
      _server = null;
    }
<%
  repository.data_modules.select{|dm|dm.jws?}.each do |data_module|
    data_module.services.select{|s|s.jws?}.each do |service|
-%>
    _<%= service.data_module.name %><%= service.name %> = null;
    //_<%= service.data_module.name %><%= service.name %>Client = null;
<%
    end
  end
-%>
  }

  protected final <%= repository.jws.qualified_fake_server_name %> getServer()
  {
    return _server;
  }

<%
  repository.data_modules.select{|dm|dm.jws?}.each do |data_module|
    data_module.services.select{|s|s.jws?}.each do |service|
-%>
  protected final <%= service.jws.qualified_java_service_name %> get<%= "#{data_module.name.to_s == repository.name.to_s ? '' : data_module.name}#{service.name}" %>()
  {
    return _<%= service.data_module.name %><%= service.name %>;
  }
<%
    end
  end
-%>

}
