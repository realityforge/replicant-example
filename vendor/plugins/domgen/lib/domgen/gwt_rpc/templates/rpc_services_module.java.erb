/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt_rpc.qualified_rpc_services_module_name) %>;

<%= description_javadoc_for(repository, "") %>@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public class <%= repository.gwt_rpc.rpc_services_module_name %>
  extends com.google.gwt.inject.client.AbstractGinModule
{
<% if repository.imit? -%>
  @javax.annotation.Nonnull
  private static final org.realityforge.replicant.client.transport.SessionContext c_sessionContext = new org.realityforge.replicant.client.transport.SessionContext();

  @javax.annotation.Nonnull
  public static org.realityforge.replicant.client.transport.SessionContext getSessionContext()
  {
    return c_sessionContext;
  }

<% end -%>
<%
  needs_xsrf =
    repository.data_modules.select{|data_module| data_module.gwt_rpc?}.any? do |data_module|
      data_module.services.select{|service| service.gwt_rpc?}.any? do |service|
        service.gwt_rpc.xsrf_protected?
      end
    end
  if needs_xsrf
%>
  private static com.google.gwt.user.client.rpc.XsrfToken c_xsrfToken;

  public static com.google.gwt.user.client.rpc.XsrfToken getXsrfToken()
  {
    if( null == c_xsrfToken )
    {
      throw new IllegalStateException( "Attempting to construct service requiring XsrfToken without specifying token." );
    }
    return c_xsrfToken;
  }

<%
  end
-%>
  public static void initialize( final String moduleName<% if needs_xsrf %>, final com.google.gwt.user.client.rpc.XsrfToken xsrfToken<% end -%> )
  {
<%
  if needs_xsrf
-%>
    if( null != c_xsrfToken )
    {
      throw new IllegalStateException( "Attempting to re-initialize gin module." );
    }
    c_xsrfToken = xsrfToken;
<%
  end
-%>
    if( !moduleName.equals( "<%= repository.gwt_rpc.module_name %>" ) )
    {
      throw new IllegalStateException( "Specified GWT module name '" + moduleName + "' does not match module name '<%= repository.gwt_rpc.module_name %>' used during compilation." );
    }
<% if repository.imit? -%>
    if( null == getSessionContext().getBaseURL() )
    {
      getSessionContext().setBaseURL( com.google.gwt.core.client.GWT.getHostPageBaseURL() );
    }
<% end -%>
  }

  @java.lang.Override
  protected void configure()
  {<%
  repository.data_modules.select{|data_module| data_module.gwt_rpc?}.each do |data_module|
    data_module.services.select{|service| service.gwt_rpc?}.each do |service|
%>
    bind( <%= service.gwt_rpc.qualified_facade_service_name %>.class ).to( <%= service.gwt_rpc.qualified_proxy_name %>.class ).asEagerSingleton();
<%
    end
  end
%>  }
<%
  repository.data_modules.select{|data_module| data_module.gwt_rpc?}.each do |data_module|
    data_module.services.select{|service| service.gwt_rpc?}.each do |service|
%>
  @com.google.inject.Provides
  @javax.inject.Singleton
  public <%= service.gwt_rpc.qualified_async_rpc_service_name %> get<%= service.name %>()
  {
    final <%= service.gwt_rpc.qualified_async_rpc_service_name %> service = com.google.gwt.core.client.GWT.create( <%= service.gwt_rpc.qualified_rpc_service_name %>.class );
<% if service.gwt_rpc.xsrf_protected? %>
    ( (com.google.gwt.user.client.rpc.HasRpcToken) service ).setRpcToken( getXsrfToken() );
<% end %>
<% if service.imit? -%>
    ( (com.google.gwt.user.client.rpc.ServiceDefTarget) service ).setRpcRequestBuilder( new <%= repository.gwt_rpc.qualified_rpc_request_builder_name %>( c_sessionContext ) );
<% end -%>
    if ( null == getSessionContext().getBaseURL() )
    {
      throw new java.lang.IllegalStateException( "<%= repository.gwt_rpc.rpc_services_module_name %>.initialize() not invoked prior to using gin module" );
    }
    ( (com.google.gwt.user.client.rpc.ServiceDefTarget) service ).setServiceEntryPoint( getSessionContext().getBaseURL() + "<%= repository.gwt_rpc.module_name %>/" + <%= service.gwt_rpc.qualified_rpc_service_name %>.PATH );
    return service;
  }
<%
    end
  end
%>}
