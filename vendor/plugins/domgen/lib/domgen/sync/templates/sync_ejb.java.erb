/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.sync.qualified_sync_ejb_name) %>;

@javax.ejb.Singleton( name = iris.acal.server.service.master.SynchronizationService.NAME )
@javax.ejb.TransactionManagement( javax.ejb.TransactionManagementType.BEAN )
@javax.ejb.ConcurrencyManagement( javax.ejb.ConcurrencyManagementType.BEAN )
public class <%= data_module.sync.sync_ejb_name %>
  extends iris.syncrecord.server.service.StandardSyncService
  implements <%= data_module.service_by_name(:SynchronizationService).ejb.qualified_service_name %>
{
  private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= data_module.sync.sync_ejb_name %>.class.getName() );

  private static final int SYNC_ERROR_CODE = 42;

  @javax.persistence.PersistenceContext( unitName = <%= data_module.repository.jpa.qualified_unit_descriptor_name %>.NAME )
  private javax.persistence.EntityManager _entityManager;
  @javax.annotation.Resource
  private javax.transaction.UserTransaction _transaction;
<% data_module.sync.entities_to_synchronize.each do |entity| -%>
  @javax.inject.Inject
  private <%= entity.dao.jpa.qualified_dao_service_name %> _<%= entity.data_module.name %><%= entity.name %>Repository;
<% end -%>
  @javax.annotation.Resource
  private javax.transaction.TransactionSynchronizationRegistry _registry;
  @javax.inject.Inject
  private org.realityforge.replicant.server.EntityMessageEndpoint _endpoint;
  @javax.inject.Inject
  private <%= data_module.service_by_name(:SynchronizationContext).ejb.qualified_service_name %> _context;

  private volatile boolean _inSync;

  @java.lang.Override
  @javax.annotation.Nonnull
  public iris.syncrecord.server.data_type.SyncStatusDTO synchronizeDataSource( @javax.annotation.Nonnull final String dataSourceCode )
  {
    if ( !_inSync )
    {
      _inSync = true;
      try
      {
        if ( isFeatureEnabled( dataSourceCode + ".syncEnabled" ) )
        {
          return performSynchronization( dataSourceCode );
        }
        else
        {
          return createDisabledSyncStatus( dataSourceCode );
        }
      }
      finally
      {
        _inSync = false;
      }
    }
    else
    {
      return createAlreadyActiveSyncStatus( dataSourceCode );
    }
  }

  private iris.syncrecord.server.data_type.SyncStatusDTO performSynchronization( @javax.annotation.Nonnull final String dataSourceCode )
  {
    final iris.syncrecord.server.service.SynchronizationRecorder recorder = startSynchronization( dataSourceCode );

<% data_module.sync.entities_to_synchronize.each do |entity| -%>
    recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.AddCount", 0 );
    recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.RemoveCount", 0 );
    recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.UpdateCount", 0 );
<% end -%>

    log( dataSourceCode, "Synchronizing data" );
    try
    {
<% data_module.sync.entities_to_synchronize.reverse.each do |entity| -%>
      {
        log( dataSourceCode, "Synchronizing <%= entity.data_module.name %>.<%= entity.name %> removals" );
        synchronize<%= entity.data_module.name %><%= entity.name %>Removals( dataSourceCode, recorder );
        final int removeCount = recorder.getMetricValue( "<%= entity.data_module.name %>.<%= entity.name %>.RemoveCount" ).get();
        log( dataSourceCode, "Removed " + removeCount + " <%= entity.data_module.name %>.<%= entity.name %> instances" );
      }
<% end -%>
<% data_module.sync.entities_to_synchronize.each do |entity| -%>
      {
        log( dataSourceCode, "Synchronizing <%= entity.data_module.name %>.<%= entity.name %> adds and updates" );
        synchronize<%= entity.data_module.name %><%= entity.name %>Updates( dataSourceCode, recorder );
        final int addCount = recorder.getMetricValue( "<%= entity.data_module.name %>.<%= entity.name %>.AddCount" ).get();
        final int updateCount = recorder.getMetricValue( "<%= entity.data_module.name %>.<%= entity.name %>.UpdateCount" ).get();
        log( dataSourceCode, "Added " + addCount + " <%= entity.data_module.name %>.<%= entity.name %> instances" );
        log( dataSourceCode, "Updated " + updateCount + " <%= entity.data_module.name %>.<%= entity.name %> instances" );
      }
<% end -%>
      log( dataSourceCode, "Successfully synchronized data" );
    }
    catch ( final Throwable e )
    {
      recordSyncError( recorder, SYNC_ERROR_CODE, e );
      log( dataSourceCode, "Synchronisation of data failed", e );
    }
    finally
    {
      completeSynchronization( recorder );
    }
    return toSyncStatus( recorder );
  }

  private void log( final String dataSourceCode, final String message )
  {
    log( dataSourceCode, message, null );
  }

  private void log( final String dataSourceCode, final String message, final Throwable t )
  {
    final String prefix = dataSourceCode + ": ";
    LOG.log( java.util.logging.Level.INFO, prefix + message, t );
  }
<% data_module.sync.entities_to_synchronize.each do |entity| -%>

  @java.lang.SuppressWarnings( "unchecked" )
  @javax.annotation.Nonnull
  private java.util.List<Object[]> query<%= entity.data_module.name %><%= entity.name %>Updates( @javax.annotation.Nonnull final String dataSourceCode )
    throws Exception
  {
    _transaction.begin();
    try
    {
      final String sql = _context.getSqlToRetrieve<%= entity.data_module.name %><%= entity.name %>ListToUpdate( dataSourceCode );
      final javax.persistence.Query query = _entityManager.createNativeQuery( sql );
      query.setParameter( 1, dataSourceCode );
      return query.getResultList();
    }
    finally
    {
      _transaction.commit();
    }
  }

  private void synchronize<%= entity.data_module.name %><%= entity.name %>Updates( @javax.annotation.Nonnull final String dataSourceCode, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
    throws Exception
  {
    final java.util.List<Object[]> results = query<%= entity.data_module.name %><%= entity.name %>Updates( dataSourceCode );

    for ( final Object[] result : results )
    {
      // Start Replication "Hook"
      _transaction.begin();
      _entityManager.flush();
      try
      {
        org.realityforge.replicant.server.ee.ReplicationRequestUtil.startReplication( _registry, "synchronize<%= entity.data_module.name %><%= entity.name %>Updates", null, null );
<% attr = entity.attributes.select{|a| a.sql? && a.jpa? && a.sync? } -%>
<% attr.each_with_index do |a, i| -%>
        final <%= a.jpa.java_type(:boundary) %> v_<%= a.name %> = (<%= a.jpa.java_type(:boundary) %>) result[ <%= i %> ];
<% end -%>
        final String v_MappingID = (String) result[ <%= attr.size %> ];

        final <%= entity.jpa.qualified_name %> entity;
        if( null == v_<%= entity.primary_key.name %> )
        {
<% attr.select{|a|a.immutable? && !a.generated_value?}.each do |a| %>
          final <%= a.jpa.java_type %> v_<%= a.name %>_ctor;
<% if a.sync.custom_transform? -%>
          v_<%= a.name %>_ctor = _context.transform<%= entity.data_module.name %><%= entity.name %><%= a.name %>( v_<%= a.name %> );
<% elsif a.reference? -%>
<% if a.nullable? -%>
          if ( null == v_<%= a.name %> )
          {
            v_<%= a.name %>_ctor = null;
          }
          else
          {
<% end -%>
            final <%= a.jpa.java_type(:boundary) %> v_<%= a.name %>_ctorID = (<%= a.jpa.java_type(:boundary) %>) _entityManager.
              createNativeQuery( "SELECT <%= a.referenced_entity.sync.master_entity.attribute_by_name( a.primary_key? ? a.entity.name : a.name ).sql.quoted_column_name %> FROM <%= a.referenced_entity.sync.master_entity.sql.qualified_table_name %> WHERE <%= data_module.sql.dialect.quote('ID') %> = ?" ).
                setParameter( 1, v_<%= a.name %> ).
                getSingleResult();
            v_<%= a.name %>_ctor = _<%= a.referenced_entity.data_module.name %><%= a.referenced_entity.name %>Repository.getBy<%= a.referenced_entity.primary_key.name %>( v_<%= a.name %>_ctorID );
<% if a.nullable? -%>
          }
<% end -%>
<% else -%>
          v_<%= a.name %>_ctor = v_<%= a.name %>;
<% end -%>
<% end -%>
          entity = new <%= entity.jpa.qualified_name %>(<%= attr.select{|a|a.immutable? && !a.generated_value?}.collect{|a| "v_#{a.name}_ctor"}.join(", ") %>);
        }
        else
        {
          entity = _<%= entity.data_module.name %><%= entity.name %>Repository.getBy<%= entity.primary_key.name %>( v_<%= entity.primary_key.name %> );
        }
<% attr.select{|a|!a.immutable?}.each do |a| -%>
        {
<% if a.sync.custom_transform? -%>
          final <%= a.jpa.java_type(:boundary) %> v = _context.transform<%= entity.data_module.name %><%= entity.name %><%= a.name %>( v_<%= a.name %> );
          entity.set<%= a.name %>( v );
<% elsif a.reference? -%>
<% if a.nullable? -%>
          if ( null == v_<%= a.name %> )
          {
            entity.set<%= a.name %>( null );
          }
          else
          {
<% end -%>
            final <%= a.jpa.java_type(:boundary) %> v = (<%= a.jpa.java_type(:boundary) %>) _entityManager.
              createNativeQuery( "SELECT <%= a.referenced_entity.sync.master_entity.attribute_by_name( a.referenced_entity.name ).sql.quoted_column_name %> FROM <%= a.referenced_entity.sync.master_entity.sql.qualified_table_name %> WHERE <%= data_module.sql.dialect.quote('ID') %> = ?" ).
                setParameter( 1, v_<%= a.name %> ).
                getSingleResult();
            entity.set<%= a.name %>( _<%= a.referenced_entity.data_module.name %><%= a.referenced_entity.name %>Repository.getBy<%= a.referenced_entity.primary_key.name %>( v ) );
<% if a.nullable? -%>
          }
<% end -%>
<% else -%>
          entity.set<%= a.name %>( v_<%= a.name %> );
<% end -%>
        }
<% end -%>
        if( null == v_<%= entity.primary_key.name %> )
        {
          _<%= entity.data_module.name %><%= entity.name %>Repository.persist( entity );
          _entityManager.
            createNativeQuery( "UPDATE <%= entity.sync.master_entity.sql.qualified_table_name %> SET <%= entity.sync.master_entity.attribute_by_name( entity.name ).sql.quoted_column_name %> = ?, <%= data_module.sql.dialect.quote('MasterSynchronized') %> = ? WHERE <%= data_module.sql.dialect.quote('MappingID') %> = ?" ).
            setParameter( 1, entity.<%= getter_for(entity.primary_key) %> ).
            setParameter( 2, true ).
            setParameter( 3, v_MappingID ).
            executeUpdate();
          recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.AddCount", 1 );
        }
        else
        {
          _entityManager.
            createNativeQuery( "UPDATE <%= entity.sync.master_entity.sql.qualified_table_name %> SET <%= data_module.sql.dialect.quote('MasterSynchronized') %> = ? WHERE <%= data_module.sql.dialect.quote('MappingID') %> = ?" ).
            setParameter( 1, true ).
            setParameter( 2, v_MappingID ).
            executeUpdate();
          recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.UpdateCount", 1 );
        }
        _entityManager.flush();
        _<%= entity.data_module.name %><%= entity.name %>Repository.detach( entity );
      }
      finally
      {
        org.realityforge.replicant.server.ee.ReplicationRequestUtil.completeReplication( _registry, _entityManager, _endpoint );
        // End Replication "Hook"
        _transaction.commit();
      }
    }
  }
<% end -%>
<% data_module.sync.entities_to_synchronize.reverse.each do |entity| -%>

  @java.lang.SuppressWarnings( "unchecked" )
  @javax.annotation.Nonnull
  private java.util.List<Object[]> query<%= entity.data_module.name %><%= entity.name %>Removals( @javax.annotation.Nonnull final String dataSourceCode )
    throws Exception
  {
    _transaction.begin();
    try
    {
      final String sql = _context.getSqlToRetrieve<%= entity.data_module.name %><%= entity.name %>ListToRemove( dataSourceCode );
      final javax.persistence.Query query = _entityManager.createNativeQuery( sql );
      query.setParameter( 1, dataSourceCode );
      return query.getResultList();
    }
    finally
    {
      _transaction.commit();
    }
  }

  private void synchronize<%= entity.data_module.name %><%= entity.name %>Removals( @javax.annotation.Nonnull final String dataSourceCode, @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
    throws Exception
  {
    final java.util.List<Object[]> results = query<%= entity.data_module.name %><%= entity.name %>Removals( dataSourceCode );
    for ( final Object[] result : results )
    {
      // Start Replication "Hook"
      _transaction.begin();
      try
      {
        org.realityforge.replicant.server.ee.ReplicationRequestUtil.startReplication( _registry, "synchronize<%= entity.data_module.name %><%= entity.name %>Removals", null, null );

        if( null != result[ 1 ] )
        {
          final <%= entity.jpa.qualified_name %> entity = _<%= entity.data_module.name %><%= entity.name %>Repository.findBy<%= entity.primary_key.name %>( ( <%= entity.primary_key.jpa.java_type(:boundary) %> ) result[ 1 ] );
          if( null != entity )
          {
            _<%= entity.data_module.name %><%= entity.name %>Repository.remove( entity );
            _entityManager.
              createNativeQuery( "UPDATE <%= entity.sync.master_entity.sql.qualified_table_name %> SET <%= data_module.sql.dialect.quote('MasterSynchronized') %> = ? WHERE <%= data_module.sql.dialect.quote('ID') %> = ?" ).
              setParameter( 1, true ).
              setParameter( 2, result[ 0 ] ).
              executeUpdate();
            recorder.incMetric( "<%= entity.data_module.name %>.<%= entity.name %>.RemoveCount", 1 );
            _entityManager.flush();
            _<%= entity.data_module.name %><%= entity.name %>Repository.detach( entity );
          }
        }
      }
      finally
      {
        org.realityforge.replicant.server.ee.ReplicationRequestUtil.completeReplication( _registry, _entityManager, _endpoint );
        // End Replication "Hook"
        _transaction.commit();
      }
    }
  }
<% end -%>
}
