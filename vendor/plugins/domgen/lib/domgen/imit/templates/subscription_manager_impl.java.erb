/* DO NOT EDIT: File is auto-generated */
package <%= repository.imit.entity_package %>;

import org.realityforge.replicant.client.transport.SubscriptionEntry;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public class <%= repository.imit.subscription_manager_impl_name %>
  extends org.realityforge.replicant.client.transport.AbstractSubscriptionManager<<%= repository.imit.qualified_graph_enum_name %>>
  implements <%= repository.imit.qualified_subscription_manager_name %>
{
  private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= repository.imit.subscription_manager_impl_name %>.class.getName() );

  private final <%= repository.imit.qualified_client_session_context_name %> _context;

  public <%= repository.imit.subscription_manager_impl_name %>( final <%= repository.imit.qualified_client_session_context_name %> context )
  {
    _context = context;
  }
<%
  repository.imit.graphs.each do |graph|
  param = ''
  param_value = ''
  param_early_value = ''
  param_cache_value = ''
  subscribe_method = 'Type'
  if graph.instance_root?
    # Names are fully qualified so take any random data module
    entity = repository.data_modules[0].entity_by_name(graph.instance_root)
    type = entity.primary_key.imit.primitive_java_type
    param = "#{type} id"
    param_value = ', id'
    param_early_value = 'id'
    subscribe_method = 'Instance'
  elsif graph.cacheable?
    param_cache_value = 'eTag, cacheCurrentAction, '
  end
  filter_param = ''
  update_param = param.dup
  update_param_early_value = param_early_value.dup
  if graph.filter_parameter
    p = graph.filter_parameter
    java_type = "#{nullability_annotation(p.nullable?)} #{Domgen::Java.java_type(p, :imit, :default)}"
    update_param = "#{update_param}, " if update_param.size > 0
    filter_param = "#{java_type} filter"
    update_param = "#{update_param}#{filter_param}"
    update_param_early_value = "#{update_param_early_value}, " if update_param_early_value.size > 0
    update_param_early_value = "#{update_param_early_value}filter"
  end
%>
  @Override
  public void subscribeTo<%= graph.name %>(<%= update_param %>)
  {
    final SubscriptionEntry<<%= repository.imit.qualified_graph_enum_name %>> entry =
      subscribeTo<%= subscribe_method %>Graph( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %><%= param_value %> );
    if( null != entry )
    {
      final Runnable runnable = new Runnable()
      {
        @Override
        public void run()
        {
          entry.markAsPresent();
        }
      };
<% if graph.cacheable? -%>
      final org.realityforge.replicant.client.transport.CacheEntry cacheEntry = _context.getCacheService().lookup( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>.name() );
      final String eTag = null != cacheEntry ? cacheEntry.getETag() : null;
      final String content = null != cacheEntry ? cacheEntry.getContent() : null;
      if( null != content )
      {
        LOG.info( "Found locally cached data for graph <%= graph.name %> with etag " + eTag + "." );
      }
      final Runnable cacheCurrentAction = new Runnable()
      {
        public void run()
        {
          assert null != content;
          LOG.info( "Loading cached data for graph <%= graph.name %> with etag " + eTag );
          //TODO: Figure out how to make the bulkLoad configurable
          _context.loadCachedContent( content, runnable, true );
        }
      };
<% end -%>
      _context.remoteSubscribeTo<%= graph.name %>( <%= param_cache_value %><%= update_param_early_value %><%= update_param_early_value.size > 0 ? ', ' : '' %>runnable );
    }
<% if graph.filter_parameter -%>
    else
    {
      update<%= graph.name %>Subscription(<%= update_param_early_value %>);
    }
<% end -%>
  }

<% if graph.filter_parameter %>
  public void update<%= graph.name %>Subscription(<%= update_param %>)
  {
    final SubscriptionEntry<<%= repository.imit.qualified_graph_enum_name %>> entry =
      find<%= subscribe_method %>GraphSubscription( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %><%= param_value %> );
    if( null != entry )
    {
      final Runnable runnable = new Runnable()
      {
        @Override
        public void run()
        {
          entry.setSubscriptionUpdateInProgress( false );
        }
      };
      entry.setSubscriptionData( filter );
      entry.setSubscriptionUpdateInProgress( true );
      _context.remoteUpdate<%= graph.name %>Subscription( <%= update_param_early_value %><%= update_param_early_value.size > 0 ? ', ' : '' %>runnable );
    }
  }
<% end %>

  @Override
  public void unsubscribeFrom<%= graph.name %>(<%= param %>)
  {
    final SubscriptionEntry<<%= repository.imit.qualified_graph_enum_name %>> entry =
      unsubscribeFrom<%= subscribe_method %>Graph( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %><%= param_value %> );
    if( null != entry )
    {
      entry.markDeregisterInProgress();
      _context.remoteUnsubscribeFrom<%= graph.name %>( <%= param_early_value %><%= param_early_value.size > 0 ? ', ' : '' %>new Runnable()
      {
        @Override
        public void run()
        {
          entry.markAsDeregistered();
        }
      } );
    }
  }
<% end %>
}
