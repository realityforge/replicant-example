/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_server_session_context_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration" } )
@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.imit.server_session_context_test_name %>
  extends <%= repository.ejb.qualified_base_service_test_name %>
{
<%
  repository.imit.graphs.each do |graph|
    extra_interest_filter = ''
    if graph.filtered?
      graph.routing_keys.each do |routing_key|
        var_name = Domgen::Naming.camelize(routing_key.target_attribute.qualified_name.gsub('.',''))
        nullable = !graph.instance_root? || !(routing_key.imit_attribute.attribute.entity.qualified_name == graph.instance_root)
        param_type = routing_key.target_attribute.imit.non_primitive_java_type
        extra_interest_filter << ", #{nullability_annotation(nullable)} #{param_type} #{var_name}"
      end
    end
  check_method = "is#{graph.name}Interesting"
  if extra_interest_filter.size > 0
-%>
  public abstract void <%= check_method %>()
    throws Exception;

<%
  end
end
-%>
<%
  repository.imit.graphs.each do |graph|
    filter_java_type = nil
    if graph.filter_parameter
      filter_java_type = "#{Domgen::Java.primitive?(graph.filter_parameter, :ee, :default) ? '' : nullability_annotation(graph.filter_parameter.nullable?)} #{Domgen::Java.java_type(graph.filter_parameter, :ee, :default)}"
    end
if !graph.instance_root?
  if filter_java_type
-%>
  public abstract void collectForFilterChange<%= graph.name %>()
    throws Exception;

<%
  end
  if graph.external_data_load? || filter_java_type -%>
  public abstract void collect<%= graph.name %>()
    throws Exception;

<% end -%>
<%
else
  if filter_java_type
-%>
  public abstract void collectForFilterChange<%= graph.name %>()
    throws Exception;

<%
    graph.reachable_entities.collect{|n|repository.entity_by_name(n)}.select { |entity| entity.imit? && !entity.abstract? }.each do |entity|
      outgoing_links = entity.referencing_attributes.select{|a| a.imit? && a.imit.client_side? && a.inverse.imit.traversable? && a.inverse.imit.replication_edges.include?(graph.name)}
      outgoing_links.each do |a|
        if a.inverse.multiplicity == :many
-%>
  public abstract void get<%= Domgen::Naming.pluralize(a.inverse.name) %>In<%= graph.name %>Graph()
    throws Exception;

<%
      elsif a.inverse.multiplicity == :one || a.inverse.multiplicity == :zero_or_one
-%>
  public abstract void get<%= a.inverse.name %>In<%= graph.name %>Graph()
    throws Exception;
<%
        end
      end
    end
  end
end
 -%>
<% end -%>
<%
  processed = []
  repository.imit.graphs.select{|g| g.instance_root? }.collect{|g| g.inward_graph_links }.flatten.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filtered?
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
     next if processed.include?(key)
     processed << key
-%>
  public abstract void shouldFollowLinkFrom<%= graph_link.source_graph %>To<%= target_graph.name %>()
    throws Exception;

  public abstract void getLinksToUpdateFor<%= graph_link.source_graph %>To<%= target_graph.name %>()
    throws Exception;

<% end -%>

  protected final <%= repository.imit.qualified_server_session_context_name %> service()
  {
    return s( <%= repository.imit.qualified_server_session_context_name %>.class );
  }

  protected final <%= repository.imit.qualified_server_session_context_name %>EJB ejb()
  {
    return toObject( <%= repository.imit.qualified_server_session_context_name %>EJB.class, service() );
  }
}
