/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_session_name) %>;

@javax.annotation.Generated( "Domgen" )
public class <%= repository.imit.session_name %>
  extends org.realityforge.replicant.server.transport.ReplicantSession
{
  private static final long serialVersionUID = 1;
<% if repository.imit.graphs.any?{|graph| !graph.filter_parameter.nil? && !Domgen::Java.primitive?(graph.filter_parameter, :ee, :default)} -%>
  private transient static final org.codehaus.jackson.map.ObjectMapper c_jsonMapper = new org.codehaus.jackson.map.ObjectMapper();
<% end -%>

<%
  repository.imit.graphs.each do |graph|
    if graph.instance_root?
      entity = repository.entity_by_name(graph.instance_root)
      if graph.filter_parameter
        p = graph.filter_parameter
        java_type = Domgen::Java.java_type(p, :ee, :default)
%>
  private final java.util.HashMap<<%= entity.primary_key.jpa.non_primitive_java_type %>, <%= java_type %>> _interestedIn<%= graph.name %> = new java.util.HashMap<<%= entity.primary_key.jpa.non_primitive_java_type %>, <%= java_type %>>();
<%
      else
%>
  private final java.util.HashSet<<%= entity.primary_key.jpa.non_primitive_java_type %>> _interestedIn<%= graph.name %> = new java.util.HashSet<<%= entity.primary_key.jpa.non_primitive_java_type %>>();
<%
      end
else
      if graph.filter_parameter
        p = graph.filter_parameter
        java_type = "#{nullability_annotation(true)} #{Domgen::Java.java_type(p, :ee, :default)}"
%>
  private <%= java_type %> _interestedIn<%= graph.name %>Filter;
<%
      end
%>
  private boolean _interestedIn<%= graph.name %>;
<%
    end
  end
%>
  public <%= repository.imit.session_name %>( @javax.annotation.Nonnull final String sessionID )
  {
    super( sessionID );
  }

<%
  repository.imit.graphs.each do |graph|
    if graph.instance_root?
      entity = repository.entity_by_name(graph.instance_root)
      if graph.filter_parameter
        java_type = Domgen::Java.java_type(graph.filter_parameter, :ee, :default)
        primitive = Domgen::Java.primitive?(graph.filter_parameter, :ee, :default)
%>
  public java.util.Map<<%= entity.primary_key.jpa.non_primitive_java_type %>, <%= java_type %>> getInterestedIn<%= graph.name %>()
  {
    return java.util.Collections.unmodifiableMap( _interestedIn<%= graph.name %> );
  }

  public final void registerInterestIn<%= graph.name %>( final <%= entity.primary_key.jpa.primitive_java_type %> id, final <%= nullability_annotation(graph.filter_parameter.nullable?)%> <%= java_type %> filter )
  {
    _interestedIn<%= graph.name %>.put( id, filter );
  }

  public final void updateInterestIn<%= graph.name %>( final <%= entity.primary_key.jpa.primitive_java_type %> id, final <%= nullability_annotation(graph.filter_parameter.nullable?)%> <%= java_type %> filter )
  {
    _interestedIn<%= graph.name %>.put( id, filter );
  }

  public final void deregisterInterestIn<%= graph.name %>( final <%= entity.primary_key.jpa.primitive_java_type %> id )
  {
    _interestedIn<%= graph.name %>.remove( id );
  }

  public final boolean is<%= graph.name %>Interesting( final <%= entity.primary_key.jpa.primitive_java_type %> id )
  {
    return _interestedIn<%= graph.name %>.containsKey( id );
  }

  <%= nullability_annotation(graph.filter_parameter.nullable?)%>
  public final <%= java_type %> get<%= graph.name %>Parameter( final <%= entity.primary_key.jpa.primitive_java_type %> id )
  {
<% if graph.filter_parameter.nullable? || primitive -%>
    return _interestedIn<%= graph.name %>.get( id );
<% else -%>
    final <%= java_type %> value = _interestedIn<%= graph.name %>.get( id );
    if ( null == value )
    {
      throw new java.lang.IllegalStateException( "Unable to locate filter parameter for <%= graph.name %>/" + id );
    }
    return value;
<% end -%>
  }
<%
      else
%>
  public java.util.Set<<%= entity.primary_key.jpa.non_primitive_java_type %>> getInterestedIn<%= graph.name %>()
  {
    return java.util.Collections.unmodifiableSet( _interestedIn<%= graph.name %> );
  }

  public final void registerInterestIn<%= graph.name %>( final <%= entity.primary_key.jpa.java_type %> id )
  {
    _interestedIn<%= graph.name %>.add( id );
  }

  public final void deregisterInterestIn<%= graph.name %>( final <%= entity.primary_key.jpa.java_type %> id )
  {
    _interestedIn<%= graph.name %>.remove( id );
  }

  public final boolean is<%= graph.name %>Interesting( final <%= entity.primary_key.jpa.java_type %> id )
  {
    return _interestedIn<%= graph.name %>.contains( id );
  }
<%
    end
  else
    filter_type = nil
    primitive = false
    if graph.filter_parameter
      filter_type = Domgen::Java.java_type(graph.filter_parameter, :ee, :default)
      primitive = Domgen::Java.primitive?(graph.filter_parameter, :ee, :default)
    end
-%>
  public final boolean isInterestedIn<%= graph.name %>()
  {
    return _interestedIn<%= graph.name %>;
  }

  public final void registerInterestedIn<%= graph.name %>(<%= filter_type.nil? ? '' : "#{filter_type} filter " %>)
  {
<% if filter_type -%>
    _<%= graph.name %>Filter = filter;
<% end -%>
    _interestedIn<%= graph.name %> = true;
  }

  public final void deregisterInterestedIn<%= graph.name %>()
  {
    _interestedIn<%= graph.name %> = false;
  }

<% if filter_type -%>
  private <%= filter_type %> _<%= graph.name %>Filter;

  public final void updateInterestIn<%= graph.name %>( final <%= nullability_annotation(graph.filter_parameter.nullable?)%> <%= filter_type %> filter )
  {
    _<%= graph.name %>Filter = filter;
  }

  public <%= filter_type %> get<%= graph.name %>Parameter()
  {
<% if graph.filter_parameter.nullable? || primitive -%>
    return _<%= graph.name %>Filter;
<% else -%>
    if ( null == _<%= graph.name %>Filter )
    {
      throw new java.lang.IllegalStateException( "Unable to locate filter parameter for <%= graph.name %>" );
    }
    return _<%= graph.name %>Filter;
<% end -%>
  }

<%
      end
    end
  end
%>

  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings( "DE_MIGHT_IGNORE" )
  @java.lang.Override
  public void emitStatus( @javax.annotation.Nonnull final javax.json.stream.JsonGenerator g, @javax.annotation.Nonnull final org.realityforge.rest.field_filter.FieldFilter filter )
  {
    if ( filter.allow( "instanceSubscriptions" ) )
    {
      final org.realityforge.rest.field_filter.FieldFilter subscriptionsFilter = filter.subFilter( "instanceSubscriptions" );
      g.writeStartObject( "instanceSubscriptions" );
<% repository.imit.graphs.select{|graph| graph.instance_root? && graph.filter_parameter.nil? }.each do |graph| -%>
      if ( subscriptionsFilter.allow( "<%= graph.name %>" ) )
      {
        g.writeStartArray( "<%= graph.name %>" );
        for ( final <%= repository.entity_by_name(graph.instance_root).primary_key.jpa.java_type %> key : _interestedIn<%= graph.name %> )
        {
          g.write( key );
        }
        g.writeEnd();
      }
<% end -%>
      g.writeEnd();
    }
    if ( filter.allow( "filteredInstanceSubscriptions" ) )
    {
      final org.realityforge.rest.field_filter.FieldFilter subscriptionsFilter = filter.subFilter( "filteredInstanceSubscriptions" );
      g.writeStartObject( "filteredInstanceSubscriptions" );
<% repository.imit.graphs.select{|graph| graph.instance_root? && !graph.filter_parameter.nil? }.each do |graph| -%>
      if ( subscriptionsFilter.allow( "<%= graph.name %>" ) )
      {
        g.writeStartObject( "<%= graph.name %>" );
        for ( final java.util.Map.Entry<<%= repository.entity_by_name(graph.instance_root).primary_key.jpa.java_type %>, <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>> entry : _interestedIn<%= graph.name %>.entrySet() )
        {
<% if graph.filter_parameter.nullable? -%>
          if( null == entry.getValue() )
          {
            g.writeNull( String.valueOf( entry.getKey() ) );
          }
          else
          {
<% end -%>
<% if Domgen::Java.primitive?(graph.filter_parameter, :ee, :default) -%>
          g.write( String.valueOf( entry.getKey() ), entry.getValue() );
<% else -%>
          {
              final java.io.StringWriter writer = new java.io.StringWriter();
              try { c_jsonMapper.writeValue( writer, entry.getValue() ); }
              catch ( final java.io.IOException ioe ) {}
              writer.flush();
              final javax.json.JsonReader reader =
                javax.json.Json.createReader( new java.io.StringReader( writer.toString() ) );
              g.write( String.valueOf( entry.getKey() ), reader.read() );
              reader.close();
          }
<% end -%>
<% if graph.filter_parameter.nullable? -%>
          }
<% end -%>
        }
        g.writeEnd();
      }
<% end -%>
      g.writeEnd();
    }

    if ( filter.allow( "typeSubscriptions" ) )
    {
      final org.realityforge.rest.field_filter.FieldFilter subscriptionsFilter = filter.subFilter( "typeSubscriptions" );
      g.writeStartObject( "typeSubscriptions" );
<% repository.imit.graphs.select{|graph| !graph.instance_root? && graph.filter_parameter.nil? }.each do |graph| -%>
      if ( subscriptionsFilter.allow( "<%= graph.name %>" ) )
      {
        g.write( "<%= graph.name %>",_interestedIn<%= graph.name %> );
      }
<% end -%>
      g.writeEnd();
    }

    if ( filter.allow( "filteredTypeSubscriptions" ) )
    {
      final org.realityforge.rest.field_filter.FieldFilter subscriptionsFilter = filter.subFilter( "filteredTypeSubscriptions" );
      g.writeStartObject( "filteredTypeSubscriptions" );
<% repository.imit.graphs.select{|graph| !graph.instance_root? && !graph.filter_parameter.nil? }.each do |graph| -%>
      if ( subscriptionsFilter.allow( "<%= graph.name %>" ) )
      {
        final org.realityforge.rest.field_filter.FieldFilter <%= graph.name %>Filter = subscriptionsFilter.subFilter( "<%= graph.name %>" );
        g.writeStartObject( "<%= graph.name %>" );
        g.write( "subscribed", _interestedIn<%= graph.name %> );
        if( _interestedIn<%= graph.name %> )
        {
<% if graph.filter_parameter.nullable? -%>
          if( null == _<%= graph.name %>Filter )
          {
            g.writeNull( "filter" );
          }
          else
          {
<% end -%>
<% if Domgen::Java.primitive?(graph.filter_parameter, :ee, :default) -%>
            g.write( "filter", _<%= graph.name %>Filter );
<% else -%>
            final java.io.StringWriter writer = new java.io.StringWriter();
            try { c_jsonMapper.writeValue( writer, _<%= graph.name %>Filter ); }
            catch ( final java.io.IOException ioe ) {}
            writer.flush();
            final javax.json.JsonReader reader =
              javax.json.Json.createReader( new java.io.StringReader( writer.toString() ) );
            g.write( "filter", reader.read() );
            reader.close();
<% end -%>
<% if graph.filter_parameter.nullable? -%>
          }
<% end -%>
        }
        g.writeEnd();
      }
<% end -%>
      g.writeEnd();
    }
  }
}
