/* DO NOT EDIT: File is auto-generated */
package <%= repository.imit.encoder_package %>;

@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.imit.session_manager_name %>
  extends org.realityforge.replicant.server.transport.ReplicantSessionManager<<%= repository.imit.qualified_session_name %>>
{
  @javax.inject.Inject
  private <%= repository.imit.qualified_graph_encoder_name %> _encoder;

  @javax.annotation.Nonnull
  protected final <%= repository.imit.qualified_graph_encoder_name %> getEncoder()
  {
    return _encoder;
  }

  @SuppressWarnings("SynchronizationOnLocalVariableOrMethodParameter")
  @Override
  public boolean saveEntityMessages( @javax.annotation.Nullable final String sessionID,
                                     @javax.annotation.Nullable final String requestID,
                                     @javax.annotation.Nonnull final java.util.Collection<org.realityforge.replicant.server.EntityMessage> messages,
                                     @javax.annotation.Nonnull final java.util.Collection<org.realityforge.replicant.server.EntityMessage> sessionMessages )
  {
    //TODO: Rewrite this so that we add clients to indexes rather than searching through everyone for each change!
    getLock().readLock().lock();
    final java.util.Map<String, <%= repository.imit.qualified_session_name %>> sessions = getSessions();
    final org.realityforge.replicant.server.transport.EntityMessageAccumulator accumulator = new org.realityforge.replicant.server.transport.EntityMessageAccumulator();
    try
    {
      final java.util.Collection<<%= repository.imit.qualified_session_name %>> values = sessions.values();
      for ( final org.realityforge.replicant.server.EntityMessage message : messages )
      {
        final java.util.Map<String, java.io.Serializable> routingKeys = message.getRoutingKeys();
<%
  repository.imit.graphs.each do |graph|

  param = ''
  type = 'Boolean'
  check_method = "isInterestedIn#{graph.name}"
  if graph.instance_root?
    # Names are fully qualified so take any random data module
    entity = repository.entity_by_name(graph.instance_root)
    type = entity.primary_key.jpa.non_primitive_java_type
    param = " #{graph.name} "
    check_method = "is#{graph.name}Interesting"
  end
%>

        final <%= type %> <%= graph.name %> = (<%= type %>) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%=Domgen::Naming.uppercase_constantize(graph.name)%>_KEY );
<%
  extra_interest_filter = ''
  repository.data_modules.each do |data_module|
    data_module.entities.each do |entity|
      entity.attributes.select{|a| a.imit? && a.imit.filter_in_graphs.include?(graph.name) }.each do |attribute|
        var_name = "#{graph.name}#{attribute.qualified_name.gsub('.','_')}"
        extra_interest_filter << ", #{var_name}"
%>
        final <%= attribute.jpa.non_primitive_java_type %> <%= var_name %> = (<%= attribute.jpa.non_primitive_java_type %>) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %>_<%= Domgen::Naming.uppercase_constantize(attribute.qualified_name.gsub('.','_')) %>_KEY );
<%
      end
    end
  end

  if !extra_interest_filter.empty?
    extra_interest_filter = "&& is#{graph.name}Interesting( session#{graph.instance_root? ? ", #{graph.name}" : ''}, session.getInterestedIn#{graph.name}().get( #{graph.name} )#{extra_interest_filter} ) "
  end
%>

        if ( null != <%= graph.name %> )
        {
          for ( final <%= repository.imit.qualified_session_name %> session : values )
          {
            if ( session.<%= check_method %>(<%= param %> ) <%= extra_interest_filter %>)
            {
              accumulator.addEntityMessage( session, message );
            }
          }
        }
<% end %>
      }
      final <%= repository.imit.qualified_session_name %> session = getSession( sessionID );
      if( null != session )
      {
        accumulator.addEntityMessages( session, sessionMessages );
      }
    }
    finally
    {
      getLock().readLock().unlock();
    }

    return accumulator.complete( sessionID, requestID );
  }
<%
  repository.imit.graphs.each do |graph|
    extra_interest_filter = ''
    repository.data_modules.each do |data_module|
      data_module.entities.each do |entity|
        entity.attributes.select{|a| a.imit? && a.imit.filter_in_graphs.include?(graph.name) }.each do |attribute|
          var_name = Domgen::Naming.camelize("#{attribute.entity.name}#{attribute.name}")
          extra_interest_filter << ", #{nullability_annotation(attribute.nullable?)} #{attribute.jpa.non_primitive_java_type} #{var_name}"
        end
      end
    end
  initial_param = ''
  check_method = "is#{graph.name}Interesting"
  if graph.instance_root?
    # Names are fully qualified so take any random data module
    entity = repository.entity_by_name(graph.instance_root)
    type = entity.primary_key.jpa.non_primitive_java_type
    initial_param = ", #{type} #{Domgen::Naming.camelize("#{entity.name}#{entity.primary_key.name}")}"
    check_method = "is#{graph.name}Interesting"
  end
  if extra_interest_filter.size > 0
%>
  protected abstract boolean <%= check_method %>( <%= repository.imit.qualified_session_name %> session<%= initial_param %>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<%= extra_interest_filter %> );
<%
  end
end
%>

  @javax.annotation.Nonnull
  @Override
  protected <%= repository.imit.qualified_session_name %> newSessionInfo()
  {
    return new <%= repository.imit.qualified_session_name %>( java.util.UUID.randomUUID().toString() );
  }

<%
  repository.imit.graphs.each do |graph|

  param = ''
  param_value = ''
  register_method = "setInterestedIn#{graph.name}( true )"
  deregister_method = "setInterestedIn#{graph.name}( false )"
  check_method = "isInterestedIn#{graph.name}()"
  pk_accessor = ''
  if graph.instance_root?
    # Names are fully qualified so take any random data module
    entity = repository.entity_by_name(graph.instance_root)
    param = ", @javax.annotation.Nonnull final #{entity.jpa.qualified_name} entity"
    param_value = 'entity'
    pk_accessor = "entity.#{getter_for(entity.primary_key)}"
    register_method = "registerInterestIn#{graph.name}( #{pk_accessor}#{graph.filter_parameter.nil? ? '' : ", filter"} )"
    deregister_method = "deregisterInterestIn#{graph.name}( #{pk_accessor} )"
    check_method = "is#{graph.name}Interesting( #{pk_accessor} )"
  end
  filter_param = ''
  update_param = param.dup
  update_param_value = param_value.dup
  if graph.filter_parameter
    p = graph.filter_parameter
    update_param = "#{update_param}, " if update_param.size > 0
    update_param = "#{update_param}#{nullability_annotation(p.nullable?)} #{Domgen::Java.java_type(p, :ee, :default)} filter"
    update_param_value = "#{update_param_value}, " if update_param_value.size > 0
    update_param_value = "#{update_param_value}filter"
  end
  update_param_value = ", #{update_param_value}" if update_param_value.size > 0
%>
<% if graph.cacheable? -%>
  private org.realityforge.replicant.server.EntityMessageSet _cached<%= graph.name %>Messages;
  private final java.util.concurrent.locks.ReadWriteLock _lock<%= graph.name %>Cache = new java.util.concurrent.locks.ReentrantReadWriteLock();
  private String _cached<%= graph.name %>Key;
<% end -%>

  public <%= graph.cacheable? ? "boolean" : "void" %> subscribeTo<%= graph.name %>( @javax.annotation.Nonnull final String sessionID<%= update_param %><% if graph.cacheable? -%>, @javax.annotation.Nullable final String cacheKey<% end %> )
  {
    final <%= repository.imit.qualified_session_name %> session = ensureSession( sessionID );
    if ( !session.<%= check_method %> )
    {
      session.<%= register_method %>;
<% if graph.instance_root? -%>
      getEncoder().encode<%= graph.name %>( org.realityforge.replicant.server.ee.EntityMessageCacheUtil.getSessionEntityMessageSet(), entity );
<% else -%>
<% if graph.cacheable? -%>
    _lock<%= graph.name %>Cache.readLock().lock();
    final String cached<%= graph.name %>Key = get<%= graph.name %>CacheKey();
    if ( null == _cachedMetaDataMessages || ( null == cached<%= graph.name %>Key || !cached<%= graph.name %>Key.equals( _cached<%= graph.name %>Key ) ) )
    {
      _lock<%= graph.name %>Cache.readLock().unlock();
      _lock<%= graph.name %>Cache.writeLock().lock();
      try
      {
        _cached<%= graph.name %>Key = cached<%= graph.name %>Key;
        _cached<%= graph.name %>Messages = new org.realityforge.replicant.server.EntityMessageSet();
        collect<%= graph.name %>( _cached<%= graph.name %>Messages );
      }
      finally
      {
        _lock<%= graph.name %>Cache.writeLock().unlock();
      }
    }
    else
    {
      _lock<%= graph.name %>Cache.readLock().unlock();
    }
<% else -%>
      collect<%= graph.name %>( org.realityforge.replicant.server.ee.EntityMessageCacheUtil.getSessionEntityMessageSet() );
<% end -%>
<% end -%>
<% if graph.cacheable? -%>
      if( null == cacheKey || !cacheKey.equals( _cached<%= graph.name %>Key ) )
      {
        final java.util.LinkedList<org.realityforge.replicant.server.EntityMessage> messages = new java.util.LinkedList<org.realityforge.replicant.server.EntityMessage>();
        messages.addAll( _cached<%= graph.name %>Messages.getEntityMessages() );
        sendPacket( session, _cached<%= graph.name %>Key, messages );
        return true;
      }
<% end -%>
    }
<% if graph.filter_parameter -%>
    else
    {
      update<%= graph.name %>Subscription( sessionID<%= update_param_value %> );
    }
<% end -%>
<% if graph.cacheable? -%>
    return false;
<% end -%>
  }
<% if graph.filter_parameter -%>
  public void update<%= graph.name %>Subscription( @javax.annotation.Nonnull final String sessionID<%= update_param %> )
  {
    final <%= repository.imit.qualified_session_name %> session = ensureSession( sessionID );
    ensureSession( sessionID ).updateInterestIn<%= graph.name %>( <%= "#{pk_accessor}#{pk_accessor.nil? ? '' : ", "}" %>filter );
  }
<% end -%>

<% if !graph.instance_root? -%>
<% if graph.cacheable? -%>
  protected abstract String get<%= graph.name %>CacheKey();
<% end -%>
  protected abstract void collect<%= graph.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessageSet messages );
<% end -%>

  public void unsubscribeFrom<%= graph.name %>( @javax.annotation.Nonnull final String sessionID<%= param %> )
    throws org.realityforge.replicant.server.transport.BadSessionException
  {
    ensureSession( sessionID ).<%= deregister_method %>;
  }
<% end %>
}
