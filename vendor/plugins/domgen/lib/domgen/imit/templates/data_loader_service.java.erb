/* DO NOT EDIT: File is auto-generated */
package <%= repository.imit.client_entity_package %>;

public abstract class <%= repository.imit.data_loader_service_name %>
  extends org.realityforge.replicant.client.json.gwt.GwtDataLoaderService<<%= repository.imit.qualified_client_session_name %>, <%= repository.imit.qualified_graph_enum_name %>>
{
  protected <%= repository.imit.data_loader_service_name %>( @javax.annotation.Nonnull final org.realityforge.replicant.client.ChangeMapper changeMapper, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityChangeBroker changeBroker, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityRepository repository, @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.CacheService cacheService )
  {
    super( changeMapper, changeBroker, repository, cacheService );
  }

  @Override
  protected final void unloadGraph( @javax.annotation.Nonnull final <%= repository.imit.qualified_graph_enum_name %> graph, @javax.annotation.Nullable final Object id )
  {
    <% repository.imit.graphs.each do |graph| -%>if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %> == graph )
    {
<% if graph.instance_root? -%>
      final <%= repository.entity_by_name(graph.instance_root).imit.qualified_name %> root = getRepository().findByID( <%= repository.entity_by_name(graph.instance_root).imit.qualified_name %>.class, id );
      if ( null != root )
      {
        getSession().unload<%= graph.name %>( root );
      }
<% else -%>
      getSession().unload<%= graph.name %>();
<% end -%>
    }
    else <% end -%>
    {
      throw new IllegalStateException();
    }
  }
}
