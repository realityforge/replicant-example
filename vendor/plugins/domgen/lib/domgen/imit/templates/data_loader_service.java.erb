/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_data_loader_service_name) %>;

public abstract class <%= repository.imit.data_loader_service_name %>
  extends org.realityforge.replicant.client.json.gwt.GwtDataLoaderService<<%= repository.imit.qualified_client_session_name %>, <%= repository.imit.qualified_graph_enum_name %>>
{
  protected <%= repository.imit.data_loader_service_name %>( @javax.annotation.Nonnull final org.realityforge.replicant.client.ChangeMapper changeMapper, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityChangeBroker changeBroker, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityRepository repository, @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.CacheService cacheService, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntitySubscriptionManager subscriptionManager, @javax.annotation.Nonnull final org.realityforge.replicant.client.json.gwt.ReplicantConfig replicantConfig )
  {
    super( changeMapper, changeBroker, repository, cacheService, subscriptionManager, replicantConfig );
  }

  @javax.annotation.Nonnull
  @Override
  protected <%= repository.imit.qualified_graph_enum_name %> channelToGraph( final int channel )
    throws IllegalArgumentException
  {
    return <%= repository.imit.qualified_graph_enum_name %>.values()[ channel ];
  }

  protected int updateSubscriptionForFilteredEntities( final <%= repository.imit.qualified_graph_enum_name %> graph,
                                                       final Object subChannelID,
                                                       final Object filter,
                                                       final org.realityforge.replicant.client.ChannelSubscriptionEntry graphEntry )
  {
    <% repository.imit.graphs.select{|g| g.filtered? }.each do |graph|
-%>if( graph == <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %> )
    {
      int removedEntities = 0;
<% graph.reachable_entities.reverse.each do |entity| -%>
      {
        final java.util.Map<Object, org.realityforge.replicant.client.EntitySubscriptionEntry> map = graphEntry.getEntities().get( <%= repository.entity_by_name(entity).imit.qualified_name %>.class );
        if( null != map )
        {
          removedEntities += updateSubscriptionForFilteredEntities( graph, subChannelID, filter, map.values() );
        }
      }
<% end -%>
      return removedEntities;
    }
    else <% end
-%>

    {
      throw new IllegalStateException();
    }
  }

  @Override
  protected <%= repository.imit.qualified_repository_debugger_name %> getEntityRepositoryDebugger()
  {
    return new <%= repository.imit.qualified_repository_debugger_name %>();
  }
}
