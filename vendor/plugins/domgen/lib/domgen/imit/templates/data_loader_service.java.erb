/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_data_loader_service_name) %>;

public abstract class <%= repository.imit.data_loader_service_name %>
  extends org.realityforge.replicant.client.json.gwt.<%= repository.imit.poll_replicate_mode? ? 'WebPoller' : 'Gwt' %>DataLoaderService<<%= repository.imit.qualified_client_session_name %>, <%= repository.imit.qualified_graph_enum_name %>>
  implements <%= repository.imit.qualified_data_loader_service_interface_name %>
{
  private final <%= repository.service_by_name(repository.imit.subscription_manager).gwt_rpc.qualified_facade_service_name %> _remoteSubscriptionService;

  protected <%= repository.imit.data_loader_service_name %>( @javax.annotation.Nonnull final <%= repository.imit.qualified_change_mapper_name %> changeMapper, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityChangeBroker changeBroker, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityRepository repository, @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.CacheService cacheService, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntitySubscriptionManager subscriptionService, @javax.annotation.Nonnull final com.google.web.bindery.event.shared.EventBus eventBus, @javax.annotation.Nonnull final org.realityforge.replicant.client.json.gwt.ReplicantConfig replicantConfig, @javax.annotation.Nonnull <%= repository.service_by_name(repository.imit.subscription_manager).gwt_rpc.qualified_facade_service_name %> remoteSubscriptionService )
  {
    super( <%= repository.gwt_rpc.qualified_rpc_services_module_name %>.getSessionContext(), changeMapper, changeBroker, repository, cacheService, subscriptionService, eventBus, replicantConfig );
    _remoteSubscriptionService = remoteSubscriptionService;
    setBaseURL( <%= repository.gwt_rpc.qualified_rpc_services_module_name %>.getSessionContext().getBaseURL() + getEndpointOffset() );
  }

  @javax.annotation.Nonnull
  protected <%= repository.imit.qualified_client_session_name %> createSession( @javax.annotation.Nonnull final String sessionID )
  {
    return new <%= repository.imit.qualified_client_session_name %>( this, sessionID );
  }

  protected final <%= repository.service_by_name(repository.imit.subscription_manager).gwt_rpc.qualified_facade_service_name %> getRemoteSubscriptionService()
  {
    return _remoteSubscriptionService;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected <%= repository.imit.qualified_graph_enum_name %> channelToGraph( final int channel )
    throws IllegalArgumentException
  {
    return <%= repository.imit.qualified_graph_enum_name %>.values()[ channel ];
  }

  @java.lang.Override
  protected int updateSubscriptionForFilteredEntities( @javax.annotation.Nonnull final org.realityforge.replicant.client.ChannelSubscriptionEntry entry, @javax.annotation.Nullable final Object filter )
  {
    <% repository.imit.graphs.select{|g| g.filtered? }.each do |graph|
-%>if( entry.getDescriptor().getGraph() == <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %> )
    {
      int removedEntities = 0;
<% graph.included_entities.reverse.each do |entity| -%>
      {
        final java.util.Map<Object, org.realityforge.replicant.client.EntitySubscriptionEntry> map = entry.getEntities().get( <%= repository.entity_by_name(entity).imit.qualified_name %>.class );
        if( null != map )
        {
          removedEntities += updateSubscriptionForFilteredEntities( entry, filter, map.values() );
        }
      }
<% end -%>
      return removedEntities;
    }
    else <% end
-%>

    {
      throw new IllegalStateException();
    }
  }

  @java.lang.Override
  protected <%= repository.imit.qualified_repository_debugger_name %> getEntityRepositoryDebugger()
  {
    return new <%= repository.imit.qualified_repository_debugger_name %>();
  }

  @java.lang.Override
  protected final void requestSubscribeToGraph( @javax.annotation.Nonnull final <%= repository.imit.qualified_graph_enum_name %> graph,
                                                @javax.annotation.Nullable final Object id,
                                                @javax.annotation.Nullable final Object filterParameter,
                                                @javax.annotation.Nullable final String eTag,
                                                @javax.annotation.Nullable final java.lang.Runnable cacheAction,
                                                @javax.annotation.Nonnull final java.lang.Runnable completionAction )
  {
    <% repository.imit.graphs.each do |graph|
-%>if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %> == graph )
    {
<% if graph.instance_root? -%>
      assert null != id;
<% end -%>
<% if graph.filtered? -%>
      assert null != filterParameter;
<% end -%>
<% if graph.cacheable? -%>
      final <%= repository.gwt.qualified_async_callback_name %><java.lang.Boolean> callback = new <%= repository.gwt.qualified_async_callback_name %><java.lang.Boolean>()
      {
        @java.lang.Override
        public void onSuccess( final java.lang.Boolean result )
        {
          if ( result )
          {
            completionAction.run();
          }
          else
          {
            if ( null != cacheAction )
            {
              cacheAction.run();
            }
          }
        }
      };
<% else -%>
      final <%= repository.gwt.qualified_async_callback_name %><Void> callback = new <%= repository.gwt.qualified_async_callback_name %><Void>()
      {
        @java.lang.Override
        public void onSuccess( final java.lang.Void result )
        {
          completionAction.run();
        }
      };
<% end -%>
      _remoteSubscriptionService.subscribeTo<%= graph.name %>( getSessionID()<% if graph.cacheable? -%>, eTag<% end -%><% if graph.instance_root? -%>, (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>) id<% end -%><% if graph.filtered? %>, (<%= Domgen::Java.java_type(graph.filter_parameter, :imit, :default) %>) filterParameter<% end -%>, callback );
    }
    else <% end %>
    {
      throw new IllegalStateException();
    }
  }

  @java.lang.Override
  protected final void requestUpdateSubscription( @javax.annotation.Nonnull final <%= repository.imit.qualified_graph_enum_name %> graph,
                                                  @javax.annotation.Nullable final Object id,
                                                  @javax.annotation.Nonnull final Object filterParameter,
                                                  @javax.annotation.Nonnull final java.lang.Runnable completionAction )
  {
    final <%= repository.gwt.qualified_async_callback_name %><Void> callback = new <%= repository.gwt.qualified_async_callback_name %><Void>()
    {
      @java.lang.Override
      public void onSuccess( final Void result )
      {
        completionAction.run();
      }
    };
    <% repository.imit.graphs.select{|g|!g.filter_parameter.nil?}.each do |graph|
-%>if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %> == graph )
    {
<% if graph.instance_root? -%>
      assert null != id;
<% end -%>
      _remoteSubscriptionService.update<%= graph.name %>Subscription( getSessionID()<% if graph.instance_root? -%>, (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>) id<% end -%>, (<%= Domgen::Java.java_type(graph.filter_parameter, :imit, :default) %>) filterParameter, callback );
    }
    else <% end %>
    {
      throw new IllegalStateException();
    }
  }

  @java.lang.Override
  protected final void requestUnsubscribeFromGraph( @javax.annotation.Nonnull final <%= repository.imit.qualified_graph_enum_name %> graph,
                                                    @javax.annotation.Nullable final Object id,
                                                    @javax.annotation.Nonnull final java.lang.Runnable completionAction )
  {
    final <%= repository.gwt.qualified_async_callback_name %><Void> callback = new <%= repository.gwt.qualified_async_callback_name %><Void>()
    {
      @java.lang.Override
      public void onSuccess( final Void result )
      {
        completionAction.run();
      }
    };
    <% repository.imit.graphs.each do |graph|
-%>if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(graph.name) %> == graph )
    {
<% if graph.instance_root? -%>
      assert null != id;
<% end -%>
      _remoteSubscriptionService.unsubscribeFrom<%= graph.name %>( getSessionID()<% if graph.instance_root? -%>, (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>) id<% end -%>, callback );
    }
    else <% end %>
    {
      throw new IllegalStateException();
    }
  }
}
