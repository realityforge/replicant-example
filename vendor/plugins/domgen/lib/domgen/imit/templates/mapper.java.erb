/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.imit.qualified_mapper_name) %>;

/**
 * Utility class to map a change to an entity ensuring that the repository is updated as required.
 *
 * NOTE: This must be in the same package as the entities otherwise you will not be able to access the setters.
 */
@javax.annotation.Generated( "Domgen" )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"})
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public class <%= data_module.imit.mapper_name %>
{
  private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= data_module.imit.mapper_name %>.class.getName() );

  private final org.realityforge.replicant.client.EntityRepository _repository;
  private final org.realityforge.replicant.client.EntityChangeBroker _broker;
  private final org.realityforge.replicant.client.EntitySubscriptionManager _subscriptionManager;

  @javax.inject.Inject
  public <%= data_module.imit.mapper_name %>( @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityRepository repository, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityChangeBroker broker, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntitySubscriptionManager subscriptionManager )
  {
    _repository = repository;
    _broker = broker;
    _subscriptionManager =subscriptionManager;
  }

<% data_module.entities.select { |entity| entity.imit? }.each do |entity| %>
<% if !entity.abstract? %>
  public Object applyChangeTo<%= entity.name %>( final org.realityforge.replicant.client.Change change )
  {
<%
   designator_value =
        if entity.primary_key.imit.transport_characteristic_type_key == :integer
          "change.getDesignatorAsInt()"
        elsif entity.primary_key.imit.transport_characteristic_type_key == :text
          "change.getDesignatorAsString()"
        else
          raise "Unable to convert data type #{entity.primary_key.imit.transport_characteristic_type_key} on #{entity.primary_key.qualified_name}"
        end
%>
    final Object designator = <%= designator_value %>;
    <%= entity.imit.name %> entity = _repository.findByID( <%= entity.imit.name %>.class, designator, false );
    // If change is a delete...
    if( !change.isUpdate() )
    {
      if( null != entity )
      {
        if( _broker.isEnabled() && LOG.isLoggable( java.util.logging.Level.FINE ) )
        {
          LOG.log( java.util.logging.Level.FINE, "applyChangeTo<%= entity.name %>('" + designator + "') is deleting local entity" );
        }
        // It is in the local repository so we need to delete it
        _repository.deregisterEntity( <%= entity.imit.name %>.class, designator );
        _subscriptionManager.removeEntity( <%= entity.imit.name %>.class, designator );
      }
    }
    else
    {
      boolean fullUpdate = false;
      if( null == entity )
      {
        entity = new <%= entity.imit.name %>( _repository, _broker );
        _repository.registerEntity( <%= entity.imit.name %>.class, designator, entity );
        fullUpdate = true;
        if( _broker.isEnabled() && LOG.isLoggable( java.util.logging.Level.FINE ) )
        {
          LOG.log( java.util.logging.Level.FINE, "applyChangeTo<%= entity.name %>('" + designator + "') is creating local entity" );
        }
      }
      else
      {
        if( _broker.isEnabled() && LOG.isLoggable( java.util.logging.Level.FINE ) )
        {
          LOG.log( java.util.logging.Level.FINE, "applyChangeTo<%= entity.name %>('" + designator + "') is updating local entity" );
        }
      }
      updateAttributes<%= entity.name %>( entity, change, fullUpdate );
      final org.realityforge.replicant.client.ChannelDescriptor[] descriptors = new org.realityforge.replicant.client.ChannelDescriptor[ change.getChannelCount() ];
      for ( int i = 0; i < descriptors.length; i++ )
      {
        descriptors[i] = new org.realityforge.replicant.client.ChannelDescriptor( <%= data_module.repository.imit.qualified_graph_enum_name %>.values()[change.getChannelID( i )], change.getSubChannelID( i ) );
      }
      _subscriptionManager.updateEntity( <%= entity.imit.name %>.class, designator, descriptors );

    }
    return entity;
  }

<% end %>
  private void updateAttributes<%= entity.name %>( final <%= entity.imit.name %> entity, final org.realityforge.replicant.client.Change change, final boolean fullUpdate )
  {
<% if entity.extends
   other = entity.data_module.entity_by_name(entity.extends)
%>    updateAttributes<%= other.name %>( entity, change, fullUpdate );
<% end %>
<% entity.declared_attributes.select{|attribute| attribute.imit? && attribute.imit.client_side?}.each do |attribute|
    key = "#{entity.name}.#{Domgen::Naming.uppercase_constantize(attribute.name)}"
    value_converter =
        if attribute.imit.transport_characteristic_type_key == :date
          "org.realityforge.gwt.datatypes.client.date.RDate.parse( change.getStringValue( #{key} ) )"
        elsif attribute.imit.transport_characteristic_type_key == :datetime
          "new java.util.Date( new java.math.BigDecimal( change.getStringValue( #{key} ) ).longValueExact() )"
        elsif attribute.imit.transport_characteristic_type_key == :integer
          "change.getIntegerValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :real
          "change.getIntegerValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :boolean
          "change.getBooleanValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :text
          "change.getStringValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :enumeration && attribute.enumeration.textual_values?
          "change.getStringValue( #{key} )"
        elsif attribute.imit.transport_characteristic_type_key == :enumeration && attribute.enumeration.numeric_values?
          "change.getIntegerValue( #{key} )"
        else
          raise "Unable to convert data type #{attribute.imit.transport_characteristic_type_key} on #{attribute.qualified_name}"
        end
%>    if( change.containsKey( <%= entity.name %>.<%= Domgen::Naming.uppercase_constantize( attribute.name ) %> ) )
    {
      <% if attribute.primary_key? %>if( fullUpdate )
      {<% end %>
      entity.set<%= attribute.imit.name(:transport) %>( <%= attribute.nullable? ? "( change.isNull( #{key} ) ? null : #{value_converter} )" : value_converter %> );
      <% if attribute.primary_key? %>
      }<% end %>
    }
<% end %>
  }
<% end %>
}
