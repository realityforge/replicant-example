/* DO NOT EDIT: File is auto-generated */
package <%= repository.imit.entity_package %>;

@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public interface <%= repository.imit.subscription_manager_name %>
{<%
  repository.imit.graphs.each do |graph|
  param = ''
  if graph.instance_root?
    # Names are fully qualified so take any random data module
    entity = repository.entity_by_name(graph.instance_root)
    type = entity.primary_key.imit.primitive_java_type
    param = "#{type} #{Domgen::Naming.camelize(entity.name)}#{entity.primary_key.name}"
  end
  update_param = param.dup
  if graph.filter_parameter
    p = graph.filter_parameter
    java_type = "#{nullability_annotation(p.nullable?)}  #{Domgen::Java.java_type(p, :imit, :default)}"
    update_param = "#{update_param}, " if update_param.size > 0
    filter_param = "#{java_type} filter"
    update_param = "#{update_param}#{filter_param}"
  end
  suffix = "@javax.annotation.Nullable Runnable runnable"
%>
  boolean isSubscribedTo<%= graph.name %>(<%= param %>);

  void subscribeTo<%= graph.name %>(<%= update_param %><%= update_param.size > 0 ? ", #{suffix}" : suffix %>);

  void unsubscribeFrom<%= graph.name %>(<%= param %><%= param.size > 0 ? ", #{suffix}" : suffix %>);

<% if graph.instance_root? -%>
  void unload<%= graph.name %>( @javax.annotation.Nonnull <%= repository.entity_by_name(graph.instance_root).imit.qualified_name %> object );

  java.util.Map<Object, org.realityforge.replicant.client.transport.SubscriptionEntry<<%= repository.imit.qualified_graph_enum_name %>>> get<%= graph.name %>Subscriptions();
<% else -%>
  void unload<%= graph.name %>();
<% end -%>
<% if graph.filter_parameter %>
  void update<%= graph.name %>Subscription(<%= update_param %><%= update_param.size > 0 ? ", #{suffix}" : suffix %>);
<% end %>
<% end %>}
