/* DO NOT EDIT: File is auto-generated */
package <%= repository.imit.encoder_package %>;

/**
 * Utility class that encodes a graph of entities as a set of messages for "<%= repository.name %>" repository.
 */
@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@javax.enterprise.context.ApplicationScoped
public class <%= repository.imit.graph_encoder_impl_name %>
  implements <%= repository.imit.graph_encoder_name %>
{
  @javax.inject.Inject
  private org.realityforge.replicant.server.EntityMessageGenerator _messageGenerator;

<%
  repository.imit.graphs.select{|graph| graph.instance_root? }.each do |graph|
    entity = repository.data_modules[0].entity_by_name(graph.instance_root)
%>
  @Override
  public void encode<%= graph.key %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessageSet messages, @javax.annotation.Nonnull final <%= entity.jpa.qualified_name %> object )
  {
    _encode<%= graph.key %>_<%= entity.name %>( messages, object );
  }

<%
  graph.reachable_entities.collect{|n|repository.data_modules[0].entity_by_name(n)}.select { |entity| entity.imit? && !entity.abstract? }.each do |entity|
    outgoing_links = entity.referencing_attributes.select{|a| a.imit? && a.imit.client_side? && a.inverse.imit.traversable? && a.inverse.imit.replication_edges.include?(graph.key)}
-%>
  private void _encode<%= graph.key %>_<%= entity.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessageSet messages, @javax.annotation.Nonnull final <%= entity.jpa.qualified_name %> object )
  {
    encodeObject( messages, object );
<%
    outgoing_links.each do |a|
      if a.inverse.multiplicity == :many
-%>
    for ( final <%= a.entity.jpa.qualified_name %> o : object.get<%= Domgen::Naming.pluralize(a.inverse.name) %>() )
    {
      _encode<%= graph.key %>_<%= a.entity.name %>( messages, o );
    }
<%
      elsif a.inverse.multiplicity == :one || a.inverse.multiplicity == :zero_or_one
-%>
      {
        final <%= a.entity.jpa.qualified_name %> o = object.get<%= a.inverse.name %>();
        <% if a.inverse.multiplicity == :zero_or_one %>if( null != o )<% end %>
        {
          _encode<%= graph.key %>_<%= a.entity.name %>( messages, o );
        }
      }
<%
      end
    end
%>
  }
<% end -%>
<% end %>

  public void encodeObjects( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessageSet messages, @javax.annotation.Nonnull final java.util.List<Object> objects )
  {
    for ( final Object object : objects )
    {
      encodeObject( messages, object );
    }
  }

  private void encodeObject( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessageSet messages, @javax.annotation.Nullable final Object object )
  {
    if ( null != object )
    {
      final org.realityforge.replicant.server.EntityMessage message = _messageGenerator.convertToEntityMessage( object, true );
      if ( null != message )
      {
        messages.merge( message, true );
      }
    }
  }
}
