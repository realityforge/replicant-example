/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_message_generator_name) %>;

import org.realityforge.replicant.server.EntityMessage;

/**
 * * Utility class that encodes RPC payloads from JPA entities for the repository "<%= repository.name %>".
 */
@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"UCF_USELESS_CONTROL_FLOW","NP_LOAD_OF_KNOWN_NULL_VALUE"})
@javax.enterprise.context.ApplicationScoped
public class <%= repository.imit.message_generator_name %>
  implements org.realityforge.replicant.server.EntityMessageGenerator
{
  private final <%= repository.imit.qualified_router_interface_name %> _router;

  @javax.inject.Inject
  public <%= repository.imit.message_generator_name %>( final <%= repository.imit.qualified_router_interface_name %> router )
  {
    _router = router;
  }

  public EntityMessage convertToEntityMessage( final Object object, final boolean isUpdate )
  {
    <%
repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module|
  data_module.entities.each do |entity|
    if entity.imit? && !entity.abstract?

      links = entity.attributes.collect{|a| a.imit? && a.imit.graph_links.size > 0 ? a : nil }.compact

%>if( <%= entity.jpa.qualified_name %>.class.isInstance( object ) )
    {
      final <%= entity.jpa.qualified_name %> entity = <%= entity.jpa.qualified_name %>.class.cast( object );
      final @javax.annotation.Nonnull java.io.Serializable id = entity.<%= getter_for(entity.primary_key) %>;
      final @javax.annotation.Nonnull java.util.Map<String, java.io.Serializable> attributes = isUpdate ? <%= entity.data_module.repository.imit.qualified_jpa_encoder_name %>.encode<%= entity.name %>( entity ) : null;
      final int transportID = <%= repository.imit.message_constants_name %>.<%= Domgen::Naming.uppercase_constantize(entity.data_module.name.to_s) %>_<%= Domgen::Naming.uppercase_constantize(entity.name.to_s) %>;
      final @javax.annotation.Nonnull java.util.Map<String, java.io.Serializable> routingKeys = _router.route<%= entity.name %>( entity );
      final @javax.annotation.Nullable java.util.Set<org.realityforge.replicant.server.ChannelLink> links = <%= links.size == 0 ? "null" : "new java.util.HashSet<org.realityforge.replicant.server.ChannelLink>()" %>;
      if( isUpdate )
      {
<%
entity.attributes.each do |a|
  if a.imit? && a.imit.graph_links.size > 0
    a.imit.graph_links.each_pair do |source_graph_key, config|
      target_graph_key = config[:target_graph]
      path = config[:path]
      target_graph = repository.imit.graph_by_name(target_graph_key)

      entity = a.referenced_entity
      getter_path = [getter_for(a)]
      if path
        path.to_s.split.each_with_index do |attribute_name_path_element, i|
          other = entity.attribute_by_name(attribute_name_path_element)
          getter_path << getter_for(other)
          entity = other.referenced_entity
        end
      end

    -%>
        links.add( new org.realityforge.replicant.server.ChannelLink( new org.realityforge.replicant.server.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Domgen::Naming.uppercase_constantize(target_graph.name) %>.ordinal(), entity.<%= getter_path.join('.') %>.<%= getter_for(entity.primary_key) %> ) ) );
<%
    end
  end
end
%>
      }
      return new EntityMessage( id, transportID, System.currentTimeMillis(), routingKeys, attributes, links );
    }
    else <%
    end
  end
end
%>
    {
      return null;
    }
  }
}
