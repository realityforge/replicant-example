/* DO NOT EDIT: File is auto-generated */
package <%= repository.imit.encoder_package %>;

public class <%= repository.imit.change_recorder_name %>
  extends org.realityforge.replicant.server.ee.ChangeRecorder
{
  @javax.inject.Inject
  private org.realityforge.replicant.server.EntityMessageGenerator _messageGenerator;

  @Override
  protected org.realityforge.replicant.server.EntityMessageGenerator getEntityMessageGenerator()
  {
    return _messageGenerator;
  }

  @Override
  protected void recordEntityMessagesForEntity( @javax.annotation.Nonnull final Object entity, final boolean isUpdate )
  {
<%
  links = {}

  repository.imit.graphs.select{|graph| graph.instance_root? }.each do |graph|
    graph.reachable_entities.collect{|n|repository.entity_by_name(n)}.select { |entity| entity.imit? && !entity.abstract? }.each do |entity|
      entity.attributes.each do |a|
        if a.reference? && a.imit? && a.imit.client_side? && a.referenced_entity.imit? && a.imit.include_edges.include?(graph.name)
          links[entity] ||= []
          links[entity] << a
        end
      end
    end
  end


  links.each do |entity, attributes|
%>
    if ( isUpdate && entity instanceof <%= entity.jpa.qualified_name %> )
    {
      final <%= entity.jpa.qualified_name %> object = (<%= entity.jpa.qualified_name %>) entity;
<% attributes.uniq.each do |link| -%>
      {
        final <%= link.referenced_entity.jpa.qualified_name %> o = object.get<%= link.name %>();
        <% if link.nullable? %>if( null != o )<% end %>
        {
          final org.realityforge.replicant.server.EntityMessageSet messages = getEntityMessageSet();
          if ( !messages.containsEntityMessage( <%= repository.imit.message_constants_name %>.<%= Domgen::Naming.uppercase_constantize(link.referenced_entity.data_module.name.to_s) %>_<%= Domgen::Naming.uppercase_constantize(link.referenced_entity.name.to_s) %>, o.get<%= link.referenced_entity.primary_key.name %>() ) )
          {
            recordEntityMessagesForEntity( o, true );
          }
        }
      }
<% end -%>
      super.recordEntityMessagesForEntity( entity, true );
    }
    else
<% end %>
    {
      super.recordEntityMessagesForEntity( entity, isUpdate );
    }
  }
}
