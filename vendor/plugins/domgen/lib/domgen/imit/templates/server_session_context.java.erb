/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_server_session_context_name) %>;

@javax.annotation.Generated( "Domgen" )
<% unless repository.ee.use_cdi? -%>
@javax.ejb.Local
<% end -%>
public interface <%= repository.imit.server_session_context_name %>
{
<% unless repository.ee.use_cdi? -%>
  String NAME = "<%= repository.imit.server_session_context_name %>";

<% end -%>
<%
  repository.imit.graphs.each do |graph|
    extra_interest_filter = ''
    repository.data_modules.each do |data_module|
      data_module.entities.each do |entity|
        entity.attributes.select{|a| a.imit? && a.imit.filter_in_graphs.include?(graph.name) }.each do |attribute|
          var_name = Domgen::Naming.camelize("#{attribute.entity.name}#{attribute.name}")
          nullable = !graph.instance_root? || !(attribute.entity.qualified_name == graph.instance_root)
          param_type = attribute.reference? ? attribute.referenced_entity.primary_key.jpa.non_primitive_java_type : attribute.jpa.non_primitive_java_type
          extra_interest_filter << ", #{nullability_annotation(nullable)} #{param_type} #{var_name}"
        end
      end
    end
  initial_param = ''
  check_method = "is#{graph.name}Interesting"
  if graph.instance_root?
    # Names are fully qualified so take any random data module
    entity = repository.entity_by_name(graph.instance_root)
    type = entity.primary_key.jpa.non_primitive_java_type
    initial_param = ", @javax.annotation.Nonnull #{type} #{Domgen::Naming.camelize("#{entity.name}#{entity.primary_key.name}")}"
  end
  if extra_interest_filter.size > 0
-%>
  boolean <%= check_method %>( @javax.annotation.Nonnull <%= repository.imit.qualified_session_name %> session<%= initial_param %>, <%= Domgen::Java.primitive?(graph.filter_parameter, :ee, :default) ? '' : nullability_annotation(graph.filter_parameter.nullable?) %> <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<%= extra_interest_filter %> );

<%
  end
end
-%>
<%
  repository.imit.graphs.each do |graph|
    filter_java_type = nil
    if graph.filter_parameter
      filter_java_type = "#{Domgen::Java.primitive?(graph.filter_parameter, :ee, :default) ? '' : nullability_annotation(graph.filter_parameter.nullable?)} #{Domgen::Java.java_type(graph.filter_parameter, :ee, :default)}"
    end
if !graph.instance_root?
 if graph.cacheable? && graph.external_cache_management? -%>
  @javax.annotation.Nullable
  String get<%= graph.name %>CacheKey();

<%
  end
  if filter_java_type
-%>
  void collectForFilterChange<%= graph.name %>( @javax.annotation.Nonnull org.realityforge.replicant.server.EntityMessageSet messages, <%= filter_java_type %> original, <%= filter_java_type %> filter );

<%
  end
  if graph.external_data_load? || filter_java_type -%>
  void collect<%= graph.name %>( @javax.annotation.Nonnull org.realityforge.replicant.server.EntityMessageSet messages<%= filter_java_type.nil? ? '' : ", #{filter_java_type} filter" %> );

<% end -%>
<%
else
  if filter_java_type
-%>
  void collectForFilterChange<%= graph.name %>( @javax.annotation.Nonnull org.realityforge.replicant.server.EntityMessageSet messages, @javax.annotation.Nonnull final <%= repository.entity_by_name(graph.instance_root).jpa.qualified_name %> entity, <%= filter_java_type %> original, <%= filter_java_type %> filter );

<%
    graph.reachable_entities.collect{|n|repository.entity_by_name(n)}.select { |entity| entity.imit? && !entity.abstract? }.each do |entity|
      outgoing_links = entity.referencing_attributes.select{|a| a.imit? && a.imit.client_side? && a.inverse.imit.traversable? && a.inverse.imit.replication_edges.include?(graph.name)}
      outgoing_links.each do |a|
        if a.inverse.multiplicity == :many
-%>
  @javax.annotation.Nonnull
  java.util.List<<%= a.entity.jpa.qualified_name %>> get<%= Domgen::Naming.pluralize(a.inverse.name) %>In<%= graph.name %>Graph( @javax.annotation.Nonnull <%= a.referenced_entity.jpa.qualified_name %> object, <%= filter_java_type %> filter );

<%
      elsif a.inverse.multiplicity == :one || a.inverse.multiplicity == :zero_or_one
-%>
  <%= nullability_annotation(a.inverse.multiplicity == :zero_or_one) %>
  <%= a.entity.jpa.qualified_name %> get<%= a.inverse.name %>In<%= graph.name %>Graph( @javax.annotation.Nonnull <%= a.referenced_entity.jpa.qualified_name %> object, <%= filter_java_type %> filter );
<%
        end
      end
    end
  end
end
 -%>
<% end -%>
<%
  processed = []
  repository.imit.graphs.select{|g| g.instance_root? }.collect{|g| g.inward_graph_links }.flatten.each do |graph_link|
     source_graph = repository.imit.graph_by_name(graph_link.source_graph)
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filtered?
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
      next if processed.include?(key)
      processed << key
      instance_root = repository.entity_by_name(target_graph.instance_root)
-%>
  boolean shouldFollowLinkFrom<%= graph_link.source_graph %>To<%= target_graph.name %>( @javax.annotation.Nonnull <%= instance_root.jpa.qualified_name %> entity, @javax.annotation.Nonnull <%= Domgen::Java.java_type(target_graph.filter_parameter, :ee, :default) %> filter );

  java.util.List<<%= instance_root.jpa.qualified_name %>> getLinksToUpdateFor<%= graph_link.source_graph %>To<%= target_graph.name %>( @javax.annotation.Nonnull <%= repository.entity_by_name(source_graph.instance_root).jpa.qualified_name %> entity, @javax.annotation.Nonnull <%= Domgen::Java.java_type(target_graph.filter_parameter, :ee, :default) %> filter );

<% end -%>
}
