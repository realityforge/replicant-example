/* DO NOT EDIT: File is auto-generated */
package <%= repository.imit.encoder_package %>;

@javax.annotation.Generated( "Domgen" )
@javax.enterprise.context.Dependent
public class <%= repository.imit.router_impl_name %>
  implements <%= repository.imit.qualified_router_interface_name %>
{
<%
  repository.imit.graphs.each do |graph|
    key = "#{Domgen::Naming.uppercase_constantize(graph.key)}_KEY"
%>
  public static final String <%= key %> = "<%= repository.name %>.<%= graph.key %>";
<% end %>
<%
repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module|
  data_module.entities.select { |entity| entity.imit? && !entity.abstract? }.each do |entity|
    instance_graphs = entity.imit.associated_instance_root_graphs
    type_graphs = entity.imit.associated_type_graphs
    outgoing_links = entity.attributes.select {|a| a.reference? && a.imit? && a.inverse.imit.traversable? }
    replication_edges = outgoing_links.collect{|a|a.inverse.imit.replication_edges}.flatten.sort.uniq
 -%>
  @javax.annotation.Nonnull
  public java.util.Map<String, java.io.Serializable> route<%= entity.name %>( @javax.annotation.Nonnull <%= entity.jpa.qualified_name %> entity )
  {
<% if replication_edges.size == 1 && instance_graphs.size == 0 && type_graphs.size == 0 %>
    return route<%= outgoing_links[0].referenced_entity.name %>( entity.<%= getter_for(outgoing_links[0]) %> );
<% else %>
    final java.util.HashMap<String, java.io.Serializable> map = new java.util.HashMap<>();
<% instance_graphs.each do |graph| %>
    map.put( <%= Domgen::Naming.uppercase_constantize(graph.key) %>_KEY, entity.<%= getter_for(entity.primary_key) %> );
<% end %>
<% type_graphs.each do |graph| %>
    map.put( <%= Domgen::Naming.uppercase_constantize(graph.key) %>_KEY, Boolean.TRUE );
<% end %>
<% outgoing_links.each do |outgoing_link| %>
    map.putAll( route<%= outgoing_link.referenced_entity.name %>( entity.<%= getter_for(outgoing_link) %> ) );
<% end %>
    return map;
<% end %>
  }
<% end -%>
<% end -%>
}
