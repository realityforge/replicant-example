/* DO NOT EDIT: File is auto-generated */
package <%= to_package(struct.ee.qualified_name) %>;

<%= description_javadoc_for(struct, "") %>@javax.annotation.Generated( "Domgen" )
@SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
<%= jackson_class_annotations(struct) if struct.jackson? -%>
<%= jaxb_class_annotations(struct) if struct.jaxb? -%>
public class <%= struct.ee.name %>
  implements java.io.Serializable
{
<% struct.fields.each do |field| -%>
<%= "  " + jackson_field_annotation(field) if field.jackson? -%>
<%= "  " + jaxb_field_annotation(field) if field.jaxb? -%>
  <%= annotated_type(field, :ee, :boundary, :private => true) %> <%= field.name %>;
<% end -%>

<% if struct.fields.size != 0 %>
  /**
   * This constructor is present for deserialization mechanisms and should not be called directly.
   *
   * @deprecated
   */
  @Deprecated
  public <%= struct.name %>()
  {
  }
<% end %>

<% if struct.data_module.jmx? -%>  @java.beans.ConstructorProperties({<%= struct.fields.collect {|field| "\"#{javabean_property_name(field.name)}\""}.join(", ") %>})<% end -%>
  public <%= struct.name %>( <%= struct.fields.collect {|field| "#{annotated_type(field, :ee, :boundary, :final => true)} #{field.name}" }.join(", ") %> )
  {
<% struct.fields.each do |field|
     null_protection = field.nullable? ? "#{field.name} == null ? null : " : ""
     if :sequence == field.collection_type
%>    this.<%= field.name %> = <%= null_protection %>java.util.Collections.unmodifiableList( new java.util.ArrayList<<%= field.ee.java_component_type %>>( <%= field.name %> ) );
<%     elsif :set == field.collection_type
%>    this.<%= field.name %> = <%= null_protection %>java.util.Collections.unmodifiableSet( new java.util.HashSet<<%= field.ee.java_component_type %>>( <%= field.name %> ) );
  <%     else
%>    this.<%= field.name %> = <%= field.name %>;
<%   end
   end
%>  }
<% struct.fields.each do |field|
%>
  <%= annotated_type(field, :ee, :boundary, :public => true, :final => true) %> <%= getter_prefix(field) %><%= field.name %>()
  {
    return <%= field.name %>;
  }
<% end
%>

  @Override
  public boolean equals( final Object o )
  {
    if ( this == o )
    {
      return true;
    }
    if ( o == null || getClass() != o.getClass() )
    {
      return false;
    }

    final <%= struct.ee.name %> that = (<%= struct.ee.name %>) o;
<% struct.fields.select{|f|!f.collection?}.each do |field| -%>
    if ( <%= field.ee.primitive?(:boundary) ? "#{field.name} != that.#{field.name}" : "#{field.nullable? ? "null == #{field.name} ? null != that.#{field.name} : " : ''}!#{field.name}.equals( that.#{field.name} )" %> )
    {
      return false;
    }
<% end -%>
<% struct.fields.select{|f|f.collection?}.each do |field| -%>
<% if field.nullable? -%>
    if ( (null ==  <%= field.name %> && null !=  that.<%= field.name %>) || (null !=  <%= field.name %> && null ==  that.<%= field.name %>) )
    {
      return false;
    }
    else if ( null != <%= field.name %> )
<% end -%>
    {
      if ( <%= field.name %>.size() != that.<%= field.name %>.size() )
      {
        return false;
      }
      for ( final <%= field.ee.java_component_type %> v : <%= field.name %> )
      {
        if ( !that.<%= field.name %>.contains( v ) )
        {
          return false;
        }
      }
    }
<% end -%>
    return true;
  }

  @Override
  public int hashCode()
  {
    int result = 0;
<% struct.fields.each do |field| -%>
    result = 31 * result + (<%= field.ee.primitive?(:boundary) ? (field.boolean? ? "#{field.name} ? 1 : 0": field.real? ? "Float.floatToIntBits(#{field.name})" : field.name) : "#{field.nullable? ? "null == #{field.name} ? 0 : " : ''}#{field.name}.hashCode()" %>);
<% end -%>
    return result;
  }
}
