/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.gwt_rpc.qualified_servlet_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"SE_TRANSIENT_FIELD_NOT_RESTORED"})
@javax.servlet.annotation.WebServlet( name = "<%= service.data_module.name %>.<%= service.gwt_rpc.servlet_name %>", urlPatterns = { "/<%= service.gwt_rpc.api_url %>" } )
public class <%= service.gwt_rpc.servlet_name %>
  extends com.google.gwt.user.server.rpc.<%= service.gwt_rpc.xsrf_protected? ? "XsrfProtectedServiceServlet" : "RemoteServiceServlet" %>
  implements <%= service.gwt_rpc.qualified_rpc_service_name %>
{
  private static final long serialVersionUID = 1;

  private transient final org.codehaus.jackson.map.ObjectMapper _jsonMapper = new org.codehaus.jackson.map.ObjectMapper();

  private int _codeServerPort;
  private String _gwtModulePath;
  private String _codeServerHost;

  @java.lang.Override
  public void init( final javax.servlet.ServletConfig config )
    throws javax.servlet.ServletException
  {
    super.init( config );
    _codeServerPort = getCodeServerPort();
    _gwtModulePath = System.getProperty( "gwt.codeserver.module" );
    _codeServerHost = System.getProperty( "gwt.codeserver.host", "localhost" );
  }

  private int getCodeServerPort()
    throws javax.servlet.ServletException
  {
    final String value = System.getProperty( "gwt.codeserver.port" );
    if ( null == value )
    {
      return 0;
    }

    try
    {
      final int port = Integer.parseInt( value );
      if ( port >= 0 && port < 65536 )
      {
        return port;
      }
    }
    catch ( final java.lang.NumberFormatException nfe )
    {
      // fall through
    }
    throw new javax.servlet.ServletException( "Invalid value of gwt.codeserver.port system property; expected an integer in the range [1-65535] but got: " + value );
  }

  protected String getCodeServerPolicyUrl( final String strongName )
  {
    if ( null == _gwtModulePath || _codeServerPort <= 0 )
    {
      return null;
    }
    return "http://" + _codeServerHost + ":" + _codeServerPort + "/" + _gwtModulePath + "/" + strongName + ".gwt.rpc";
  }

  @javax.inject.Inject
  private transient <%= service.ejb.generate_boundary? ? service.ejb.qualified_boundary_interface_name : service.ejb.qualified_service_name %> _service;

<% service.methods.select{|method| method.gwt_rpc?}.each do |method|
%>  <%= annotated_type(method.return_value, :gwt_rpc, :transport, :public => true) %> <%= method.gwt_rpc.name %>(<%= method.parameters.select{|parameter| !parameter.gwt_rpc.environmental?}.collect{|p| "#{annotated_type(p, :gwt_rpc, :transport)} #{p.gwt_rpc.name}" }.join(', ') %>)<%=
    method.exceptions.empty? ? '' : "\n    throws #{method.exceptions.collect{|e| e.gwt_rpc.qualified_name}.join(', ')}"
%>
  {
<% if method.imit? -%>
    org.realityforge.replicant.server.ee.ReplicantContextHolder.put( org.realityforge.replicant.shared.transport.ReplicantContext.SESSION_ID_KEY, getThreadLocalRequest().getHeader( org.realityforge.replicant.shared.transport.ReplicantContext.SESSION_ID_HEADER ) );
    org.realityforge.replicant.server.ee.ReplicantContextHolder.put( org.realityforge.replicant.shared.transport.ReplicantContext.REQUEST_ID_KEY, getThreadLocalRequest().getHeader( org.realityforge.replicant.shared.transport.ReplicantContext.REQUEST_ID_HEADER ) );
<% end -%>

<% method.parameters.select{|p|!p.collection? && p.struct?}.each do |parameter| %>
    final <%= parameter.referenced_struct.ee.qualified_name %> $<%= parameter.name %>;
<% end %>
<% method.parameters.select{|p|p.collection? && (p.date? || p.enumeration?|| p.struct?)}.each do |parameter| %>
    <%= annotated_type(parameter, :ejb, :boundary, :final => true) %> $<%= parameter.name %>;
<% end %>
    try
  {
<% if method.parameters.any?{|p| p.struct?}
%>  try
  {
<% end %>
<%
   return_prefix = ''
   return_postfix = ''
   if method.return_value.return_type != :void
     return_prefix = "#{annotated_type(method.return_value, :ejb, :boundary, :final => true)} returnValue = "
     transform = nil
     if method.return_value.date?
       transform = "org.realityforge.gwt.datatypes.client.date.RDate.fromDate( returnValue )"
     elsif method.return_value.enumeration?
       if method.return_value.enumeration.numeric_values?
         transform = "returnValue.ordinal()"
       else
         transform = "returnValue.name()"
       end
     elsif method.return_value.struct?
       transform = "_jsonMapper.writeValueAsString( returnValue )"
     end

     if !method.return_value.collection?
       if method.return_value.nullable? && transform
         transform = "(null == returnValue ? null : #{transform})"
       end
       return_postfix = "return #{transform || "returnValue"};"
     elsif method.return_value.date? || method.return_value.enumeration? || method.return_value.struct?
       return_postfix = ""
       return_postfix << "#{annotated_type(method.return_value, :ejb, :transport, :final => true)} $returnValue = #{method.return_value.nullable? ? "null == returnValue ? null : " : '' }new java.util.#{method.return_value.collection_type == :set ? "HashSet" : "ArrayList" }<#{method.return_value.ejb.java_component_type(:transport) }>();\n"
       return_postfix << "  if( null != returnValue )\n    {\n" if method.return_value.nullable?
       return_postfix << <<LOOP
    for( final #{method.return_value.ejb.java_component_type(:boundary) } k: returnValue )
    {
      $returnValue.add(
LOOP
         if method.return_value.date?
           return_postfix << "org.realityforge.gwt.datatypes.client.date.RDate.fromDate( k )"
         elsif method.return_value.struct?
           return_postfix << "_jsonMapper.writeValueAsString( k )"
         elsif method.return_value.enumeration.numeric_values?
           return_postfix << "k.ordinal()"
         elsif method.return_value.enumeration.textual_values?
           return_postfix << "k.name()"
         end
         return_postfix << ");\n    }\n"
         return_postfix << "    }\n" if method.return_value.nullable?
         return_postfix << "return $returnValue;\n"
       else
         return_postfix = "return returnValue;"
       end
       if method.return_value.struct?
         return_postfix = "try {\n #{return_postfix} \n} catch ( final java.io.IOException ioe ) { throw new IllegalArgumentException( ioe.getMessage(), ioe ); }"
       end
   end
%>
<% method.parameters.select{|p|p.struct? && !p.collection?}.each do |parameter| %>
    $<%= parameter.name %> = _jsonMapper.readValue( <%= parameter.name %>, <%= parameter.ejb.java_type %>.class );
<% end %>
<% method.parameters.select{|p|p.collection? && (p.date? || p.enumeration?|| p.struct?)}.each do |parameter| %>
    $<%= parameter.name %> = <%= parameter.nullable? ? "null == #{parameter.name} ? null : " : '' %>new java.util.<%=  parameter.collection_type == :set ? "HashSet" : "ArrayList" %><<%= parameter.ejb.java_component_type(:boundary) %>>();
    <% if parameter.nullable? %>if( null != <%= parameter.name %> ) {<% end %>
    for( final <%= parameter.ejb.java_component_type(:transport) %> k: <%= parameter.name %> )
    {
    <%
       param_value =
         if parameter.date?
           "org.realityforge.gwt.datatypes.client.date.RDate.toDate( k )"
         elsif parameter.enumeration?
           parameter.enumeration.numeric_values? ?
             "#{parameter.enumeration.ee.qualified_name}.values()[ k ]" :
             "#{parameter.enumeration.ee.qualified_name}.valueOf( k )"
         else
           "_jsonMapper.readValue( k, #{parameter.ejb.java_component_type}.class )"
         end
    %>
    $<%= parameter.name %>.add( <%= param_value %> );
    }
    <% if parameter.nullable? %>}<% end %>
<% end %>
<% if method.parameters.any?{|p| p.struct?}
%>    }
    catch ( final java.io.IOException ioe )
    {
      throw new IllegalArgumentException( ioe.getMessage(), ioe );
    }
<% end %>
    <%= return_prefix %>_service.<%= method.gwt_rpc.name %>(<%= method.parameters.collect do |p|
  if p.gwt_rpc.environmental?
    value = p.gwt_rpc.environment_value
  elsif p.struct? || (p.collection? && (p.date? || p.enumeration?|| p.struct?))
    value = "$#{p.name}"
  else
    transform = nil
    if p.date?
      transform = "org.realityforge.gwt.datatypes.client.date.RDate.toDate( #{p.gwt_rpc.name} )"
    elsif p.enumeration?
      if p.enumeration.numeric_values?
        transform = "#{p.enumeration.ee.qualified_name}.values()[ #{p.gwt_rpc.name} ]"
      else
        transform = "#{p.enumeration.ee.qualified_name}.valueOf( #{p.gwt_rpc.name} )"
      end
    end
    if p.nullable? && transform
      transform = "(null == #{p.gwt_rpc.name} ? null : #{transform})"
    end
    value = transform || p.gwt_rpc.name
  end
  value
end.join(', ') %>);
  <%= return_postfix %>
    }
<% method.exceptions.each do |exception| %>
    catch ( final <%= exception.ee.qualified_name %> e )
    {
      throw new <%= exception.gwt_rpc.qualified_name %>( e.getMessage() );
    }
<% end %>
<% if method.imit? -%>
    catch ( final javax.ejb.EJBException e )
    {
      // If the transaction has rolled back there will be no messages arriving
      getThreadLocalResponse().setHeader( org.realityforge.replicant.shared.transport.ReplicantContext.REQUEST_COMPLETE_HEADER, "1" );
      throw e;
    }
<% end %>
    finally
    {
<% if method.imit? -%>
      final String complete = (String) org.realityforge.replicant.server.ee.ReplicantContextHolder.remove( org.realityforge.replicant.shared.transport.ReplicantContext.REQUEST_COMPLETE_KEY );
      if( null != complete )
      {
        getThreadLocalResponse().setHeader( org.realityforge.replicant.shared.transport.ReplicantContext.REQUEST_COMPLETE_HEADER, complete );
      }
      else
      {
        final String message = "Unable to find completion flag " + org.realityforge.replicant.shared.transport.ReplicantContext.REQUEST_COMPLETE_KEY + " in ReplicantContextHolder. Servlet expects to invoke service with replication interceptor enabled.";
        throw new IllegalStateException( message );
      }
<% end -%>
    }
  }
<% end %>
<%
has_cookie = false
 service.methods.select{|method| method.gwt_rpc?}.each do |method|
   has_cookie = method.parameters.any?{|p| p.gwt_rpc.environmental? && p.gwt_rpc.environment_key_is_cookie?}
 end
if has_cookie
%>
  @javax.annotation.Nullable
  private static String findCookie( final javax.servlet.http.HttpServletRequest request, final String cookieName )
  {
    final javax.servlet.http.Cookie[] cookies = request.getCookies();
    if ( null != cookies )
    {
      for ( final javax.servlet.http.Cookie cookie : cookies )
      {
        if ( cookie.getName().equals( cookieName ) )
        {
          return cookie.getValue();
        }
      }
    }
    return null;
  }
<% end %>
}
