/* DO NOT EDIT: File is auto-generated */
package <%= to_package(message.gwt.qualified_event_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "PMD.AddEmptyString" } )
public final class <%= message.gwt.event_name %>
  extends com.google.gwt.event.shared.GwtEvent<<%= message.gwt.event_name %>.Handler>
{
  public interface Handler
    extends com.google.gwt.event.shared.EventHandler
  {
    void on<%= message.name %>( @javax.annotation.Nonnull <%= message.gwt.event_name %> event );
  }

  public static final Type<Handler> TYPE = new Type<Handler>();
<% message.parameters.each do |parameter|
%>  private final <%= parameter.gwt.java_type %> _<%= Domgen::Naming.camelize(parameter.name) %>;
<% end %>

  public <%= message.gwt.event_name %>(<%= message.parameters.collect{|p| "#{annotated_type(p, :gwt, :default, :final => true)} #{Domgen::Naming.camelize(p.name)}"}.join(", ") %>)
  {
<% message.parameters.select{|p| !p.nullable? && !p.gwt.primitive?}.each do |parameter| %>
    if( null == <%= Domgen::Naming.camelize(parameter.name) %> )
    {
      throw new IllegalArgumentException("<%= parameter.name %> is null");
    }
<% end -%>
<% message.parameters.each do |parameter|
  if :sequence == parameter.collection_type -%>
    _<%= Domgen::Naming.camelize(parameter.name) %> = <%= parameter.nullable? ? " null == #{Domgen::Naming.camelize(parameter.name)} ? null : " : '' %> java.util.Collections.unmodifiableList( new java.util.ArrayList<<%= parameter.gwt.java_component_type %>>( <%= Domgen::Naming.camelize(parameter.name) %> ) );
<%     elsif :set == parameter.collection_type -%>
    _<%= Domgen::Naming.camelize(parameter.name) %> = <%= parameter.nullable? ? " null == #{Domgen::Naming.camelize(parameter.name)} ? null : " : '' %> java.util.Collections.unmodifiableSet( new java.util.HashSet<<%= parameter.gwt.java_component_type %>>( <%= Domgen::Naming.camelize(parameter.name) %> ) );
<%     else -%>
    _<%= Domgen::Naming.camelize(parameter.name) %> = <%= Domgen::Naming.camelize(parameter.name) %>;
<% end
   end -%>
  }

<% message.parameters.each do |parameter| -%>
  <%= annotated_type(parameter, :gwt, :default, :public => true) %> get<%= parameter.name %>()
  {
    return _<%= Domgen::Naming.camelize(parameter.name) %>;
  }

<% end -%>
  @java.lang.Override
  public Type<Handler> getAssociatedType()
  {
    return TYPE;
  }

  @java.lang.Override
  protected void dispatch( final Handler handler )
  {
    handler.on<%= message.name %>( this );
  }

  public String toDebugString()
  {
    return toString();
  }

  public String toString()
  {
    return "<%= message.name %>[" + <% if message.parameters.empty? -%>""<% else
    message.parameters.each_with_index do |parameter, i|
      field_name = "_#{Domgen::Naming.camelize(parameter.name)}"
      value = field_name
      if parameter.reference?
        if parameter.collection?
          value = "\"(Count=\" + #{field_name}.size() + \")\""
        else
          value = "#{field_name}.#{getter_prefix(parameter.referenced_entity.primary_key)}#{(parameter.referenced_entity.primary_key.name)}()"
        end
      end
      %> <%= i != 0 ? " + \"\, \" + " : "" %> "<%= parameter.name %>=" + (<%= parameter.nullable? ? "null == #{field_name} ? null : " : '' %><%= value %>) <%
    end
    end -%> + "]";
  }
}
