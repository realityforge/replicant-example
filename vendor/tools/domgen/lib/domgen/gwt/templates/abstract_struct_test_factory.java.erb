/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.gwt.qualified_abstract_struct_test_factory_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public abstract class <%= data_module.gwt.abstract_struct_test_factory_name %>
{
  private final com.google.inject.Injector _injector;

  protected <%= data_module.gwt.abstract_struct_test_factory_name %>( @javax.annotation.Nonnull final com.google.inject.Injector injector )
  {
    _injector = injector;
  }

<% data_module.repository.data_modules.select{|dm|dm != data_module && dm.gwt? && dm.gwt.generate_struct_factory?}.each do |dm| -%>
  protected final <%= dm.gwt.qualified_struct_test_factory_name %> <%= Reality::Naming.camelize(dm.name) %>()
  {
    return s( <%= dm.gwt.qualified_struct_test_factory_name %>.class );
  }

<% end -%>
<% data_module.structs.select{|e|e.gwt?}.each do |struct| -%>
  @javax.annotation.Nonnull
  public final <%= struct.gwt.qualified_interface_name %> create<%= struct.name %>( <%= struct.fields.collect {|field| "#{annotated_type(field, :gwt, :boundary, :final => true) } #{field.name}" }.join(', ') %> )
  {
    return <%= struct.gwt.qualified_factory_name %>.create( <%= struct.fields.collect {|field| field.name }.join(', ') %> );
  }

<% end -%>
<% if data_module.imit? -%>
  @javax.annotation.Nonnull
  protected final org.realityforge.replicant.client.EntityRepository repository()
  {
    return s( org.realityforge.replicant.client.EntityRepository.class );
  }

<% end -%>
  @javax.annotation.Nonnull
  protected final <T> T s( @javax.annotation.Nonnull final Class<T> type )
  {
    return _injector.getInstance( type );
  }
}
