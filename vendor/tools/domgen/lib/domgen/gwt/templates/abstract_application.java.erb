/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.gwt.qualified_abstract_application_name) %>;

@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.gwt.abstract_application_name %><I extends <%= repository.gwt.qualified_abstract_ginjector_name %>>
<% if repository.keycloak? -%>
    implements org.realityforge.gwt.keycloak.KeycloakListener
<% end -%>
{
<% if repository.keycloak? -%>
  private final org.realityforge.gwt.keycloak.Keycloak _keycloak;
<% end -%>
  private final String _applicationURL;
  private final String _serverUrl;

  protected <%= repository.gwt.abstract_application_name %>(<% if repository.keycloak? -%> @javax.annotation.Nonnull final String keycloakClient <% end -%>)
  {
    final String hostBaseURL = com.google.gwt.core.client.GWT.getHostPageBaseURL();
    final String hostURL = hostBaseURL.substring( 0, hostBaseURL.indexOf( '/', hostBaseURL.indexOf( "://" ) + 3 ) );
    final String moduleBaseURL = com.google.gwt.core.client.GWT.getModuleBaseURL();
    final String moduleHostURL = moduleBaseURL.substring( 0, moduleBaseURL.indexOf( '/', moduleBaseURL.indexOf( "://" ) + 3 ) );
    if( !hostURL.equals( moduleHostURL ) )
    {
      _applicationURL = hostBaseURL;
    }
    else
    {
      _applicationURL = moduleBaseURL.substring( 0, moduleBaseURL.length() - com.google.gwt.core.client.GWT.getModuleName().length() - 1 );
    }
    _serverUrl = _applicationURL.substring( 0, _applicationURL.indexOf( '/', _applicationURL.indexOf( "://" ) + 3 ) );
<% if repository.keycloak? -%>
    _keycloak = new org.realityforge.gwt.keycloak.Keycloak( keycloakClient, _applicationURL + ".keycloak/" + keycloakClient + "/keycloak.json" );
    getKeycloak().setListener( this );
<% end -%>
  }

  public String getApplicationURL()
  {
    return _applicationURL;
  }

  public String getServerUrl()
  {
    return _serverUrl;
  }

  @javax.annotation.Nullable
  protected abstract I getInjector();

  @javax.annotation.Nonnull
  protected final I ensureInjector()
  {
    final I injector = getInjector();
    assert null != injector;
    return injector;
  }
<% if repository.keycloak? -%>

  @javax.annotation.Nullable
  protected final com.google.gwt.event.shared.EventBus getEventBus()
  {
    final I injector = getInjector();
    return null != injector ? injector.getEventBus() : null;
  }

  protected final void fireEvent( @javax.annotation.Nonnull final com.google.gwt.event.shared.GwtEvent<?> event )
  {
    final com.google.gwt.event.shared.EventBus eventBus = getEventBus();
    if ( null != eventBus )
    {
      eventBus.fireEvent( event );
    }
  }

  protected final void fireEventFromSource( @javax.annotation.Nonnull final com.google.gwt.event.shared.GwtEvent<?> event, @javax.annotation.Nonnull final Object source )
  {
    final com.google.gwt.event.shared.EventBus eventBus = getEventBus();
    if ( null != eventBus )
    {
      eventBus.fireEventFromSource( event, source );
    }
  }

  @Override
  public void onReady( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak, final boolean authenticated )
  {
    if ( authenticated )
    {
      start();
    }
    else
    {
      keycloak.login();
    }
    fireEventFromSource( new org.realityforge.gwt.keycloak.event.ReadyEvent( keycloak, authenticated ), keycloak );
  }

  @Override
  public void onAuthSuccess( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak )
  {
    fireEventFromSource( new org.realityforge.gwt.keycloak.event.AuthSuccessEvent( keycloak ), keycloak );
  }

  @Override
  public void onAuthError( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak )
  {
    fireEventFromSource( new org.realityforge.gwt.keycloak.event.AuthErrorEvent( keycloak ), keycloak );
  }

  @Override
  public void onAuthRefreshSuccess( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak )
  {
    fireEventFromSource( new org.realityforge.gwt.keycloak.event.AuthRefreshSuccessEvent( keycloak ), keycloak );
  }

  @Override
  public void onAuthRefreshError( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak )
  {
    fireEventFromSource( new org.realityforge.gwt.keycloak.event.AuthRefreshErrorEvent( keycloak ), keycloak );
  }

  @Override
  public void beforeAuthLogout( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak )
  {
    fireEventFromSource( new org.realityforge.gwt.keycloak.event.BeforeAuthLogoutEvent( keycloak ), keycloak );
  }

  @Override
  public void onAuthLogout( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak )
  {
    fireEventFromSource( new org.realityforge.gwt.keycloak.event.AuthLogoutEvent( keycloak ), keycloak );
  }

  @Override
  public void onTokenExpired( @javax.annotation.Nonnull final org.realityforge.gwt.keycloak.Keycloak keycloak )
  {
    fireEventFromSource( new org.realityforge.gwt.keycloak.event.TokenExpiredEvent( keycloak ), keycloak );
  }

  public void login()
  {
    getKeycloak().login();
  }

  public void logout()
  {
    getKeycloak().logout();
  }

  @javax.annotation.Nonnull
  public org.realityforge.gwt.keycloak.Keycloak getKeycloak()
  {
    return _keycloak;
  }
<% end -%>

  public void init()
  {
<% if repository.gwt_rpc? -%>
    initGwtRpcServices();
<% end -%>
<% if repository.keycloak? -%>
    getKeycloak().init();
<% else -%>
    start();
<% end -%>
  }

  public void start()
  {
    preStart();
<% if repository.appcache? -%>
    setupAppCache();
<% end -%>
    setupUncaughtExceptionHandler();
    prepareServices();
    prepareUI();
    postStart();
  }

  private void setupUncaughtExceptionHandler()
  {
    com.google.gwt.core.client.GWT.setUncaughtExceptionHandler( new com.google.gwt.core.client.GWT.UncaughtExceptionHandler()
    {
      @Override
      public void onUncaughtException( final Throwable e )
      {
        <%= repository.gwt.abstract_application_name %>.this.onUncaughtException( e );
      }
    } );
  }
<% if repository.appcache? -%>

  private void setupAppCache()
  {
    final org.realityforge.gwt.appcache.client.ApplicationCache cache = org.realityforge.gwt.appcache.client.ApplicationCache.getApplicationCacheIfSupported();
    if ( null != cache )
    {
      cache.addUpdateReadyHandler( new org.realityforge.gwt.appcache.client.event.UpdateReadyEvent.Handler()
      {
        @java.lang.Override
        public void onUpdateReadyEvent( @javax.annotation.Nonnull final org.realityforge.gwt.appcache.client.event.UpdateReadyEvent event )
        {
          cache.swapCache();
          onAppcacheUpdateReadyEvent();
        }
      } );
    }
  }

  protected abstract void onAppcacheUpdateReadyEvent();
<% end -%>

  protected abstract void postStart();

  protected abstract void preStart();

  protected void prepareServices()
  {
<% if repository.imit? -%>
    ensureInjector().getFrontendContext().connect();
<% end -%>
  }

  protected abstract void prepareUI();

  protected void onUncaughtException( @javax.annotation.Nonnull final Throwable e )
  {
    if( <%= repository.gwt.qualified_debug_config_name %>.EMIT_RAW_UNCAUGHT_EXCEPTIONS )
    {
      org.realityforge.gwt.lognice.BrowserExceptionUtil.log( e );
    }
<% if repository.iris_audit? -%>
    final iris.audit.client.ClientExceptionAuditHelper helper = getClientExceptionAuditHelper();
    if ( null != helper )
    {
      helper.auditClientException( e, e.getMessage() );
    }
<% end -%>
  }
<% if repository.gwt_rpc? -%>

  protected void initGwtRpcServices()
  {
<% if repository.keycloak? -%>
    <%= repository.gwt_rpc.qualified_rpc_services_module_name %>.setKeycloak( getKeycloak() );
<% end -%>
    <%= repository.gwt_rpc.qualified_rpc_services_module_name %>.<% if repository.imit? -%>getSessionContext().<% end -%>setBaseURL( getApplicationURL() );
    <%= repository.gwt_rpc.qualified_rpc_services_module_name %>.initialize();
<% if repository.iris_audit? -%>
    iris.audit.client.ioc.AuditGwtRpcServicesModule.setBaseURL( getApplicationURL() );
<% if repository.keycloak? -%>
    iris.audit.client.ioc.AuditGwtRpcServicesModule.setKeycloak( getKeycloak() );
<% end -%>
    iris.audit.client.ioc.AuditGwtRpcServicesModule.initialize();
<% end -%>
<% if repository.imit? -%>
<% repository.imit.remote_datasources.select{|ds| ds.gwt_rpc_enabled? }.each do |ds| -%>
    <%= ds.base_package %>.client.ioc.<%= ds.name %>GwtRpcServicesModule.<% if ds.imit_enabled? %>getSessionContext().<% end %>setBaseURL( getServerUrl() + "/<%= Reality::Naming.underscore(ds.name) %>/" );
<% if repository.keycloak? && ds.keycloak_enabled? -%>
    <%= ds.base_package %>.client.ioc.<%= ds.name %>GwtRpcServicesModule.setKeycloak( getKeycloak() );
<% end -%>
    <%= ds.base_package %>.client.ioc.<%= ds.name %>GwtRpcServicesModule.initialize();
<% end -%>
<% end -%>
<% if repository.berk? -%>
    iris.berk.client.ioc.BerkGwtRpcServicesModule.setBaseURL( getApplicationURL() );
<% if repository.keycloak? -%>
    iris.berk.client.ioc.BerkGwtRpcServicesModule.setKeycloak( getKeycloak() );
<% end -%>
    iris.berk.client.ioc.BerkGwtRpcServicesModule.initialize();
<% end -%>
  }
<% end -%>
<% if repository.iris_audit? -%>

  @javax.annotation.Nullable
  protected final iris.audit.client.ClientExceptionAuditHelper getClientExceptionAuditHelper()
  {
    final I injector = getInjector();
    return null != injector ? injector.getClientExceptionAuditHelper() : null;
  }
<% end -%>
}
