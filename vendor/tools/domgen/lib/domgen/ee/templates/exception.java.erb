/* DO NOT EDIT: File is auto-generated */
package <%= to_package(exception.ee.qualified_name) %>;

@javax.annotation.Generated( "Domgen" )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"EI_EXPOSE_REP", "EI_EXPOSE_REP2", "DLS_DEAD_LOCAL_STORE"})
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
<% if exception.ejb? && !exception.data_module.repository.ee.use_cdi? -%>@javax.ejb.ApplicationException( rollback = <%= exception.ejb.rollback? %>, inherited = true )<% end %>
public class <%= exception.ee.name %> extends <%= exception.extends.nil? ? exception.java.standard_extends : exception.data_module.exception_by_name(exception.extends).ee.qualified_name %>
{
<% exception.declared_parameters.each do |parameter| %>
  <%= annotated_type(parameter, :ee, :boundary, :private => true) %> <%= parameter.name %>;
<% end %>
<%
param_desc =
  exception.parameters.collect do |parameter|
    "#{annotated_type(parameter, :ee, :boundary, :final => true) } #{parameter.name}"
  end.join(', ')
param_desc_with_suffix = param_desc + (param_desc.size == 0 ? '' : ', ')

param_values = exception.parameters.collect{ |parameter| parameter.name}.join(', ')
param_values_with_suffix = param_values + (param_values.size == 0 ? '' : ', ')

inherited_params = exception.inherited_parameters.collect{ |parameter| parameter.name}.join(', ')
inherited_params_with_suffix = inherited_params + (inherited_params.size == 0 ? '' : ', ')

      -%>
  public <%= exception.ee.name %>( <%= param_desc %> ) { this( <%= param_values_with_suffix %>null, null ); }
  public <%= exception.ee.name %>( <%= param_desc_with_suffix %>final String message ) { this( <%= param_values_with_suffix %>message, null ); }
  public <%= exception.ee.name %>( <%= param_desc_with_suffix %>final Throwable cause ) { this( <%= param_values_with_suffix %>null, cause ); }
  public <%= exception.ee.name %>( <%= param_desc_with_suffix %>final String message, final Throwable cause )
  {
    super( <%= inherited_params_with_suffix %>message, cause );
  <% exception.declared_parameters.each do |parameter|
     if :sequence == parameter.collection_type
%>    this.<%= parameter.name %> = java.util.Collections.unmodifiableList( new java.util.ArrayList<<%= parameter.ee.java_component_type %>>( <%= parameter.name %> ) );
<%     elsif :set == parameter.collection_type
%>    this.<%= parameter.name %> = java.util.Collections.unmodifiableSet( new java.util.HashSet<<%= parameter.ee.java_component_type %>>( <%= parameter.name %> ) );
<%     else
%>    this.<%= parameter.name %> = <%= parameter.name %>;
<%   end
   end
%>  }

<% exception.declared_parameters.each do |parameter|
%>
<%= annotated_type(parameter, :ee, :boundary, :public => true) %> <%= getter_prefix(parameter) %><%= parameter.name %>()
  {
  return <%= parameter.name %>;
}
  <% end
%>}
