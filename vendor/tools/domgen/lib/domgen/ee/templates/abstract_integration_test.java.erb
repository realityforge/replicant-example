/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.ee.qualified_abstract_integration_test_name) %>;

@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.ee.abstract_integration_test_name %>
  extends <%= repository.jpa? ? repository.jpa.qualified_standalone_entity_test_name : 'org.realityforge.guiceyloops.server.AbstractServerTest' %>
{
  // Arbitrarily large enough for most requests
  private static final int SOCKET_TIMEOUT = 20000;

  @org.testng.annotations.BeforeSuite
  public void beforeSuite()
    throws Exception
  {
<% if repository.jms? -%>
    getAppServer().enableOpenMQ();
<% end -%>
    getAppServer().setUp();
  }

  @org.testng.annotations.AfterSuite
  public void afterSuite()
  {
    getAppServer().tearDown();
  }

  @org.testng.annotations.BeforeMethod
  public void preTest()
    throws Exception
  {
    super.preTest();
    usesTransaction();
  }

  @javax.annotation.Nonnull
  protected final <%= repository.ee.qualified_app_server_name %> getAppServer()
  {
    return <%= repository.ee.qualified_app_server_factory_name %>.getAppServer();
  }

  @java.lang.Override
  protected com.google.inject.Module[] getModules()
  {
    final java.util.ArrayList<com.google.inject.Module> modules = new java.util.ArrayList<>();
    java.util.Collections.addAll( modules, super.getModules() );
<% repository.ee.integration_test_modules.keys.each do |name| -%>
    addModule( modules, new<%= name %>() );
<% end -%>
    return modules.toArray( new com.google.inject.Module[ modules.size() ] );
  }
<% repository.ee.integration_test_modules.each_pair do |name, classname| -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module new<%= name %>()
  {
    return new <%= classname =~ /\(/ ? classname : "#{classname}()" %>;
  }
<% end -%>
<% if repository.appconfig? -%>

  protected java.lang.String[] getFeatureFlagsToDisable()
  {
    return new java.lang.String[] {<%= repository.appconfig.system_settings.select{|f|f.disable_in_integration_test?}.collect{|f| "#{repository.appconfig.qualified_feature_flag_container_name}.#{Reality::Naming.uppercase_constantize(f.key)}"}.join(', ') -%>};
  }

  @java.lang.Override
  protected void postInjector()
  {
    final javax.persistence.EntityTransaction transaction = getInstance( iris.appconfig.server.entity.AppConfigPersistenceUnit.NAME, javax.persistence.EntityManager.class ).getTransaction();
    transaction.begin();
    for( final java.lang.String flag : getFeatureFlagsToDisable() )
    {
      s( iris.appconfig.server.service.FeatureFlagService.class ).disableFeature( flag );
    }
    transaction.commit();
  }

  @java.lang.Override
  protected final com.google.inject.Module newAppConfigPersistenceTestModule()
  {
    // Avoid cleaning the AppConfig tables during startup
    return new iris.appconfig.server.test.util.AppConfigPersistenceTestModule( false );
  }
<% end -%>

  protected <T> T httpGet( @javax.annotation.Nonnull final String urlFragment, @javax.annotation.Nonnull final Class<T> type )
    throws java.lang.Exception
  {
    return toWebTarget( urlFragment ).request().get( type );
  }

  @javax.annotation.Nonnull
  protected javax.ws.rs.client.WebTarget toWebTarget( @javax.annotation.Nonnull final String urlFragment )
  {
    return newClient().target( toURL( urlFragment ) );
  }

  @javax.annotation.Nonnull
  protected String toURL( @javax.annotation.Nonnull final String urlFragment )
  {
    return getAppServer().get<%= repository.name %>Provisioner().getSiteURL() + urlFragment;
  }

  @javax.annotation.Nonnull
  protected javax.ws.rs.client.Client newClient()
  {
    return javax.ws.rs.client.ClientBuilder.newBuilder().
      property( "jersey.config.client.connectTimeout", SOCKET_TIMEOUT ).
      property( "jersey.config.client.readTimeout", SOCKET_TIMEOUT ).
<% if repository.jackson? -%>
      register( org.glassfish.jersey.jackson.JacksonFeature.class ).
<% end -%>
      build();
  }
<% if repository.jms? -%>

  protected final void sendTextMessageToTopic( @javax.annotation.Nonnull final String message, @javax.annotation.Nonnull final String destinationName )
    throws Exception
  {
    sendTextMessageToDestination( message, destinationName, false );
  }

  protected final void sendTextMessageToQueue( @javax.annotation.Nonnull final String message, @javax.annotation.Nonnull final String destinationName )
    throws Exception
  {
    sendTextMessageToDestination( message, destinationName, true );
  }

  protected final void sendTextMessageToDestination( @javax.annotation.Nonnull final String message,
                                                     @javax.annotation.Nonnull final String destinationName,
                                                     final boolean isQueue )
    throws Exception
  {
    try ( final javax.jms.Connection connection = getAppServer().getOpenMQContainer().createConnection() )
    {
      try ( final javax.jms.Session session = connection.createSession() )
      {
        final javax.jms.Destination destination =
          isQueue ?
          session.createQueue( destinationName ) :
          session.createTopic( destinationName );
        try ( final javax.jms.MessageProducer producer = session.createProducer( destination ) )
        {
          producer.send( session.createTextMessage( message ) );
        }
      }
    }
  }
<% end -%>
}
