/* DO NOT EDIT: File is auto-generated */
package <%= to_package(struct.ee.qualified_name) %>;

@javax.annotation.Generated( "Domgen" )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"EI_EXPOSE_REP", "EI_EXPOSE_REP2", "DLS_DEAD_LOCAL_STORE"})
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.UselessParentheses", "PMD.UnusedLocalVariable", "PMD.UnnecessaryLocalBeforeReturn", "PMD.UnnecessaryConstructor", "PMD.LocalVariableCouldBeFinal" } )
<%= jackson_class_annotations(struct) if struct.jackson? -%>
<%= jaxb_class_annotations(struct) if struct.jaxb? -%>

public class <%= struct.ee.name %>
  implements java.io.Serializable
{
  private static final long serialVersionUID = 1;

<% struct.fields.each do |field| -%>
<%= '  ' + jackson_field_annotation(field) if field.jackson? -%>
<%= '  ' + jaxb_field_annotation(field) if field.jaxb? -%>
  <%= annotated_type(field, :ee, :boundary, :private => true) %> <%= Reality::Naming.camelize(field.name) %>;
<% end -%>

<% if struct.fields.size != 0 %>
  /**
   * This constructor is present for deserialization mechanisms and should not be called directly.
   *
   * @deprecated
   */
  @java.lang.Deprecated
  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR"})
  public <%= struct.name %>()
  {
  }
<% end %>

  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE"})
<% if struct.data_module.jmx? -%>  @java.beans.ConstructorProperties({<%= struct.fields.collect {|field| "\"#{javabean_property_name(field.name)}\""}.join( ', ') %>})<% end -%>
  public <%= struct.name %>( <%= struct.fields.collect {|field| "#{annotated_type(field, :ee, :boundary, :final => true)} #{Reality::Naming.camelize(field.name)}" }.join(', ') %> )
  {
<% struct.fields.select{|field| !field.nullable? && !field.ee.primitive? }.each do |field| -%>
    if ( null == <%= Reality::Naming.camelize(field.name) %> )
    {
      throw new IllegalArgumentException( "<%= Reality::Naming.camelize(field.name) %> should not be null" );
    }
<% end -%>
<% struct.fields.each do |field|
     null_protection = field.nullable? ? "#{Reality::Naming.camelize(field.name)} == null ? null : " :''
     if :sequence == field.collection_type
%>    this.<%= Reality::Naming.camelize(field.name) %> = <%= null_protection %>java.util.Collections.unmodifiableList( new java.util.ArrayList<<%= field.ee.java_component_type %>>( <%= Reality::Naming.camelize(field.name) %> ) );
<%     elsif :set == field.collection_type
%>    this.<%= Reality::Naming.camelize(field.name) %> = <%= null_protection %>java.util.Collections.unmodifiableSet( new java.util.HashSet<<%= field.ee.java_component_type %>>( <%= Reality::Naming.camelize(field.name) %> ) );
  <%     else
%>    this.<%= Reality::Naming.camelize(field.name) %> = <%= Reality::Naming.camelize(field.name) %>;
<%   end
   end
%>  }
<% struct.fields.each do |field|
%>
  <%= annotated_type(field, :ee, :boundary, :public => true, :final => true) %> <%= getter_prefix(field) %><%= field.name %>()
  {
    return <%= Reality::Naming.camelize(field.name) %>;
  }
<% end
%>

  @java.lang.Override
  public boolean equals( final Object o )
  {
    if ( this == o )
    {
      return true;
    }
    if ( o == null || getClass() != o.getClass() )
    {
      return false;
    }

    final <%= struct.ee.name %> that = (<%= struct.ee.name %>) o;
<% struct.fields.select{|f|!f.collection?}.each do |field| -%>
    if ( <%= field.ee.primitive?(:boundary) ? "#{Reality::Naming.camelize(field.name)} != that.#{Reality::Naming.camelize(field.name)}" : "#{field.nullable? ? "null == #{Reality::Naming.camelize(field.name)} ? null != that.#{Reality::Naming.camelize(field.name)} : " : ''}!#{Reality::Naming.camelize(field.name)}.equals( that.#{Reality::Naming.camelize(field.name)} )" %> )
    {
      return false;
    }
<% end -%>
<% struct.fields.select{|f|f.collection?}.each do |field| -%>
<% if field.nullable? -%>
    if ( (null ==  <%= Reality::Naming.camelize(field.name) %> && null !=  that.<%= Reality::Naming.camelize(field.name) %>) || (null !=  <%= Reality::Naming.camelize(field.name) %> && null ==  that.<%= Reality::Naming.camelize(field.name) %>) )
    {
      return false;
    }
    else if ( null != <%= Reality::Naming.camelize(field.name) %> )
<% end -%>
    {
      if ( <%= Reality::Naming.camelize(field.name) %>.size() != that.<%= Reality::Naming.camelize(field.name) %>.size() )
      {
        return false;
      }
      for ( final <%= field.ee.java_component_type %> v : <%= Reality::Naming.camelize(field.name) %> )
      {
        if ( !that.<%= Reality::Naming.camelize(field.name) %>.contains( v ) )
        {
          return false;
        }
      }
    }
<% end -%>
    return true;
  }

  @java.lang.Override
  public int hashCode()
  {
    int result = 0;
<% struct.fields.each do |field| -%>
    result = 31 * result + (<%= field.ee.primitive?(:boundary) ? (field.boolean? ? "#{Reality::Naming.camelize(field.name)} ? 1 : 0": field.real? ? "Float.floatToIntBits(#{Reality::Naming.camelize(field.name)})" : field.long? ? "(int)(#{Reality::Naming.camelize(field.name)})" : Reality::Naming.camelize(field.name)) : "#{field.nullable? ? "null == #{Reality::Naming.camelize(field.name)} ? 0 : " : ''}#{Reality::Naming.camelize(field.name)}.hashCode()" %>);
<% end -%>
    return result;
  }
}
