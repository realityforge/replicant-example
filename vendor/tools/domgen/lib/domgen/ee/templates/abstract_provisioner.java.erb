/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.ee.qualified_abstract_provisioner_name) %>;

@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.ee.abstract_provisioner_name %>
  extends org.realityforge.guiceyloops.server.glassfish.AbstractProvisioner
{
  private static final String APP_NAME = "<%= Reality::Naming.underscore(repository.name) %>";

  private final boolean _usePropertyPrefix;

  protected <%= repository.ee.abstract_provisioner_name %>()
  {
    this( false );
  }

  protected <%= repository.ee.abstract_provisioner_name %>( final boolean usePropertyPrefix )
  {
    _usePropertyPrefix = usePropertyPrefix;
  }

  @javax.annotation.Nonnull
  public final String getSiteURL()
  {
    return getBaseHttpURL() + getContextRoot();
  }

  @javax.annotation.Nonnull
  public String getContextRoot()
  {
    return "/" + APP_NAME;
  }
<%
  repository.data_modules.select{|dm|dm.jws?}.each do |data_module|
    data_module.services.select{|s|s.jws?}.each do |service|
-%>

  public final String get<%= service.data_module.name %><%= service.name %>EndpointAddress()
  {
    return getSiteURL() + <%= repository.jws.qualified_constants_container_name %>.<%= Reality::Naming.uppercase_constantize(service.qualified_name.gsub('.','_')) %>_URL;
  }
<%
    end
  end
-%>

  @java.lang.Override
  protected void configure( @javax.annotation.Nonnull final org.realityforge.guiceyloops.server.glassfish.GlassFishContainer glassfish )
    throws Exception
  {
<% if repository.jpa? -%>

    // Database Configuration Start
<% if repository.jpa.include_default_unit? -%>
    glassfish.create<%= repository.mssql? ? 'SqlServer' : 'Postgres' -%>JdbcResource( <%= repository.jpa.qualified_unit_descriptor_name %>.RESOURCE_NAME, getPropertyPrefix() );
<% repository.jpa.default_persistence_unit.related_database_keys.each do |key| -%>
    glassfish.createCustomResource( "<%= repository.jpa.default_persistence_unit.related_database_jndi(key) %>", <%= repository.jpa.default_persistence_unit.qualified_persistence_unit_test_util_name %>.get<%= Reality::Naming.pascal_case(key) %>DatabaseName() );
<% end -%>
<% end -%>
<% repository.jpa.standalone_persistence_units.each do |unit| -%>
    glassfish.create<%= repository.mssql? ? 'SqlServer' : 'Postgres' -%>JdbcResource( <%= repository.jpa.qualified_unit_descriptor_name %>.<%= Reality::Naming.uppercase_constantize(unit.short_name) %>_RESOURCE_NAME, <%= repository.jpa.qualified_unit_descriptor_name %>.<%= Reality::Naming.uppercase_constantize(unit.short_name) %>_KEY );
<% unit.related_database_keys.each do |key| -%>
    glassfish.createCustomResource( "<%= unit.related_database_jndi(key) %>", <%= unit.qualified_persistence_unit_test_util_name %>.get<%= Reality::Naming.pascal_case(key) %>DatabaseName() );
<% end -%>
<% end -%>
<% if repository.iris_audit?  -%>
    glassfish.create<%= repository.mssql? ? 'SqlServer' : 'Postgres' -%>JdbcResource( "<%= Reality::Naming.underscore(repository.name) %>/jdbc/Audit", "audit" );
<% end -%>
    // Database Configuration Ende

<% end -%>
<% if repository.jms? -%>

    // JMS Configuration Start
    // iiop required for JMS
    glassfish.createLocalIiopListener( "<%= Reality::Naming.underscore(repository.name) %>/iiop_listener" );
    glassfish.deleteDefaultIiopListeners();

    glassfish.setDefaultJmsHost( "<%= Reality::Naming.underscore(repository.name) %>/jms/host", getOpenMQContainer() );
    glassfish.createJmsConnectionFactory( <%= repository.jms.qualified_constants_container_name %>.CONNECTION_FACTORY_RESOURCE_NAME, getOpenMQContainer() );

<% repository.jms.destinations.each do |destination| -%>
    glassfish.createJms<%= 'javax.jms.Topic' == destination.destination_type ? 'Topic' : 'Queue' %>( <%= repository.jms.qualified_constants_container_name %>.<%= Reality::Naming.uppercase_constantize(destination.name) %>_RESOURCE_NAME, <%= repository.jms.qualified_constants_container_name %>.<%= Reality::Naming.uppercase_constantize(destination.name) %>_PHYSICAL_NAME );
<% end -%>
    // JMS Configuration Ende

<% end -%>
<% if repository.mail? -%>

    // Mail Configuration Start
    // TODO: Consider sending mail to greenmail
    glassfish.createJavamailResource( "<%= repository.mail.resource_name %>", "mail.example.com", "bob", "bob@example.com" );
    // Mail Configuration Ende

<% end -%>
<% if repository.imit? -%>
    // Replication configuration
    glassfish.createManagedScheduledExecutorService( "<%= repository.imit.executor_service_jndi %>" );
    glassfish.createContextService( "<%= repository.imit.context_service_jndi %>" );

<% repository.imit.remote_datasources.each do |rd|
      prefix = "#{Reality::Naming.underscore(repository.name)}/replicant/client/#{Reality::Naming.underscore(rd.name)}"
-%>
    // Remote Replication Datasource <%= rd.name %>
    glassfish.createCustomResource( "<%= prefix %>/url", "http://example.com/<%= Reality::Naming.underscore(rd.name) %>" );
    glassfish.createCustomResource( "<%= prefix %>/repositoryDebugOutputEnabled", false );
    glassfish.createCustomResource( "<%= prefix %>/subscriptionsDebugOutputEnabled", false );
    glassfish.createCustomResource( "<%= prefix %>/shouldValidateRepositoryOnLoad", true );
    glassfish.createCustomResource( "<%= prefix %>/requestDebugOutputEnabled", false );
<% end -%>

<% end -%>
<% if repository.keycloak? -%>
    // Keycloak Configuration Start
<% repository.keycloak.clients.each do |client| -%>
<%
  property = "\"#{Reality::Naming.underscore(client.key)}\""
  property = "getPrefixedProperty( #{property}, \"_\" )" unless client.default_client?
-%>
    // Client <%= client.key %>
    glassfish.createCustomResource( "<%= client.jndi_config_base %>/realm", getKeycloakRealm( <%= property %> ) );
    glassfish.createCustomResource( "<%= client.jndi_config_base %>/realm-public-key", getKeycloakPublicKey( <%= property %> ) );
    glassfish.createCustomResource( "<%= client.jndi_config_base %>/auth-server-url", getKeycloakServerURL( <%= property %> ) );
    glassfish.createCustomResource( "<%= client.jndi_config_base %>/resource", getKeycloakClient( <%= property %> ) );
<% end -%>
<% repository.keycloak.remote_clients.each do |remote_client| -%>
    // Remote Client <%= remote_client.name %>
    glassfish.createCustomResource( "<%= remote_client.jndi_config_base %>/server_url", getKeycloakServerURL( "<%= Reality::Naming.underscore(remote_client.name) %>" ) );
    glassfish.createCustomResource( "<%= remote_client.jndi_config_base %>/realm", getKeycloakRealm( "<%= Reality::Naming.underscore(remote_client.name) %>" ) );
    glassfish.createCustomResource( "<%= remote_client.jndi_config_base %>/client", getKeycloakClient( "<%= Reality::Naming.underscore(remote_client.name) %>" ) );
    glassfish.createCustomResource( "<%= remote_client.jndi_config_base %>/username", getKeycloakServiceUsername( "<%= Reality::Naming.underscore(remote_client.name) %>" ) );
    glassfish.createCustomResource( "<%= remote_client.jndi_config_base %>/password", getKeycloakServicePassword( "<%= Reality::Naming.underscore(remote_client.name) %>" ) );
<% end -%>
    // Keycloak Configuration Ende
<% end -%>
  }

  @java.lang.Override
  protected void deploy( @javax.annotation.Nonnull final org.realityforge.guiceyloops.server.glassfish.GlassFishContainer glassfish )
    throws Exception
  {
    glassfish.deploy( getContextRoot(), APP_NAME, org.realityforge.guiceyloops.server.glassfish.GlassFishContainerUtil.getWarFile( getPropertyPrefix() ) );
  }

  @javax.annotation.Nullable
  protected String getPropertyPrefix()
  {
    return _usePropertyPrefix ? "<%= Reality::Naming.underscore(repository.name) %>" : null;
  }

  @javax.annotation.Nonnull
  protected String getPrefixedProperty( @javax.annotation.Nonnull final String property, @javax.annotation.Nonnull final String separator )
  {
    final String prefix = getPropertyPrefix();
    return null == prefix ? property : prefix + separator + property;
  }
<% if repository.keycloak? -%>

  @javax.annotation.Nullable
  protected String getKeycloakServerURL( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.server-url" );
  }

  @javax.annotation.Nullable
  protected String getKeycloakPublicKey( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.public-key" );
  }

  @javax.annotation.Nullable
  protected String getKeycloakRealm( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.realm" );
  }

  @javax.annotation.Nullable
  protected String getKeycloakServiceUsername( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.service_username" );
  }

  @javax.annotation.Nullable
  protected String getKeycloakServicePassword( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.service_password" );
  }

  @javax.annotation.Nullable
  protected String getKeycloakClient( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.client" );
  }

  @javax.annotation.Nonnull
  protected String ensureProperty( @javax.annotation.Nullable final String prefix, @javax.annotation.Nonnull final String key )
  {
    final String p = prefix == null ? "" : prefix + ".";
    final String v = System.getProperties().getProperty( p + key, null );
    if( null == v && null != prefix )
    {
      return ensureProperty( null, key );
    }
    else if( null == v )
    {
      throw new IllegalStateException( "Unable to locate expected configuration property '" + p + key + "' required for tests" );
    }
    else
    {
      return v;
    }
  }
<% end -%>
}
