/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.ejb.qualified_boundary_implementation_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.LocalVariableCouldBeFinal" } )
<% if service.data_module.repository.ee.use_cdi? -%>
@javax.enterprise.context.ApplicationScoped
@javax.transaction.Transactional( javax.transaction.Transactional.TxType.REQUIRES_NEW )
@javax.enterprise.inject.Typed( <%= service.ejb.qualified_boundary_interface_name %>.class )
<% else -%>
@javax.ejb.TransactionAttribute( javax.ejb.TransactionAttributeType.REQUIRES_NEW )
@javax.ejb.Startup
@javax.ejb.Singleton( name = <%= service.ejb.qualified_boundary_interface_name %>.NAME )
@javax.ejb.ConcurrencyManagement( javax.ejb.ConcurrencyManagementType.BEAN )
<% end -%>
<% if service.ejb.boundary_interceptors.size > 0 -%>
@javax.interceptor.Interceptors( { <%= service.ejb.boundary_interceptors.collect{|i| "#{i}.class"}.join(', ') %> } )
<% end-%>
<% service.ejb.boundary_annotations.each do |annotation| -%>
@<%= annotation %>
<% end-%>
public class <%= service.ejb.boundary_implementation_name %>
<%= service.ejb.boundary_extends ? "  extends #{service.ejb.boundary_extends}\n" : ''-%>
  implements <%= service.ejb.qualified_boundary_interface_name %><% if service.ejb.remote? %>, <%= service.ejb.qualified_remote_service_name %><% end %><% if service.jmx? %>, <%= service.jmx.qualified_service_name %><% end %>
{
<% if service.jmx? -%>
  private javax.management.ObjectName _objectName;

  @javax.annotation.PostConstruct
  public void registerInJMX()
  {
    try
    {
      _objectName = new javax.management.ObjectName( <%= service.jmx.qualified_service_name %>.OBJECT_NAME );
      //noinspection EjbThisExpressionInspection
      java.lang.management.ManagementFactory.getPlatformMBeanServer().registerMBean( this, _objectName );
    }
    catch( final Exception e )
    {
      throw new IllegalStateException( "Unable to register <%= service.qualified_name %> service in JMX registry due to: " + e, e );
    }
  }

  @javax.annotation.PreDestroy
  public void unregisterFromJMX()
  {
    try
    {
      java.lang.management.ManagementFactory.getPlatformMBeanServer().unregisterMBean( _objectName );
    }
    catch( final Exception e )
    {
      throw new IllegalStateException( "Unable to unregister <%= service.qualified_name %> service from JMX registry due to: " + e, e );
    }
  }

<% end -%>
<% service.methods.collect {|method|method.parameters.select{|parameter|parameter.reference?}.collect{|parameter|parameter.referenced_entity}}.flatten.sort{|a,b| a.name.to_s <=> b.name.to_s }.uniq.each do |entity| -%>
  @javax.inject.Inject
  private <%= entity.dao.jpa.qualified_dao_service_name %> _<%= Reality::Naming.camelize(entity.dao.jpa.dao_service_name) %>;
<% end -%>
<% if service.methods.collect {|method|method.parameters.select{|parameter|parameter.remote_reference?}}.flatten.size > 0 -%>
  @javax.inject.Inject
  private org.realityforge.replicant.client.EntitySystem _$entitySystem;
<% end -%>
  @javax.inject.Inject
  private <%= service.ejb.qualified_service_name %> _service;
<% service.methods.each do |method|
%>
  @java.lang.Override
  public <%= annotated_type(method.return_value, :ejb, :boundary) %> <%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p| "final #{annotated_type(p, :ejb, :boundary)} #{p.name}" }.join(', ') %>)<%=
    method.exceptions.empty? ? '' : "\n    throws #{method.exceptions.collect{|e| e.ee.qualified_name}.join(', ')}"
%><%
   return_prefix = ''
   transform = ''
   if method.return_value.return_type != :void
     if method.return_value.ejb.java_type == method.return_value.ejb.java_type(:boundary)
       return_prefix = 'return '
     else
       return_prefix = "#{annotated_type(method.return_value, :ejb)} value = "
       if !method.return_value.collection?
         transform = "return #{modality_default_to_transport('value', method.return_value, :ejb)};"
       else
         return_prefix = "#{annotated_type(method.return_value, :ejb)} result = "
         transform = method.return_value.nullable? ? "if ( null == result ) { return null; }\n" : ''
         transform = transform + <<-JAVA
        #{annotated_type(method.return_value, :ejb, :boundary, :final => true)} $result = new java.util.#{method.return_value.collection_type == :set ? 'HashSet' : 'ArrayList' }<#{method.return_value.ejb.java_component_type(:boundary)}>();
        for( final #{method.return_value.ejb.java_component_type} k: result )
        {
          $result.add( #{
         method.return_value.reference? ? "k.get#{method.return_value.referenced_entity.primary_key.name}()" :
           method.return_value.remote_reference? ? "k.get#{method.return_value.referenced_remote_entity.primary_key.name}()" :
           method.return_value.enumeration.numeric_values? ? 'k.ordinal()' : 'k.name()'
         } );
        }
        return $result;
JAVA
       end
     end
   end
   transform = transform.size > 0 ? "    #{transform}\n" : transform
%>
  {
<% method.parameters.select{|parameter| parameter.reference? && parameter.collection?}.each do |parameter| -%>
    <%= annotated_type(parameter, :ejb, :default, :final => true) %> $<%= parameter.name %> = new java.util.<%=  parameter.collection_type == :set ? 'HashSet' : 'ArrayList' %><<%= parameter.ejb.java_component_type %>>();
    for( final <%= parameter.ejb.java_component_type(:boundary) %> id: <%= parameter.name %> )
    {
      $<%= parameter.name %>.add( _<%= Reality::Naming.camelize(parameter.referenced_entity.dao.jpa.dao_service_name) %>.getBy<%= parameter.referenced_entity.primary_key.name %>( id ) );
    }
<% end -%>
<% method.parameters.select{|parameter| parameter.remote_reference? && parameter.collection?}.each do |parameter| -%>
    <%= annotated_type(parameter, :ejb, :default, :final => true) %> $<%= parameter.name %> = new java.util.<%=  parameter.collection_type == :set ? 'HashSet' : 'ArrayList' %><<%= parameter.ejb.java_component_type %>>();
    for( final <%= parameter.ejb.java_component_type(:boundary) %> id: <%= parameter.name %> )
    {
      $<%= parameter.name %>.add( _$entitySystem.getRepository().getByID( <%= parameter.ejb.java_component_type %>.class, id ) );
    }
<% end -%>
    <%= return_prefix  %>_service.<%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect{|parameter| "#{modality_boundary_to_default(parameter.name, parameter, :ejb)}" }.join(', ') %>);
<%= transform -%>
  }
<% end -%>
}
