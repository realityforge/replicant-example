/* DO NOT EDIT: File is auto-generated */
package <%= to_package(data_module.sync.qualified_sync_temp_factory_name) %>;

@java.lang.SuppressWarnings( "unused" )
public class <%= data_module.sync.sync_temp_factory_name %>
{
  private final javax.persistence.EntityManager _entityManager;

  public <%= data_module.sync.sync_temp_factory_name %>( final javax.persistence.EntityManager entityManager )
  {
    if( null == entityManager )
    {
      throw new IllegalArgumentException( "entityManager is null" );
    }
    _entityManager = entityManager;
  }

  protected final javax.persistence.EntityManager getEntityManager()
  {
    return _entityManager;
  }
<% data_module.sync.entities_to_synchronize.each do |entity|

  sync_attributes = entity.sync.attributes_to_synchronize.collect{|a| entity.sync.sync_temp_entity.attribute_by_name(a.reference? ? "#{a.name}MappingID" : a.name) }
  immutable_sync_attributes = entity.sync.attributes_to_synchronize.select{|a| a.immutable? }.collect{|a| entity.sync.sync_temp_entity.attribute_by_name(a.reference? ? "#{a.name}MappingID" : a.name) }
-%>

  public void resetIdentity<%= entity.qualified_name.gsub('.','') %>()
  {
    getEntityManager().createStoredProcedureQuery( "<%= j_escape_string( "#{entity.sync.sync_temp_entity.data_module.sql.quoted_schema}.#{entity.sync.sync_temp_entity.data_module.sql.dialect.quote("spReseed#{ entity.name }")}") %>" ).execute();
  }

  public int deleteAll<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode )
  {
    return getEntityManager().createNativeQuery( "<%= j_escape_string( "DELETE FROM #{entity.sync.sync_temp_entity.sql.qualified_table_name} WHERE #{entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name} = ?") %>" ).setParameter( 1, mappingSourceCode ).executeUpdate();
  }

  @javax.annotation.Nonnull
  private String generate<%= entity.qualified_name.gsub('.','') %>Sql( @javax.annotation.Nonnull final String selectSql )
  {
    return
      "<%= j_escape_string( "WITH CTE(#{entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name }, #{sync_attributes.collect{|a| a.sql.quoted_column_name }.join(', ') }) AS ") %>\n" +
      "(\n" +
      selectSql + "\n" +
      ")\n" +
      "<%= j_escape_string( "INSERT INTO #{entity.sync.sync_temp_entity.sql.qualified_table_name} (#{entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name }, #{sync_attributes.collect{|a| a.sql.quoted_column_name }.join(', ') })") %>\n" +
      "  SELECT \n" +
      "    <%= j_escape_string( entity.sync.sync_temp_entity.attribute_by_name(:MappingSource).sql.quoted_column_name ) %>, \n" +
<%
  sync_attributes.each_with_index do |a, i|
 comma = i == sync_attributes.size - 1 ? '' : ','
  if immutable_sync_attributes.size > 0 && a.name == :MappingKey -%>
<% if data_module.repository.mssql? -%>
      "    SyncTemp.fnConvertBinaryToBase64(HASHBYTES('SHA1', <%= immutable_sync_attributes.collect{|other| "COALESCE(CONVERT(VARCHAR(50),#{j_escape_string(other.sql.quoted_column_name)}),'')"}.join(" + '.' + ") %>))<%= comma %> \n"+
<% elsif data_module.repository.pgsql? -%>
      "    md5(<%= immutable_sync_attributes.collect{|other| "COALESCE(CAST(#{j_escape_string(other.sql.quoted_column_name)} AS VARCHAR(50)),'')"}.join(" || '.' || ") %>)<%= comma %> \n"+
<% else -%>
<% raise 'Unsupported database variant' -%>
<% end -%>
<% else -%>
      "    <%= j_escape_string(a.sql.quoted_column_name) %><%= comma %> \n" +
<% end -%>
<% end -%>
      "  FROM CTE";
  }

  public int insert<%= entity.qualified_name.gsub('.','') %>BySql( @javax.annotation.Nonnull final String selectSql )
  {
    return executeUpdate( generate<%= entity.qualified_name.gsub('.','') %>Sql( selectSql ) );
  }

  public int insert<%= entity.qualified_name.gsub('.','') %>BySql( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final String selectSql )
  {
    return executeUpdate( mappingSourceCode, generate<%= entity.qualified_name.gsub('.','') %>Sql( selectSql ) );
  }

  public int insert<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.lang.String mappingID, <%=

  attribute_names = entity.sync.attributes_to_synchronize.collect{|a| a.name.to_s}

  attrs = []

  entity.attributes.select{|a| attribute_names.include?(a.name.to_s) }.collect do |a|
    if a.reference?
      sa = entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID")
      attr_name = Domgen::Naming.camelize(sa.name)
      attrs << attr_name
      "#{nullability_annotation(sa.nullable?)} final java.lang.String #{attr_name}"
    else
      sa = entity.sync.sync_temp_entity.attribute_by_name(a.name)
      attr_name = Domgen::Naming.camelize(sa.name)
      attrs << attr_name
      "#{annotated_type(a, :jpa, :transport, :final => true)} #{attr_name}"
    end
  end.join(', ')
%> )
  {
    return insert<%= entity.qualified_name.gsub('.','') %>( mappingSourceCode, mappingID, mappingID, <%= attrs.join(', ') %> );
  }

  public int insert<%= entity.qualified_name.gsub('.','') %>( @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final java.lang.String mappingKey, @javax.annotation.Nonnull final java.lang.String mappingID, <%=

  attribute_names = entity.sync.attributes_to_synchronize.collect{|a| a.name.to_s}

  entity.attributes.select{|a| attribute_names.include?(a.name.to_s) }.collect do |a|
    if a.reference?
      sa = entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID")
      "#{nullability_annotation(sa.nullable?)} final java.lang.String #{Domgen::Naming.camelize(sa.name)}"
    else
      sa = entity.sync.sync_temp_entity.attribute_by_name(a.name)
      "#{annotated_type(a, :jpa, :transport, :final => true)} #{Domgen::Naming.camelize(sa.name)}"
    end
  end.join(', ')
%> )
  {
    final String sql = generate<%= entity.qualified_name.gsub('.','') %>Sql( "<%= j_escape_string("SELECT ?,?,#{entity.sync.attributes_to_synchronize.select{|a| a.name.to_s != 'MappingID'}.collect{|a| '?'}.join(',')}") %>" );

    return getEntityManager().createNativeQuery( sql ).
      setParameter( 1, mappingSourceCode ).
      setParameter( 2, mappingKey ).
      setParameter( 3, mappingID ).
<% entity.attributes.select{|a| attribute_names.include?(a.name.to_s) }.each_with_index do |a, i| -%>
      setParameter( <%= i + 4 %>, <%= Domgen::Naming.camelize((a.reference? ? entity.sync.sync_temp_entity.attribute_by_name("#{a.name}MappingID") : entity.sync.sync_temp_entity.attribute_by_name(a.name)).name) %> ).
<% end -%>
      executeUpdate();
  }
<% end -%>

  public void insertMasterDataSourceIfRequired( @javax.annotation.Nonnull final String dataSource )
  {
    executeUpdate( dataSource,
                   "<%= j_escape_string("INSERT INTO #{data_module.repository.data_module_by_name(data_module.repository.sync.master_data_module).entity_by_name(:MappingSource).sql.qualified_table_name}(#{data_module.sql.dialect.quote(:Code)}) ") %>" +
                   "  SELECT @@MAPPING_SOURCE@@ " +
                   "<%= j_escape_string("  WHERE 0 = (SELECT COUNT(*) FROM #{data_module.repository.data_module_by_name(data_module.repository.sync.master_data_module).entity_by_name(:MappingSource).sql.qualified_table_name } WHERE #{data_module.sql.dialect.quote(:Code)} = @@MAPPING_SOURCE@@)") %>" );
  }

  protected int executeUpdate(  @javax.annotation.Nonnull final java.lang.String mappingSourceCode, @javax.annotation.Nonnull final String sql )
  {
    return executeUpdate( sql.replace( "@@MAPPING_SOURCE@@", "'" + mappingSourceCode + "'" ) );
  }

  protected int executeUpdate( @javax.annotation.Nonnull final String sql )
  {
    return getEntityManager().createNativeQuery( interpolateSql( sql ) ).executeUpdate();
  }

  @javax.annotation.Nonnull
  protected String interpolateSql( @javax.annotation.Nonnull final String sql )
  {
    return sql;
  }
}
