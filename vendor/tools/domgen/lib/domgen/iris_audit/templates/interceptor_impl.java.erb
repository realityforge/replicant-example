/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.iris_audit.qualified_interceptor_impl_name) %>;

@javax.annotation.Generated( "Domgen" )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "UPM_UNCALLED_PRIVATE_METHOD" } )
@javax.interceptor.Interceptor
@javax.annotation.Priority( iris.audit.server.service.AbstractLoggingInterceptor.PRIORITY )
public class <%= service.iris_audit.interceptor_impl_name %>
  extends iris.audit.server.service.AbstractLoggingInterceptor
{
  @javax.inject.Inject
  private iris.audit.server.service.AuditService _auditService;
  @javax.inject.Inject
  private iris.audit.server.service.AuditContext _context;
<% if service.jackson? -%>
  private transient final com.fasterxml.jackson.databind.ObjectMapper _jsonMapper = new com.fasterxml.jackson.databind.ObjectMapper();

  private javax.json.JsonValue toJsonValue( final Throwable throwable )
  {
    try
    {
      return javax.json.Json.createReader( new java.io.StringReader( _jsonMapper.writeValueAsString( throwable ) ) ).read();
    }
    catch ( final Throwable ignored )
    {
      return javax.json.Json.createObjectBuilder().add( "type", throwable.getClass().getName() ).add( "message", throwable.getMessage() ).build();
    }
  }

  private javax.json.JsonValue toJsonValue( final Object object )
  {
    try
    {
      return javax.json.Json.createReader( new java.io.StringReader( _jsonMapper.writeValueAsString( object ) ) ).read();
    }
    catch ( final Throwable ignored )
    {
      return javax.json.JsonValue.NULL;
    }
  }

<% end -%>

  @javax.annotation.Nonnull
  @java.lang.Override
  protected iris.audit.server.service.AuditService getAuditService()
  {
    return _auditService;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected iris.audit.server.service.AuditContext getAuditContext()
  {
    return _context;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected String getJobTypeName( @javax.annotation.Nonnull final javax.interceptor.InvocationContext context )
  {
    return "<%= service.name %>." + super.getJobTypeName( context );
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected String describeCall( @javax.annotation.Nonnull final java.lang.reflect.Method method,
                                 @javax.annotation.Nullable final java.lang.Object[] parameters,
                                 @javax.annotation.Nullable final java.lang.Object result,
                                 @javax.annotation.Nullable final java.lang.Throwable throwable )
  {
    switch ( method.getName() )
    {
<% service.methods.select{|m| m.iris_audit?}.each do |method| -%>
      case "<%= Reality::Naming.camelize(method.name) %>":
        return describe<%= method.name %>( parameters, result, throwable );
<% end -%>
      default:
        return "";
    }
  }
<% service.methods.select{|m| m.iris_audit?}.each do |method| -%>

  protected String describe<%= method.name %>( @javax.annotation.Nullable final java.lang.Object[] parameters, @javax.annotation.Nullable final java.lang.Object result, @javax.annotation.Nullable final java.lang.Throwable throwable )
  {
<% if method.jackson? -%>
    final javax.json.JsonObjectBuilder builder = javax.json.Json.createObjectBuilder();
    builder.add( "method", "<%= method.service.name %>.<%= method.name %>" );
<% if method.parameters.select{|parameter| parameter.iris_audit?}.size > 0 -%>
    assert null != parameters;
    final javax.json.JsonObjectBuilder params = javax.json.Json.createObjectBuilder();
<% method.parameters.each_with_index do |parameter, i| -%>
<% if parameter.iris_audit? -%>
    {
      final Object v = parameters[ <%= i %> ];
<% if parameter.nullable? -%>
      if ( null == v )
      {
        params.addNull( "<%= Reality::Naming.camelize(parameter.name) %>" );
      }
      else
      {
<% end -%>
<% p = parameter.reference? ? parameter.referenced_entity.primary_key : parameter.remote_reference? ? parameter.referenced_remote_entity.primary_key : parameter -%>
<% if parameter.collection_type == :none -%>
<% if p.non_standard_type? || p.text? -%>
        final String value = String.valueOf( v );
<% elsif p.real? -%>
        final double value = (double) v;
<% elsif p.integer? -%>
        final int value = (int) v;
<% elsif p.long? -%>
        final long value = (long) v;
<% elsif p.boolean? -%>
        final boolean value = (boolean) v;
<% elsif p.enumeration? -%>
        final String value = ( (<%= p.ejb.java_type %>) v ).name();
<% elsif p.datetime? || p.date? -%>
        final long value = ( (java.util.Date) v ).getTime();
<% elsif p.struct? -%>
        final javax.json.JsonValue value = toJsonValue( v );
<% end -%>
        params.add( "<%= Reality::Naming.camelize(parameter.name) %>", value );
<% else -%>
        final javax.json.JsonArrayBuilder paramBuilder = javax.json.Json.createArrayBuilder();
        for( final Object v2 : (java.util.Collection) v )
        {
<% if p.non_standard_type? || p.text? -%>
          final String value = String.valueOf( v2 );
<% elsif p.real? -%>
          final double value = (double) v2;
<% elsif p.integer? -%>
          final int value = (int) v2;
<% elsif p.long? -%>
          final long value = (long) v2;
<% elsif p.boolean? -%>
          final boolean value = (boolean) v2;
<% elsif p.enumeration? -%>
          final String value = ( (<%= p.ejb.java_component_type %>) v2 ).name();
<% elsif p.datetime? || p.date? -%>
          final long value = ( (java.util.Date) v2 ).getTime();
<% elsif p.struct? -%>
          final javax.json.JsonValue value = toJsonValue( v2 );
<% end -%>
          paramBuilder.add( value );
        }
        params.add( "<%= Reality::Naming.camelize(parameter.name) %>", paramBuilder );
<% end -%>
<% if parameter.nullable? -%>
      }
<% end -%>
    }
<% end -%>
<% end -%>
    builder.add( "parameters", params );
<% end -%>
    if ( null != throwable )
    {
      builder.add( "exception", toJsonValue( throwable ) );
    }
<% if method.return_value.return_type != :void -%>
    else
    {
<% if method.return_value.nullable? -%>
      if ( null == result )
      {
        params.addNull( "result" );
      }
      else
      {
<% end -%>
<% p = method.return_value.reference? ? method.return_value.referenced_entity.primary_key : method.return_value.remote_reference? ? method.return_value.referenced_remote_entity.primary_key : method.return_value -%>
<% if method.return_value.collection_type == :none -%>
<% if p.non_standard_type? || p.text? -%>
        final String value = String.valueOf( result );
<% elsif p.real? -%>
        final double value = (double) result;
<% elsif p.integer? -%>
        final int value = (int) result;
<% elsif p.long? -%>
        final long value = (long) result;
<% elsif p.boolean? -%>
        final boolean value = (boolean) result;
<% elsif p.enumeration? -%>
        final String value = ( (<%= p.ejb.java_type %>) result ).name();
<% elsif p.datetime? || p.date? -%>
        final long value = ( (java.util.Date) result ).getTime();
<% elsif p.struct? -%>
        final javax.json.JsonValue value = toJsonValue( result );
<% end -%>
        builder.add( "result", value );
<% else -%>
        final javax.json.JsonArrayBuilder paramBuilder = javax.json.Json.createArrayBuilder();
        for( final Object v2 : (java.util.Collection) result )
        {
<% if p.non_standard_type? || p.text? -%>
          final String value = String.valueOf( v2 );
<% elsif p.real? -%>
          final double value = (double) v2;
<% elsif p.integer? -%>
          final int value = (int) v2;
<% elsif p.long? -%>
          final long value = (long) v2;
<% elsif p.boolean? -%>
          final boolean value = (boolean) v2;
<% elsif p.enumeration? -%>
          final String value = ( (<%= p.ejb.java_component_type %>) v2 ).name();
<% elsif p.datetime? || p.date? -%>
          final long value = ( (java.util.Date) v2 ).getTime();
<% elsif p.struct? -%>
          final javax.json.JsonValue value = toJsonValue( v2 );
<% end -%>
          paramBuilder.add( value );
        }
        builder.add( "result", paramBuilder );
<% end -%>
<% if method.return_value.nullable? -%>
      }
<% end -%>
    }
<% end -%>
    final java.io.StringWriter writer = new java.io.StringWriter();
    javax.json.Json.createWriter( writer ).writeObject( builder.build() );
    return writer.toString();
<% else -%>
    final StringBuilder message = new StringBuilder();
    message.append( "Method: <%= method.qualified_name %>\n" );
<% if method.parameters.size > 0 -%>
    assert null != parameters;
<% method.parameters.each_with_index do |parameter, i| -%>
<% if parameter.iris_audit? -%>
    message.append( "Parameter: <%= parameter.name %> = " ).append( parameters[ <%= i %> ] ).append( "\n" );
<% end -%>
<% end -%>
<% end -%>
    if ( null != throwable )
    {
      message.append( "Exception: " ).append( throwable ).append( "\n" );
    }
<% if method.return_value.return_type != :void -%>
    else
    {
      message.append( "Result: " ).append( result ).append( "\n" );
    }
<% end -%>
    return message.toString();
<% end -%>
  }
<% end -%>
}
