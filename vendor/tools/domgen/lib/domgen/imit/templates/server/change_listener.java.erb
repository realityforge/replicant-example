/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_change_listener_name) %>;

public class <%= repository.imit.change_listener_name %>
{
  @javax.persistence.PostUpdate
  @javax.persistence.PostPersist
  public void postUpdate( final Object object )
  {
    if ( !getRegistry().getRollbackOnly() )
    {
      getRecorder().recordEntityMessageForEntity( object, true );
    }
  }

  /**
   * Collect messages before they are committed to the database with the
   * assumption that the remove will not fail. This allows us to traverse
   * the object graph before it is deleted. Note: This is a different strategy
   * from postUpdate() but PostUpdate may be changed in the future to match
   * remove hook. (Compare Pre versus Post hooks)
   *
   * @param object the entity removed.
   */
  @javax.persistence.PreRemove
  public void preRemove( final Object object )
  {
    if ( !getRegistry().getRollbackOnly() )
    {
      getRecorder().recordEntityMessageForEntity( object, false );
    }
  }

  /*
   * The registry and recorder are actually accessed via JNDI. The @Resource/@Inject annotations is ignored in production as JPA 2.0 does not
   * support it. However our Guice based test infrastructure uses it to populate and avoid instantiation of JNDI
   * resources.
   */
  @javax.annotation.Resource
  private javax.transaction.TransactionSynchronizationRegistry _registry;
  @javax.inject.Inject
  private <%= repository.imit.qualified_change_recorder_name %> _recorder;

  @java.lang.SuppressWarnings( "unchecked" )
  private static <T> T lookup( final String key )
  {
    try
    {
      return (T) new javax.naming.InitialContext().lookup( key );
    }
    catch ( final javax.naming.NamingException ne )
    {
      final String message = "Unable to locate element at " + key + " due to " + ne;
      throw new IllegalStateException( message, ne );
    }
  }

  private javax.transaction.TransactionSynchronizationRegistry getRegistry()
  {
    if ( null == _registry )
    {
      _registry = lookup("java:comp/TransactionSynchronizationRegistry");
    }
    return _registry;
  }

  private <%= repository.imit.qualified_change_recorder_name %> getRecorder()
  {
    if ( null == _recorder )
    {
      final javax.enterprise.inject.spi.BeanManager beanManager = lookup( "java:comp/BeanManager" );
      final javax.enterprise.inject.spi.Bean<?> bean = beanManager.getBeans( <%= repository.imit.qualified_change_recorder_name %>.class ).iterator().next();
      final javax.enterprise.context.spi.CreationalContext<?> creationalContext = beanManager.createCreationalContext( bean );
      _recorder = (<%= repository.imit.qualified_change_recorder_name %>) beanManager.getReference( bean, <%= repository.imit.qualified_change_recorder_name %>.class, creationalContext );
    }
    return _recorder;
  }
}
