/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_session_manager_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "unchecked", "PMD.UnusedPrivateField", "PMD.CollapsibleIfStatements", "PMD.UnusedFormalParameter", "PMD.UnusedLocalVariable" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"DLS_DEAD_LOCAL_STORE"})
<% if repository.ee.use_cdi? -%>
@javax.enterprise.context.ApplicationScoped
@javax.transaction.Transactional( javax.transaction.Transactional.TxType.REQUIRED )
@javax.enterprise.inject.Typed( { <%= repository.imit.qualified_poll_service_name %>.class, org.realityforge.replicant.server.EntityMessageEndpoint.class, org.realityforge.replicant.server.transport.ReplicantSessionManager.class, <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %>.class } )
<% else -%>
@javax.ejb.Singleton( name = <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %>.NAME )
@javax.ejb.ConcurrencyManagement( javax.ejb.ConcurrencyManagementType.BEAN )
@javax.ejb.Local( { <%= repository.imit.qualified_poll_service_name %>.class, org.realityforge.replicant.server.EntityMessageEndpoint.class, org.realityforge.replicant.server.transport.ReplicantSessionManager.class, <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %>.class } )
<% end -%>
public class <%= repository.imit.session_manager_name %>
  extends org.realityforge.replicant.server.transport.Replicant<%= repository.imit.secured? ? 'Secured' : '' -%>SessionManagerImpl
  implements <%= repository.service_by_name(repository.imit.subscription_manager).ejb.qualified_service_name %><% if repository.imit.poll_replicate_mode? %>, <%= repository.imit.qualified_poll_service_name %><% end %>
{
  private static final java.util.logging.Logger LOG = java.util.logging.Logger.getLogger( <%= repository.imit.session_manager_name %>.class.getName() );
<% if repository.imit.secured? -%>
  @javax.inject.Inject
  private org.realityforge.keycloak.sks.SimpleAuthService _authService;
<% end -%>
  @javax.inject.Inject
  private <%= repository.imit.qualified_graph_encoder_name %> _encoder;
<%
entities = repository.imit.graphs.select{|g| g.instance_root?}.collect{|g|repository.entity_by_name(g.instance_root)}
repository.imit.graphs.select{|g| !g.instance_root?}.each do |graph|
  graph.type_roots.each do |type_root_name|
    entities << repository.entity_by_name(type_root_name)
  end
end

entities.uniq.each do |entity| -%>
  @javax.inject.Inject
  private <%= entity.dao.jpa.qualified_dao_service_name %> _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository;
<% end -%>
  @javax.inject.Inject
  private <%= repository.service_by_name(repository.imit.session_context_service).ejb.qualified_service_name %> _context;
  @javax.annotation.Resource
  private javax.transaction.TransactionSynchronizationRegistry _registry;

  @javax.annotation.Nonnull
  @java.lang.Override
  protected javax.transaction.TransactionSynchronizationRegistry getRegistry()
  {
    return _registry;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  public org.realityforge.replicant.server.transport.SystemMetaData getSystemMetaData()
  {
    return <%= repository.imit.qualified_system_metadata_name %>.getSystemMetaData();
  }

  /**
   * Remove idle session changes. This is called by a scheduler.
   */
  @java.lang.Override
  public void removeIdleSessions()
  {
    final int maxIdleTime = 1000 * 60 * 5;
    final int removedSessions = removeIdleSessions( maxIdleTime );
    if ( 0 != removedSessions && LOG.isLoggable( java.util.logging.Level.INFO ) )
    {
      LOG.info( "Removed " + removedSessions + " idle sessions" );
    }
  }

  @java.lang.Override
  protected void processDeleteMessages( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessage message, @javax.annotation.Nonnull final java.util.Collection<org.realityforge.replicant.server.transport.ReplicantSession> sessions, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeAccumulator accumulator )
  {
    final java.util.Map<String, java.io.Serializable> routingKeys = message.getRoutingKeys();
<%
  repository.imit.graphs.select{|graph| graph.instance_root?}.each do |graph|

    instance_root = repository.entity_by_name(graph.instance_root)
    type = instance_root.primary_key.jpa.non_primitive_java_type
    %>
    final <%= type %> <%= graph.name %> = (<%= type %>) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_KEY );
    if ( null != <%= graph.name %> )
    {
      final org.realityforge.replicant.server.ChannelDescriptor descriptor = new org.realityforge.replicant.server.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>.ordinal(), <%= graph.instance_root? ? graph.name : 'null' %> );
<%
  extra_interest_filter = ''
  if graph.filtered?
    graph.routing_keys.each do |routing_key|
      var_name = Reality::Naming.camelize(routing_key.name)
      extra_interest_filter << ", #{var_name}"
      param_type = routing_key.target_attribute.jpa.non_primitive_java_type
      param_type = "java.util.List<#{param_type}>" if routing_key.multivalued?
-%>
      final <%= param_type %> <%= var_name %> = (<%= param_type %>) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY );
<%
    end
  end

  customize_filter = ", session#{graph.instance_root? ? ", #{graph.name}" : ''}"
  customize_filter = "#{customize_filter}, (#{Domgen::Java.java_type(graph.filter_parameter, :ee, :default)}) entry.getFilter()" if graph.filter_parameter?
  customize_filter = "#{customize_filter}#{extra_interest_filter}"
-%>
      for ( final org.realityforge.replicant.server.transport.ReplicantSession session : sessions )
      {
        final org.realityforge.replicant.server.transport.SubscriptionEntry entry = session.findSubscriptionEntry( descriptor );
        if ( null != entry )
        {
          final org.realityforge.replicant.server.EntityMessage m = _context.filterMessageOfInterestIn<%= graph.name %>Graph( message<%= customize_filter %> );
          if( null != m )
          {
            if( m.isDelete() )
            {
              if( <%= repository.imit.qualified_message_constants_name %>.<%= Reality::Naming.uppercase_constantize(instance_root.data_module.name.to_s) %>_<%= Reality::Naming.uppercase_constantize(instance_root.name.to_s) %> == m.getTypeID() )
              {
                performUnsubscribe( session, entry, true, accumulator.getChangeSet( session ) );
              }
              delinkDownstreamSubscriptions( session, entry, m, accumulator );
            }
          }
        }
      }
    }
<% end -%>
  }

  @java.lang.Override
  protected void processUpdateMessages( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessage message, @javax.annotation.Nonnull final java.util.Collection<org.realityforge.replicant.server.transport.ReplicantSession> sessions, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeAccumulator accumulator )
  {
    final java.util.Map<String, java.io.Serializable> routingKeys = message.getRoutingKeys();
<%
  repository.imit.graphs.each do |graph|

  type = 'Boolean'
  if graph.instance_root?
    instance_root = repository.entity_by_name(graph.instance_root)
    type = instance_root.primary_key.jpa.non_primitive_java_type
  end
-%>
    final <%= type %> <%= graph.name %> = (<%= type %>) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_KEY );
    if ( null != <%= graph.name %> )
    {
      final org.realityforge.replicant.server.ChannelDescriptor descriptor = new org.realityforge.replicant.server.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>.ordinal(), <%= graph.instance_root? ? graph.name : 'null' %> );
<%
  extra_interest_filter = ''
  if graph.filtered?
    graph.routing_keys.each do |routing_key|
      var_name = Reality::Naming.camelize(routing_key.name)
      extra_interest_filter << ", #{var_name}"
      param_type = routing_key.target_attribute.jpa.non_primitive_java_type
      param_type = "java.util.List<#{param_type}>" if routing_key.multivalued?
-%>
      final <%= param_type %> <%= var_name %> = (<%= param_type %>) routingKeys.get( <%= repository.imit.qualified_router_impl_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY );
<%
    end
  end

  customize_filter = ", session#{graph.instance_root? ? ", #{graph.name}" : ''}"
  customize_filter = "#{customize_filter}, (#{Domgen::Java.java_type(graph.filter_parameter, :ee, :default)}) entry.getFilter()" if graph.filter_parameter?
  customize_filter = "#{customize_filter}#{extra_interest_filter}"
-%>
<% if graph.cacheable? && !graph.external_cache_management? -%>
      deleteCacheEntry( descriptor );
<% end -%>
      for ( final org.realityforge.replicant.server.transport.ReplicantSession session : sessions )
      {
        final org.realityforge.replicant.server.transport.SubscriptionEntry entry = session.findSubscriptionEntry( descriptor );
        if ( null != entry )
        {
          final org.realityforge.replicant.server.EntityMessage m = _context.filterMessageOfInterestIn<%= graph.name %>Graph( message<%= customize_filter %> );
          if( null != m )
          {
            accumulator.addChange( session, new org.realityforge.replicant.server.Change( m, descriptor.getChannelID(), descriptor.getSubChannelID() ) );
          }
        }
      }
    }
<% end -%>
  }

  @java.lang.Override
  public void updateSubscription( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session,
                                  @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelDescriptor descriptor,
                                  @javax.annotation.Nullable final java.lang.Object filter,
                                  @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet )
  {
    super.updateSubscription( session, descriptor, filter, changeSet );
<% repository.imit.graphs.select{|graph| graph.instance_root? && graph.filter_parameter? && !graph.filter_parameter.immutable? }.each do |graph|
  instance_root = repository.entity_by_name(graph.instance_root)
  root_type = Domgen::Java.java_type(instance_root.primary_key, :ee, :default)
  processed = []
  graph.outward_graph_links.select{|graph_link| graph_link.auto?}.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filtered?
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
     next if processed.include?(key)
     processed << key
-%>
    if( iris.calendar.shared.net.CalendarReplicationGraph.RESOURCE.ordinal() == descriptor.getChannelID() )
    {
      assert null != filter;
      propagateFilterFrom<%= graph.name %>To<%= target_graph.name %>( session, (<%= root_type %>) descriptor.getSubChannelID(), (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter, changeSet );
    }
<% end -%>
<% end -%>
  }

  @java.lang.Override
  public void bulkUpdateSubscription( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session,
                                      final int channelID,
                                      @javax.annotation.Nonnull final java.util.Collection<java.io.Serializable> subChannelIDs,
                                      @javax.annotation.Nullable final java.lang.Object filter,
                                      @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet )
  {
    super.bulkUpdateSubscription( session, channelID, subChannelIDs, filter, changeSet );
<% repository.imit.graphs.select{|graph| graph.instance_root? && graph.filter_parameter? && !graph.filter_parameter.immutable? }.each do |graph|
  instance_root = repository.entity_by_name(graph.instance_root)
  root_type = Domgen::Java.java_type(instance_root.primary_key, :ee, :default)
  processed = []
  graph.outward_graph_links.select{|graph_link| graph_link.auto?}.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filtered?
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
     next if processed.include?(key)
     processed << key
-%>
    if( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>.ordinal() == channelID )
    {
      assert null != filter;
      for ( final java.io.Serializable id : subChannelIDs )
      {
        propagateFilterFrom<%= graph.name %>To<%= target_graph.name %>( session, (<%= root_type %>) id, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter, changeSet );
      }
    }
<% end -%>
<% end -%>
  }
<% repository.imit.graphs.select{|graph| graph.instance_root? && graph.filter_parameter? && !graph.filter_parameter.immutable? }.each do |graph|
  instance_root = repository.entity_by_name(graph.instance_root)
  root_type = Domgen::Java.java_type(instance_root.primary_key, :ee, :default)
  processed = []
  graph.outward_graph_links.select{|graph_link| graph_link.auto?}.each do |graph_link|
     target_graph = repository.imit.graph_by_name(graph_link.target_graph)
     next unless target_graph.filtered?
     key = "#{graph_link.source_graph}=>#{graph_link.target_graph}"
     next if processed.include?(key)
     processed << key
     instance_root = repository.entity_by_name(target_graph.instance_root)
     entity = repository.entity_by_name(graph.instance_root)
-%>

  private void propagateFilterFrom<%= graph.name %>To<%= target_graph.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final <%= root_type %> id, @javax.annotation.Nonnull final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet )
  {
    final <%= entity.jpa.qualified_name %> entity = _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.getBy<%= entity.primary_key.name %>( id );
    //Propogate the filter from <%= graph.name %> to downstream graph <%= target_graph.name %>
    for ( final <%= instance_root.jpa.qualified_name %> downstreamEntity : _context.getLinksToUpdateFor<%= graph_link.source_graph %>To<%= target_graph.name %>( entity, filter ) )
    {
      subscribe( session, new org.realityforge.replicant.server.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(target_graph.name) %>.ordinal(), downstreamEntity.get<%= instance_root.primary_key.name %>() ), true, filter, changeSet );
    }
  }
<% end -%>
<% end -%>
<% repository.imit.graphs.each do |graph| -%>
<% if !graph.instance_root? && !graph.external_data_load? -%>

  private void collect<%= graph.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessageSet messages )
  {
    // Add to a list so that when routing we limit the number of new entities that are loaded during routing
    final java.util.LinkedList<Object> objects = new java.util.LinkedList<>();
<% graph.type_roots.each do |type_root_name|
  type = repository.entity_by_name(type_root_name)
-%>
    objects.addAll( _<%= Reality::Naming.camelize("#{type.data_module.name}#{type.name}") %>Repository.findAll() );
<% end -%>
    _encoder.encodeObjects( messages, objects );
  }

<% end -%>
<% if graph.instance_root? -%>

  private org.realityforge.replicant.server.EntityMessageSet encode<%= graph.name %>( @javax.annotation.Nonnull final <%= repository.entity_by_name(graph.instance_root).jpa.qualified_name %> entity<%= graph.filter_parameter.nil? ? '' : ", final #{Domgen::Java.java_type(graph.filter_parameter, :ee, :default)} filter" %> )
  {
    final org.realityforge.replicant.server.EntityMessageSet messages = new org.realityforge.replicant.server.EntityMessageSet();
    _encoder.encode<%= graph.name %>( messages, entity<%= graph.filter_parameter.nil? ? '' : ', filter' %> );
    return messages;
  }
<% end -%>
<% if graph.filter_parameter && !graph.filter_parameter.immutable? -%>

  protected void collectDataFor<%= graph.name %>SubscriptionUpdate( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelDescriptor descriptor, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> originalFilter, final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter )
  {
<%
    if graph.instance_root?
      entity = repository.entity_by_name(graph.instance_root)
-%>
    final <%= entity.primary_key.jpa.java_type %> id = (<%= entity.primary_key.jpa.java_type %>) descriptor.getSubChannelID();
    final <%= entity.jpa.qualified_name %> entity = _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.getBy<%= entity.primary_key.name %>( id );
<% end %>
    _context.collectForFilterChange<%= graph.name %>( session, changeSet, descriptor, <%= graph.instance_root? ? 'entity, ' : '' %>originalFilter, filter );
  }
<% end -%>

<% if graph.cacheable? -%>  @javax.annotation.Nonnull
<% end -%>
  protected <% if graph.cacheable? -%>java.lang.String<% else -%>void<% end -%> collectDataFor<%= graph.name %>( @javax.annotation.<% if graph.cacheable? -%>Nullable<% else %>Nonnull<% end %> final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelDescriptor descriptor, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet<% if graph.filter_parameter -%>, final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %>)
  {
<%
    if graph.instance_root?
      entity = repository.entity_by_name(graph.instance_root)
-%>
    final org.realityforge.replicant.server.EntityMessageSet messages = new org.realityforge.replicant.server.EntityMessageSet();
    final <%= entity.primary_key.jpa.java_type %> id = (<%= entity.primary_key.jpa.java_type %>) descriptor.getSubChannelID();
    final <%= entity.jpa.qualified_name %> entity = _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.getBy<%= entity.primary_key.name %>( id );
    _encoder.encode<%= graph.name %>( messages, entity<%= graph.filter_parameter.nil? ? '' : ', filter' %> );
    changeSet.merge( descriptor, messages );
<%
    elsif !graph.external_data_load? && !graph.filtered?
-%>
    final org.realityforge.replicant.server.EntityMessageSet messages = new org.realityforge.replicant.server.EntityMessageSet();
    // Add to a list so that when routing we limit the number of new entities that are loaded during routing
    final java.util.LinkedList<Object> objects = new java.util.LinkedList<>();
<% graph.type_roots.each do |type_root_name|
  type = repository.entity_by_name(type_root_name)
-%>
    objects.addAll( _<%= Reality::Naming.camelize("#{type.data_module.name}#{type.name}") %>Repository.findAll() );
<% end -%>
    _encoder.encodeObjects( messages, objects );
    changeSet.merge( descriptor, messages );
<%
    else
-%>
    _context.collect<%= graph.name %>( descriptor, changeSet<%= graph.filter_parameter.nil? ? '' : ', filter' %> );
<%
    end
-%>
<% if graph.cacheable? -%>
    return <% if graph.external_cache_management? -%>_context.get<%= graph.name %>CacheKey()<% else %>java.lang.String.valueOf( java.lang.System.currentTimeMillis() )<% end %>;
<% end -%>
  }
<% end -%>

  @java.lang.Override
  protected java.lang.String collectDataForSubscribe( @javax.annotation.Nullable final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelDescriptor descriptor,@javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet,@javax.annotation.Nullable final Object filter )
  {
    <%
  repository.imit.graphs.each do |graph|
-%>if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>.ordinal() == descriptor.getChannelID() )
    {
      <% if graph.cacheable? -%>return <% end -%>collectDataFor<%= graph.name %>( session, descriptor, changeSet<% if graph.filter_parameter -%>, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter<% end %> );
<% unless graph.cacheable? -%>
      return null;
<% end -%>
    }
    else <% end -%>

    {
      throw new IllegalStateException( "collectDataForSubscribe called for unknown channel " + descriptor );
    }
  }

  @java.lang.Override
  protected boolean bulkCollectDataForSubscribe( @javax.annotation.Nullable final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.ArrayList<org.realityforge.replicant.server.ChannelDescriptor> descriptors, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, @javax.annotation.Nullable final Object filter, final boolean explicitSubscribe )
  {
    if( descriptors.isEmpty() )
    {
      return true;
    }
    final org.realityforge.replicant.server.ChannelDescriptor descriptor = descriptors.get( 0 );
    <%
  repository.imit.graphs.select{|graph| graph.instance_root?}.each do |graph|
-%>if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>.ordinal() == descriptor.getChannelID() )
    {
      return _context.bulkCollectDataFor<%= graph.name %>( session, descriptors, changeSet<% if graph.filter_parameter -%>, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter<% end %>, explicitSubscribe );
    }
    else <% end -%>

    {
      throw new IllegalStateException( "bulkCollectDataForSubscribe called for unknown channel " + descriptor );
    }
  }

  @java.lang.Override
  protected boolean bulkCollectDataForSubscriptionUpdate( @javax.annotation.Nullable final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.ArrayList<org.realityforge.replicant.server.ChannelDescriptor> descriptors, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, @javax.annotation.Nullable final Object originalFilter, @javax.annotation.Nullable final Object filter )
  {
    if( descriptors.isEmpty() )
    {
      return true;
    }
    final org.realityforge.replicant.server.ChannelDescriptor descriptor = descriptors.get( 0 );
    <%
  repository.imit.graphs.select{|graph| graph.instance_root? && graph.filtered? && !graph.filter_parameter.immutable?}.each do |graph|
-%>if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>.ordinal() == descriptor.getChannelID() )
    {
      return _context.bulkCollectDataFor<%= graph.name %>Update( session, descriptors, changeSet, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) originalFilter, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter );
    }
    else <%
  end
  repository.imit.graphs.select{|graph| graph.instance_root? && (!graph.filtered? || graph.filter_parameter.immutable?)}.each do |graph|
-%>if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>.ordinal() == descriptor.getChannelID() )
    {
      //Needed so that it falls back to to the normal update process for unfiltered graphs.
      //This usually used to flip explicitSubscribed flag
      return false;
    }
    else <% end -%>

    {
      throw new IllegalStateException( "bulkCollectDataForSubscriptionUpdate called for unknown channel " + descriptor );
    }
  }

  @java.lang.Override
  protected void collectDataForSubscriptionUpdate( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session,
                                                   @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelDescriptor descriptor,
                                                   @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet,
                                                   @javax.annotation.Nullable final Object originalFilter,
                                                   @javax.annotation.Nullable final Object filter )
  {
    <%
  repository.imit.graphs.select{|graph| graph.filter_parameter && !graph.filter_parameter.immutable?}.each do |graph|
-%>if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>.ordinal() == descriptor.getChannelID() )
    {
      collectDataFor<%= graph.name %>SubscriptionUpdate( session, descriptor, changeSet, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) originalFilter, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) filter );
    }
    else <% end -%>

    {
      throw new IllegalStateException( "collectDataForSubscriptionUpdate called for unknown channel " + descriptor );
    }
  }

  @java.lang.Override
  protected boolean shouldFollowLink( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.SubscriptionEntry sourceEntry, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChannelDescriptor target )
  {
    final org.realityforge.replicant.server.ChannelDescriptor source = sourceEntry.getDescriptor();
    final int sourceChannelID = source.getChannelID();
    final int targetChannelID = target.getChannelID();
    <% repository.imit.graphs.select{|g| g.instance_root? }.collect{|g| g.inward_graph_links.select{|graph_link| graph_link.auto?} }.flatten.each do |graph_link|
         graph = repository.imit.graph_by_name(graph_link.target_graph)
         source_graph = repository.imit.graph_by_name(graph_link.source_graph)
         entity = repository.entity_by_name(graph.instance_root)
         if graph.filter_parameter && graph.instance_root? && source_graph.instance_root?
%>if ( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(source_graph.name) %>.ordinal() == source.getChannelID() && <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>.ordinal() == target.getChannelID() )
    {
      final <%= entity.primary_key.jpa.java_type %> targetID = (<%= entity.primary_key.jpa.java_type %>) target.getSubChannelID();
      final <%= entity.jpa.qualified_name %> entity = _<%= Reality::Naming.camelize("#{entity.data_module.name}#{entity.name}") %>Repository.getByID( targetID );
      return _context.shouldFollowLinkFrom<%= graph_link.source_graph %>To<%= graph.name %>( entity, (<%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %>) sourceEntry.getFilter() );
    }
    else <%
    end
    end
-%>

    {
      throw new IllegalStateException( "shouldFollowLink called for link between channel " + source + " and " + target + " and the target has no filter or the link is unknown." );
    }
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected java.lang.RuntimeException newBadSessionException( @javax.annotation.Nonnull final String sessionID )
  {
    return new <%= repository.exception_by_name(repository.imit.invalid_session_exception).ee.qualified_name %>();
  }
<% if repository.imit.poll_replicate_mode? -%>

  @java.lang.Override
  @javax.annotation.Nullable
  public String poll( @javax.annotation.Nonnull final String clientID, final int lastSequenceAcked )
    throws <%= repository.exception_by_name(repository.imit.invalid_session_exception).ee.qualified_name %>
  {
    return pollJsonData( ensureSession( clientID ), lastSequenceAcked );
  }
<% end -%>
<% if repository.imit.secured? -%>

  @javax.annotation.Nonnull
  @java.lang.Override
  protected org.realityforge.keycloak.sks.SimpleAuthService getAuthService()
  {
    return _authService;
  }
<% end -%>
}
