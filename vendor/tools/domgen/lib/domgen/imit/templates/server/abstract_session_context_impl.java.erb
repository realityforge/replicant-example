/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_abstract_session_context_impl_name) %>;

/**
 * Subclass this class using the following conventions.
 *
 * <pre>
 * \@ApplicationScoped
 * \@Transactional( Transactional.TxType.REQUIRED )
 * \@Typed( <%= repository.service_by_name(repository.imit.session_context_service).ejb.service_name %>.class )
 * public class <%= repository.service_by_name(repository.imit.session_context_service).ejb.service_implementation_name %>
 *   extends <%= repository.imit.abstract_session_context_impl_name %>
 * {
 * ...
 * }
 * </pre>
 */
@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "PMD.SwitchStmtsShouldHaveDefault" } )
public abstract class <%= repository.imit.abstract_session_context_impl_name %>
  extends org.realityforge.replicant.server.transport.AbstractSessionContextImpl
  implements <%= repository.service_by_name(repository.imit.session_context_service).ejb.qualified_service_name %>
{
<% repository.imit.graphs.select{|graph|graph.instance_root?}.each do |graph| -%>
  @javax.transaction.Transactional( javax.transaction.Transactional.TxType.NOT_SUPPORTED )
  @java.lang.Override
  public boolean bulkCollectDataFor<%= graph.name %>( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.List<org.realityforge.replicant.server.ChannelDescriptor> descriptors, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet<% if graph.filter_parameter -%>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter<% end %>, final boolean explicitSubscribe )
  {
    return false;
  }

<% end -%>
<% repository.imit.graphs.select{|graph|graph.instance_root? && graph.filtered? && !graph.filter_parameter.immutable?}.each do |graph| -%>
  @javax.transaction.Transactional( javax.transaction.Transactional.TxType.NOT_SUPPORTED )
  @java.lang.Override
  public boolean bulkCollectDataFor<%= graph.name %>Update( @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session, @javax.annotation.Nonnull final java.util.List<org.realityforge.replicant.server.ChannelDescriptor> descriptors, @javax.annotation.Nonnull final org.realityforge.replicant.server.ChangeSet changeSet, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> originalFilter, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter )
  {
    return false;
  }

<% end -%>
<%
repository.imit.graphs.each do |graph|
  extra_params = ''
  extra_args = ''
  if graph.filtered?
    graph.routing_keys.each do|routing_key|
      nullable = !graph.instance_root?||!(routing_key.imit_attribute.attribute.entity.qualified_name==graph.instance_root)
      type = Domgen::Java.non_primitive_java_type(routing_key.imit_attribute.attribute, :ee, :boundary)
      type = "java.util.List<#{type}>" if routing_key.multivalued?
      extra_params += ", #{nullability_annotation(nullable)} final #{type} #{Reality::Naming.camelize(routing_key.name)}"
      extra_args += ", #{Reality::Naming.camelize(routing_key.name)}"
    end
  end
  -%>
  protected <%= graph.filtered? ? 'abstract ' : '' %>boolean is<%= graph.name %>Interesting( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessage message, @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session <% if graph.instance_root? %>, @javax.annotation.Nonnull final <% entity = repository.entity_by_name(graph.instance_root) %> <%= entity.primary_key.jpa.non_primitive_java_type %> <%= Reality::Naming.camelize("#{entity.name}#{entity.primary_key.name}") %> <% end %><%if graph.filter_parameter? %>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter <%end %><%= extra_params %> )<%= graph.filtered? ? ';' : '' %>
<% unless graph.filtered? -%>
  {
    return true;
  }
<% end -%>

  @java.lang.Override
  @javax.annotation.Nullable
  public org.realityforge.replicant.server.EntityMessage filterMessageOfInterestIn<%= graph.name %>Graph( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessage message, @javax.annotation.Nonnull final org.realityforge.replicant.server.transport.ReplicantSession session <% if graph.instance_root? %>, @javax.annotation.Nonnull final <%entity = repository.entity_by_name(graph.instance_root) %> <%= entity.primary_key.jpa.non_primitive_java_type %> <%= Reality::Naming.camelize("#{entity.name}#{entity.primary_key.name}") %> <% end %><%if graph.filter_parameter? %>, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter <%end %><%= extra_params %> )
  {
    if ( is<%= graph.name %>Interesting( message, session<% if graph.instance_root? %>, <% entity = repository.entity_by_name(graph.instance_root) %> <%= Reality::Naming.camelize("#{entity.name}#{entity.primary_key.name}") %> <% end %><%if graph.filter_parameter? %>, filter <% end %><%= extra_args %> ) )
    {
<%
  entities = graph.included_entities.collect{|n| repository.entity_by_name(n) }.select{|e| e.sync? && e.sync.transaction_time?}
  if entities.size > 0
-%>
      if ( message.isUpdate() )
      {
        switch ( message.getTypeID() )
        {
<% entities.each do |entity| -%>
          case <%= repository.imit.qualified_message_constants_name %>.<%= Reality::Naming.uppercase_constantize(entity.data_module.name.to_s) %>_<%= Reality::Naming.uppercase_constantize(entity.name.to_s) %>:
<% end -%>
          {
            final java.util.Map<String, java.io.Serializable> attributeValues = message.getAttributeValues();
            assert null != attributeValues;
            if ( null != attributeValues.get( "DeletedAt" ) )
            {
              return convertToDeleteMessage( message );
            }
          }
        }
      }
<% end if repository.sync? -%>
      return message;
    }
    else
    {
      return null;
    }
  }

<% end -%>
<% repository.imit.graphs.each do |graph| -%>
<%
  if graph.instance_root? && graph.filtered?
graph.reachable_entities.collect { |n| repository.entity_by_name(n) }.select { |entity| entity.imit? && entity.concrete? }.each do |entity|
  outgoing_links = entity.referencing_attributes.select { |a| a.imit? && a.imit.client_side? && a.inverse.imit.traversable? && a.jpa? && a.inverse.jpa.java_traversable? && a.inverse.imit.replication_edges.include?(graph.name) }
  outgoing_links.each do |a|
    if a.inverse.multiplicity == :many
 -%>
  @java.lang.Override
  public java.util.List<<%= a.entity.jpa.qualified_name %>> get<%= a.inverse.attribute.qualified_name.gsub('.', '') %>In<%= graph.name %>Graph( @javax.annotation.Nonnull final <%= a.referenced_entity.jpa.qualified_name %> entity, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter )
  {
    return entity.get<%= Reality::Naming.pascal_case(Reality::Naming.pluralize(a.inverse.name)) %>();
  }

<%
    elsif a.inverse.multiplicity == :one || a.inverse.multiplicity == :zero_or_one
 -%>
  @java.lang.Override
  public <%= a.entity.jpa.qualified_name %> get<%= a.inverse.attribute.qualified_name.gsub('.', '') %>In<%= graph.name %>Graph( @javax.annotation.Nonnull final <%= a.referenced_entity.jpa.qualified_name %> entity, <%= nullability_annotation(graph.filter_parameter.nullable?) %> final <%= Domgen::Java.java_type(graph.filter_parameter, :ee, :default) %> filter )
  {
    return entity.get<%= Reality::Naming.pascal_case(a.inverse.name) %>();
  }

<%
    end
  end
end
end
-%>
<% end -%>
  @javax.annotation.Nonnull
  protected org.realityforge.replicant.server.EntityMessage convertToDeleteMessage( @javax.annotation.Nonnull final org.realityforge.replicant.server.EntityMessage message )
  {
    return new org.realityforge.replicant.server.EntityMessage( message.getID(), message.getTypeID(), message.getTimestamp(), message.getRoutingKeys(), null, message.getLinks() );
  }
}
