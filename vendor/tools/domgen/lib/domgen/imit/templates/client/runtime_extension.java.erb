/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_runtime_extension_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "PMD.CollapsibleIfStatements" } )
public interface <%= repository.imit.runtime_extension_name %>
  extends org.realityforge.replicant.client.runtime.BaseRuntimeExtension
{
<% repository.imit.graphs.each do |graph| -%>
<% if graph.instance_root? -%>
  default void unsubscribeUnknown<%= repository.name%><%= graph.name %>Graphs( @javax.annotation.Nonnull final org.realityforge.replicant.client.runtime.Scope scope, @javax.annotation.Nonnull final java.util.Collection<<%= repository.entity_by_name(graph.instance_root).primary_key.jpa.non_primitive_java_type %>> existing )
  {
    for ( final org.realityforge.replicant.client.runtime.Subscription subscription : scope.getRequiredSubscriptions() )
    {
      final org.realityforge.replicant.client.ChannelDescriptor descriptor = subscription.getDescriptor();
      if ( descriptor.getGraph().equals( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> ) )
      {
        if ( !existing.remove( descriptor.getID() ) )
        {
          subscription.release();
        }
      }
    }
  }
<% unless graph.filtered? -%>

  @javax.annotation.Nonnull
  default org.realityforge.replicant.client.runtime.SubscriptionReference subscribeTo<%= repository.name%><%= graph.name %>Graph( @javax.annotation.Nonnull final org.realityforge.replicant.client.runtime.Scope scope, @javax.annotation.Nonnull final <%= repository.entity_by_name(graph.instance_root).primary_key.jpa.non_primitive_java_type %> id )
  {
    return subscribe( scope, new org.realityforge.replicant.client.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %>, id ), null );
  }

  default void subscribeTo<%= repository.name%><%= graph.name %>Graphs( @javax.annotation.Nonnull final org.realityforge.replicant.client.runtime.Scope scope, @javax.annotation.Nonnull final java.util.Collection<<%= repository.entity_by_name(graph.instance_root).primary_key.jpa.non_primitive_java_type %>> ids )
  {
    for ( final <%= repository.entity_by_name(graph.instance_root).primary_key.jpa.non_primitive_java_type %> id : ids )
    {
      subscribeTo<%= repository.name%><%= graph.name %>Graph( scope, id );
    }
  }
<% end -%>
<% else -%>
<% unless graph.filtered? -%>
  @javax.annotation.Nonnull
  default org.realityforge.replicant.client.runtime.SubscriptionReference subscribeTo<%= repository.name%><%= graph.name %>Graph( @javax.annotation.Nonnull final org.realityforge.replicant.client.runtime.Scope scope )
  {
    return subscribe( scope, new org.realityforge.replicant.client.ChannelDescriptor( <%= repository.imit.qualified_graph_enum_name %>.<%= Reality::Naming.uppercase_constantize(graph.name) %> ), null );
  }
<% end -%>
<% end -%>

<% end -%>
}
