/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_change_mapper_name) %>;

/**
 * Utility class that applies the changes to the entities defined by the "<%= repository.name %>" repository.
 */
@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.UnusedPrivateField", "PMD.SingularField" } )
public final class <%= repository.imit.change_mapper_name %>
  implements org.realityforge.replicant.client.ChangeMapper
{
<% repository.data_modules.select{|data_module| data_module.imit? }.each do |data_module|
%>  private final <%= data_module.imit.qualified_mapper_name %> _<%= Reality::Naming.camelize(data_module.name) %>;
<% end %>
  @javax.inject.Inject
  public <%= repository.imit.change_mapper_name%>( <%= repository.data_modules.select{|data_module| data_module.imit? }.collect { |data_module| "final #{data_module.imit.qualified_mapper_name} #{Reality::Naming.camelize(data_module.name)}" }.join(', ') %> )
  {
<% repository.data_modules.select{|data_module| data_module.imit? }.each do |data_module|
%>    _<%= Reality::Naming.camelize(data_module.name) %> = <%= Reality::Naming.camelize(data_module.name) %>;
<% end %>
  }

  public Object applyChange( final org.realityforge.replicant.client.Change change )
  {
    switch( change.getTypeID() )
    {
<%
repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module|
  data_module.entities.each do |entity|
    if entity.imit? && entity.concrete?
%>      case <%= entity.imit.qualified_name %>.TRANSPORT_ID: return _<%= Reality::Naming.camelize(entity.data_module.name) %>.applyChangeTo<%= entity.name %>( change );
<%
    end
  end
end
%>
      default: throw new IllegalArgumentException( "Unknown typeID = " + change.getTypeID() );
    }
  }
}
