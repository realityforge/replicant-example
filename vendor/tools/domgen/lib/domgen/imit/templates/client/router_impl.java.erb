/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_client_router_impl_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "unchecked", "PMD.UnusedFormalParameter", "PMD.UnnecessaryLocalBeforeReturn", "PMD.UnnecessaryLocalBeforeReturn" } )
public class <%= repository.imit.client_router_impl_name %>
  implements <%= repository.imit.qualified_client_router_interface_name %>
{
<%
  repository.imit.graphs.select{|graph|graph.filtered?}.each do |graph|
    graph.routing_keys.each do |routing_key|
-%>
  private void put_<%= graph.name %>_<%= routing_key.name %>( @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> map, final <%= routing_key.target_attribute.imit.non_primitive_java_type %> value )
  {
<% if routing_key.multivalued? -%>
    java.util.ArrayList<<%= routing_key.target_attribute.imit.non_primitive_java_type %>> keys = (java.util.ArrayList<<%= routing_key.target_attribute.imit.non_primitive_java_type %>>) map.get( <%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY );
    if( null == keys )
    {
      keys = new java.util.ArrayList<<%= routing_key.target_attribute.imit.non_primitive_java_type %>>();
      map.put( <%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY, keys );
    }
    keys.add( value );
<% else -%>
    map.put( <%= Reality::Naming.uppercase_constantize(graph.name) %>_<%= Reality::Naming.uppercase_constantize(routing_key.name) %>_KEY, value );
<% end -%>
  }

<%
      unless routing_key.target_nullsafe?
        index = 0
        a = routing_key.imit_attribute.attribute
        routing_key.path.each do |path_element|
          next_attribute = a.referenced_entity.attribute_by_name(routing_key.get_attribute_name_from_path_element?(path_element))
-%>
  private void route_<%= graph.name %>_<%= routing_key.name %>_<%= index %>( @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> map, <%= nullability_annotation(a.nullable?) %> final <%= a.referenced_entity.imit.qualified_name %> value )
  {
<% if a.nullable? -%>
    if( null != value )
    {
<% end -%>
<% if routing_key.is_path_element_recursive?(path_element) -%>
    route_<%= graph.name %>_<%= routing_key.name %>_<%= index + 1 %>( map, value );
    route_<%= graph.name %>_<%= routing_key.name %>_<%= index %>( map, value.<%= getter_for(next_attribute) %> );
<% else -%>
    route_<%= graph.name %>_<%= routing_key.name %>_<%= index + 1 %>( map, value.<%= getter_for(next_attribute) %> );
<% end -%>
<% if a.nullable? -%>
    }
<% end -%>
  }

<%
          index = index + 1
          a = next_attribute
        end
-%>
  private void route_<%= graph.name %>_<%= routing_key.name %>_<%= index %>( @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> map, <%= nullability_annotation(a.nullable?) %> final <%= a.referenced_entity.imit.qualified_name %> value )
  {
<% if a.nullable? -%>
    if( null != value )
    {
<% end -%>
    put_<%= graph.name %>_<%= routing_key.name %>( map, value.<%= getter_for(a.referenced_entity.attribute_by_name(routing_key.attribute_name)) %> );
<% if a.nullable? -%>
    }
<% end -%>
  }

<%
      end
    end
  end
-%>
  @java.lang.Override
  @javax.annotation.Nonnull
  public java.util.Map<String, java.io.Serializable> route( @javax.annotation.Nonnull final Object entity )
  {
  <%
repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module|
  data_module.entities.select { |entity| entity.imit? && entity.concrete? }.each do |entity|
-%> if( entity instanceof <%= entity.imit.qualified_name %> )
    {
      return route<%= entity.name %>( (<%= entity.imit.qualified_name %>) entity );
    }
    else<%
  end
end
-%>

    {
      return java.util.Collections.emptyMap();
    }
  }
<%
repository.data_modules.select { |data_module| data_module.imit? }.each do |data_module|
  data_module.entities.select { |entity| entity.imit? && entity.concrete? }.each do |entity|
    outgoing_links = entity.attributes.select {|a| a.reference? && a.imit? && a.inverse.imit.traversable? && a.imit.client_side? && a.referenced_entity.imit?}
 -%>

  @java.lang.Override
  @javax.annotation.Nonnull
  public java.util.Map<String, java.io.Serializable> route<%= entity.name %>( @javax.annotation.Nonnull final <%= entity.imit.qualified_name %> entity )
  {
    final java.util.HashMap<String, java.io.Serializable> map = new java.util.HashMap<>();
<% entity.imit.replication_graphs.each do |graph| -%>
    _route<%= graph.name %>_<%= entity.name %>( map, entity );
<% end -%>
    return map;
  }
<% entity.imit.replication_graphs.each do |graph| -%>

  private void _route<%= graph.name %>_<%= entity.name %>( @javax.annotation.Nonnull final java.util.Map<String, java.io.Serializable> map, @javax.annotation.Nonnull final <%= entity.imit.qualified_name %> entity )
  {
<% if graph.filtered? -%>
<%
  graph.routing_keys.select{|rk| rk.imit_attribute.attribute.entity.name == entity.name}.each do |routing_key|
    if !routing_key.reference?
-%>
    put_<%= graph.name %>_<%= routing_key.name %>( map, entity.<%= getter_for(routing_key.imit_attribute.attribute) %> );
<% elsif routing_key.target_nullsafe?
    a = routing_key.imit_attribute.attribute
    v = ''
    path = ["entity.#{getter_for(a)}"]
    v = "#{path.join('.')} == null ? null : " if a.nullable?
    routing_key.path.each do |path_element|
      a = a.referenced_entity.attribute_by_name(routing_key.get_attribute_name_from_path_element?(path_element))
      path << getter_for(a)
      if a.nullable?
        v = "#{v}#{path.join('.')} == null ? null : "
      end
    end
    path << getter_for(a.referenced_entity.attribute_by_name(routing_key.attribute_name))
    v = "#{v}#{path.join('.')}"
-%>
    put_<%= graph.name %>_<%= routing_key.name %>( map, <%= v %> );
<% else -%>
    route_<%= graph.name %>_<%= routing_key.name %>_0( map, entity.<%= getter_for(routing_key.imit_attribute.attribute) %> );
<% end -%>
<% end -%>
<% end -%>
<% if graph.instance_root? && graph.instance_root.to_s == entity.qualified_name.to_s -%>
    map.put( <%= Reality::Naming.uppercase_constantize(graph.name) %>_KEY, entity.<%= getter_for(entity.primary_key) %> );
<% elsif graph.instance_root? -%>
<% outgoing_links.select{|a| a.referenced_entity.imit.replication_graphs.include?(graph) }.each do |outgoing_link| -%>
<% if outgoing_link.nullable? -%>
    {
      final <%= outgoing_link.imit.java_type %> v = entity.<%= getter_for(outgoing_link) %>;
      if( null != v )
      {
        _route<%= graph.name %>_<%= outgoing_link.referenced_entity.name %>( map, v );
      }
    }
<% else -%>
    _route<%= graph.name %>_<%= outgoing_link.referenced_entity.name %>( map, entity.<%= getter_for(outgoing_link) %> );
<% end -%>
<% end -%>
<% else -%>
    map.put( <%= Reality::Naming.uppercase_constantize(graph.name) %>_KEY, Boolean.TRUE );
<% end -%>
  }
<% end -%>
<% end -%>
<% end -%>
}
