/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_gwt_data_loader_service_interface_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public interface <%= repository.imit.gwt_data_loader_service_interface_name %>
  extends org.realityforge.replicant.client.transport.DataLoaderService
{
<%
  repository.imit.graphs.each do |graph|
  key = "#{repository.imit.qualified_graph_enum_name}.#{Reality::Naming.uppercase_constantize(graph.name)}"
  graph_id = 'null'
  param = ''
  if graph.instance_root?
    # Names are fully qualified so take any random data module
    entity = repository.entity_by_name(graph.instance_root)
    type = entity.primary_key.imit.java_type
    graph_id = "#{Reality::Naming.camelize(entity.name)}#{entity.primary_key.name}"
    param = "@javax.annotation.Nonnull final #{type} #{graph_id}"
  end
  update_param = param.dup
  filter_var = 'null'
  if graph.filter_parameter
    p = graph.filter_parameter
    java_type = "#{nullability_annotation(p.nullable?)} final #{Domgen::Java.java_type(p, :gwt, :default)}"
    update_param = "#{update_param}, " if update_param.size > 0
    filter_var = 'filter'
    filter_param = "#{java_type} #{filter_var}"
    update_param = "#{update_param}#{filter_param}"
  end
-%>
  default boolean isSubscribedTo<%= graph.name %>(<%= param %>)
  {
    return isSubscribed( new org.realityforge.replicant.client.ChannelDescriptor( <%= key %><%= graph.instance_root? ? ", #{graph_id}" : '' %> ) );
  }

  default void subscribeTo<%= graph.name %>(<%= update_param %>)
  {
    requestSubscribe( new org.realityforge.replicant.client.ChannelDescriptor( <%= key %>, <%= graph_id %> ), <%= filter_var %> );
  }

  default void unsubscribeFrom<%= graph.name %>(<%= param %>)
  {
    requestUnsubscribe( new org.realityforge.replicant.client.ChannelDescriptor( <%= key %>, <%= graph_id %> ) );
  }
<% if graph.filter_parameter -%>

  default void update<%= graph.name %>Subscription(<%= update_param %>)
  {
    requestSubscriptionUpdate( new org.realityforge.replicant.client.ChannelDescriptor( <%= key %>, <%= graph_id %> ), filter );
  }
<% end -%>
<% end -%>
}
