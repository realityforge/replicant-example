/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.imit.qualified_ee_data_loader_listener_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "PMD.SwitchStmtsShouldHaveDefault" } )
public class <%= repository.imit.ee_data_loader_listener_name %>
  extends org.realityforge.replicant.client.ee.EeDataLoaderListener
{
  private final org.realityforge.replicant.client.EntityRepository _repository;

  public <%= repository.imit.ee_data_loader_listener_name %>( @javax.annotation.Nonnull final javax.enterprise.inject.spi.BeanManager beanManager, @javax.annotation.Nonnull final org.realityforge.replicant.client.EntityRepository repository )
  {
    super( beanManager, new <%= repository.ee.qualified_cdi_qualifier_literal_name %>(), "<%= repository.name %>" );
    _repository = java.util.Objects.requireNonNull( repository );
  }

  @java.lang.Override
  public void onSubscribeStarted( @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.DataLoaderService service, @javax.annotation.Nonnull final org.realityforge.replicant.client.ChannelDescriptor descriptor )
  {
    if ( !(descriptor.getGraph() instanceof <%= repository.imit.qualified_graph_enum_name %>) )
    {
      return;
    }
    switch ( (<%= repository.imit.qualified_graph_enum_name %>) descriptor.getGraph() )
    {
<% repository.imit.graphs.each do |graph| -%>
      case <%= Reality::Naming.uppercase_constantize(graph.name) %>:
        fireEvent( new <%= graph.subscribe_started_message.ee.qualified_name %>(<% if graph.instance_root? -%> (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>) descriptor.getID() <% end %>) );
        break;
<% end -%>
    }
  }

  @java.lang.Override
  public void onSubscribeCompleted( @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.DataLoaderService service, @javax.annotation.Nonnull final org.realityforge.replicant.client.ChannelDescriptor descriptor )
  {
    if ( !(descriptor.getGraph() instanceof <%= repository.imit.qualified_graph_enum_name %>) )
    {
      return;
    }
    switch ( (<%= repository.imit.qualified_graph_enum_name %>) descriptor.getGraph() )
    {
<% repository.imit.graphs.each do |graph| -%>
      case <%= Reality::Naming.uppercase_constantize(graph.name) %>:
        fireEvent( new <%= graph.subscribe_completed_message.ee.qualified_name %>(<% if graph.instance_root? -%> getRepository().getByID( <%= repository.entity_by_name(graph.instance_root).imit.qualified_name %>.class, (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>)  descriptor.getID() ) <% end %>) );
        break;
<% end -%>
    }
  }

  @java.lang.Override
  public void onSubscribeFailed( @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.DataLoaderService service, @javax.annotation.Nonnull final org.realityforge.replicant.client.ChannelDescriptor descriptor, @javax.annotation.Nonnull final java.lang.Throwable throwable )
  {
    if ( !(descriptor.getGraph() instanceof <%= repository.imit.qualified_graph_enum_name %>) )
    {
      return;
    }
    switch ( (<%= repository.imit.qualified_graph_enum_name %>) descriptor.getGraph() )
    {
<% repository.imit.graphs.each do |graph| -%>
      case <%= Reality::Naming.uppercase_constantize(graph.name) %>:
        fireEvent( new <%= graph.subscribe_failed_message.ee.qualified_name %>(<% if graph.instance_root? -%> (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>) descriptor.getID() ,<% end %> throwable ) );
        break;
<% end -%>
    }
  }

  @java.lang.Override
  public void onSubscriptionUpdateStarted( @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.DataLoaderService service, @javax.annotation.Nonnull final org.realityforge.replicant.client.ChannelDescriptor descriptor )
  {
    if ( !(descriptor.getGraph() instanceof <%= repository.imit.qualified_graph_enum_name %>) )
    {
      return;
    }
    switch ( (<%= repository.imit.qualified_graph_enum_name %>) descriptor.getGraph() )
    {
<% repository.imit.graphs.select{|g|!g.filter_parameter.nil? && !g.filter_parameter.immutable? }.each do |graph| -%>
      case <%= Reality::Naming.uppercase_constantize(graph.name) %>:
        fireEvent( new <%= graph.update_started_message.ee.qualified_name %>(<% if graph.instance_root? -%> getRepository().getByID( <%= repository.entity_by_name(graph.instance_root).imit.qualified_name %>.class, (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>)  descriptor.getID() ) <% end %>) );
        break;
<% end -%>
    }
  }

  @java.lang.Override
  public void onSubscriptionUpdateCompleted( @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.DataLoaderService service, @javax.annotation.Nonnull final org.realityforge.replicant.client.ChannelDescriptor descriptor )
  {
    if ( !(descriptor.getGraph() instanceof <%= repository.imit.qualified_graph_enum_name %>) )
    {
      return;
    }
    switch ( (<%= repository.imit.qualified_graph_enum_name %>) descriptor.getGraph() )
    {
<% repository.imit.graphs.select{|g|!g.filter_parameter.nil? && !g.filter_parameter.immutable? }.each do |graph| -%>
      case <%= Reality::Naming.uppercase_constantize(graph.name) %>:
        fireEvent( new <%= graph.update_completed_message.ee.qualified_name %>(<% if graph.instance_root? -%> getRepository().getByID( <%= repository.entity_by_name(graph.instance_root).imit.qualified_name %>.class, (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>)  descriptor.getID() ) <% end %>) );
        break;
<% end -%>
    }
  }

  @java.lang.Override
  public void onSubscriptionUpdateFailed( @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.DataLoaderService service, @javax.annotation.Nonnull final org.realityforge.replicant.client.ChannelDescriptor descriptor, @javax.annotation.Nonnull final java.lang.Throwable throwable )
  {
    if ( !(descriptor.getGraph() instanceof <%= repository.imit.qualified_graph_enum_name %>) )
    {
      return;
    }
    switch ( (<%= repository.imit.qualified_graph_enum_name %>) descriptor.getGraph() )
    {
<% repository.imit.graphs.select{|g|!g.filter_parameter.nil? && !g.filter_parameter.immutable? }.each do |graph| -%>
      case <%= Reality::Naming.uppercase_constantize(graph.name) %>:
        fireEvent( new <%= graph.update_failed_message.ee.qualified_name %>(<% if graph.instance_root? -%> getRepository().getByID( <%= repository.entity_by_name(graph.instance_root).imit.qualified_name %>.class, (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>)  descriptor.getID() ),<% end %> throwable ) );
        break;
<% end -%>
    }
  }

  @java.lang.Override
  public void onUnsubscribeStarted( @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.DataLoaderService service, @javax.annotation.Nonnull final org.realityforge.replicant.client.ChannelDescriptor descriptor )
  {
    if ( !(descriptor.getGraph() instanceof <%= repository.imit.qualified_graph_enum_name %>) )
    {
      return;
    }
    switch ( (<%= repository.imit.qualified_graph_enum_name %>) descriptor.getGraph() )
    {
<% repository.imit.graphs.each do |graph| -%>
      case <%= Reality::Naming.uppercase_constantize(graph.name) %>:
        fireEvent( new <%= graph.unsubscribe_started_message.ee.qualified_name %>(<% if graph.instance_root? -%> (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>) descriptor.getID() <% end %>) );
        break;
<% end -%>
    }
  }

  @java.lang.Override
  public void onUnsubscribeCompleted( @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.DataLoaderService service, @javax.annotation.Nonnull final org.realityforge.replicant.client.ChannelDescriptor descriptor )
  {
    if ( !(descriptor.getGraph() instanceof <%= repository.imit.qualified_graph_enum_name %>) )
    {
      return;
    }
    switch ( (<%= repository.imit.qualified_graph_enum_name %>) descriptor.getGraph() )
    {
<% repository.imit.graphs.each do |graph| -%>
      case <%= Reality::Naming.uppercase_constantize(graph.name) %>:
        fireEvent( new <%= graph.unsubscribe_completed_message.ee.qualified_name %>(<% if graph.instance_root? -%> (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>) descriptor.getID() <% end %>) );
        break;
<% end -%>
    }
  }

  @java.lang.Override
  public void onUnsubscribeFailed( @javax.annotation.Nonnull final org.realityforge.replicant.client.transport.DataLoaderService service, @javax.annotation.Nonnull final org.realityforge.replicant.client.ChannelDescriptor descriptor, @javax.annotation.Nonnull final java.lang.Throwable throwable )
  {
    if ( !(descriptor.getGraph() instanceof <%= repository.imit.qualified_graph_enum_name %>) )
    {
      return;
    }
    switch ( (<%= repository.imit.qualified_graph_enum_name %>) descriptor.getGraph() )
    {
<% repository.imit.graphs.each do |graph| -%>
      case <%= Reality::Naming.uppercase_constantize(graph.name) %>:
        fireEvent( new <%= graph.unsubscribe_failed_message.ee.qualified_name %>(<% if graph.instance_root? -%> (<%= repository.entity_by_name(graph.instance_root).primary_key.imit.java_type %>) descriptor.getID() ,<% end %> throwable ) );
        break;
<% end -%>
    }
  }

  protected final org.realityforge.replicant.client.EntityRepository getRepository()
  {
    return _repository;
  }
}
