/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.syncrecord.qualified_abstract_service_name) %>;

/**

 Base class to extend to customize the sync action.

<code>
<pre>
<% if service.data_module.repository.ee.use_cdi? -%>
@ApplicationScoped
@Typed( <%= service.ejb.service_name %>.class )
<% else -%>
@Singleton( name = <%= service.ejb.service_name %>.NAME )
@ConcurrencyManagement( ConcurrencyManagementType.BEAN )
@Local( <%= service.ejb.service_name %>.class )
<% end -%>
public class <%= service.syncrecord.qualified_abstract_service_name.to_s.gsub(/^Abstract/,'') %>
  extends <%= service.syncrecord.qualified_abstract_service_name %>
  implements <%= service.ejb.service_name %>
{
   ...
}
</pre>
</code>
 */
@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( "NM_SAME_SIMPLE_NAME_AS_SUPERCLASS" )
public abstract class <%= service.syncrecord.abstract_service_name %>
  extends <%= service.syncrecord.extends %>
  implements <%= service.ejb.service_name %>
{
<% service.syncrecord.sync_methods.collect{|m|m.syncrecord.lock_name}.uniq.each do |lock_name|
-%>
  @javax.inject.Named( <%= service.data_module.repository.syncrecord.qualified_sync_record_locks_name %>.<%= Reality::Naming.uppercase_constantize(lock_name.to_s.gsub('.','_')) %> )
  @javax.inject.Inject
  private java.util.concurrent.locks.Lock _<%= Reality::Naming.camelize(lock_name.to_s.gsub('.','')) %>;
<% end %>
<% service.syncrecord.sync_methods.collect{|m|m.syncrecord.lock_name}.uniq.each do |lock_name|
-%>
  @javax.annotation.Nonnull
  protected java.util.concurrent.locks.Lock get<%= Reality::Naming.pascal_case(lock_name.to_s.gsub('.','')) %>Lock()
  {
    return _<%= Reality::Naming.camelize(lock_name.to_s.gsub('.','')) %>;
  }
<% end %>
<% service.syncrecord.sync_methods.each do |method|
  datasource =
    method.parameters.empty? ?
    "#{service.data_module.repository.syncrecord.qualified_datasources_name}.#{Reality::Naming.uppercase_constantize(method.syncrecord.data_source.key)}" :
    "#{Reality::Naming.camelize(method.parameters[0].name)}"
-%>
  @java.lang.Override
  <%= annotated_type(method.return_value, :ejb, :default, :public => true) %> <%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p| "#{annotated_type(p, :ejb)} #{Reality::Naming.camelize(p.name)}" }.join(', ') %>)
  {
    if ( _<%= Reality::Naming.camelize(method.syncrecord.lock_name.to_s.gsub('.','')) %>.tryLock() )
    {
      try
      {
        if ( isFeatureEnabled( <%= service.data_module.repository.appconfig.qualified_feature_flag_container_name %>.<%= Reality::Naming.uppercase_constantize(method.syncrecord.feature_flag.key) %> ) )
        {
          return do<%= method.name %>(<%= method.parameters.collect{|p| Reality::Naming.camelize(p.name) }.join(', ') %>);
        }
        else
        {
          return createDisabledSyncStatus( java.util.logging.Level.FINE, <%= datasource %> );
        }
      }
      finally
      {
        _<%= Reality::Naming.camelize(method.syncrecord.lock_name.to_s.gsub('.','')) %>.unlock();
      }
    }
    else
    {
      return createAlreadyActiveSyncStatus( java.util.logging.Level.FINE, <%= datasource %> );
    }
  }

  <%= annotated_type(method.return_value, :ejb, :default, :private => true) %> do<%= method.name %>(<%= method.parameters.collect{|p| "#{annotated_type(p, :ejb)} #{Reality::Naming.camelize(p.name)}" }.join(', ') %>)
  {
    final iris.syncrecord.server.service.SynchronizationRecorder recorder = startSynchronization( <%= datasource %> );
    prepare<%= method.name %>( recorder );
    try
    {
      perform<%= method.name %>( recorder<%= method.parameters.size > 0 ? ', ' : '' %><%= method.parameters.collect{|p| Reality::Naming.camelize(p.name) }.join(', ') %>);
    }
    catch ( final Throwable e )
    {
      recordSyncError( recorder, 1, e );
    }
    finally
    {
      completeSynchronization( recorder );
      logSummary( recorder, java.util.logging.Level.INFO );
    }
    return toSyncStatus( recorder );
  }

  protected abstract void perform<%= method.name %>( @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder<%= method.parameters.size > 0 ? ', ' : '' %><%= method.parameters.collect{|p| "#{annotated_type(p, :ejb)} #{Reality::Naming.camelize(p.name)}" }.join(', ') %>)
    throws Exception;

  protected void prepare<%= method.name %>( @javax.annotation.Nonnull final iris.syncrecord.server.service.SynchronizationRecorder recorder )
  {
  }
<% end %>}
