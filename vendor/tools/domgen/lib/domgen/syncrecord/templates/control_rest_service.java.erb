/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.syncrecord.qualified_control_rest_service_name) %>;

@javax.annotation.Generated( "Domgen" )
@javax.enterprise.context.ApplicationScoped
@javax.transaction.Transactional( javax.transaction.Transactional.TxType.NEVER )
@javax.ws.rs.Path( "/sync" )
@javax.ws.rs.Produces( javax.ws.rs.core.MediaType.APPLICATION_JSON )
public class <%= repository.syncrecord.control_rest_service_name %>
  extends iris.syncrecord.server.rest.AbstractSyncControlService
{
<% repository.syncrecord.sync_methods.collect{|m| m.service}.uniq.each do |service| -%>
  @javax.inject.Inject
  private <%= service.ejb.generate_boundary? ? service.ejb.qualified_boundary_interface_name : service.ejb.qualified_service_name %> _<%= Domgen::Naming.camelize(service.qualified_name.gsub('.','')) %>;
<% end -%>
  @javax.ws.rs.GET
  public javax.json.JsonArray syncAll( @javax.ws.rs.QueryParam( "fields" ) @javax.ws.rs.DefaultValue( DEFAULT_FIELDS ) @javax.annotation.Nonnull final org.realityforge.rest.field_filter.FieldFilter filter )
    throws Exception
  {
    return javax.json.Json.createArrayBuilder().
<% repository.syncrecord.sync_methods.each do |method| -%>
      add( <%= Domgen::Naming.camelize(method.qualified_name.gsub(/[#\.]/,'')) %>( filter ) ).
<% end -%>
      build();
  }
<% repository.syncrecord.sync_methods.each do |method|
  datasource =
    method.parameters.empty? ?
    "#{method.service.data_module.repository.syncrecord.qualified_datasources_name}.#{Domgen::Naming.uppercase_constantize(method.syncrecord.data_source.key)}" :
    "#{Domgen::Naming.camelize(method.parameters[0].name)}"

-%>
  @javax.ws.rs.GET
  @javax.ws.rs.Path( <%= datasource %> )
  public javax.json.JsonObject <%= Domgen::Naming.camelize(method.qualified_name.gsub(/[#\.]/,'')) %>( @javax.ws.rs.QueryParam( "fields" ) @javax.ws.rs.DefaultValue( DEFAULT_FIELDS ) @javax.annotation.Nonnull final org.realityforge.rest.field_filter.FieldFilter filter )
    throws Exception
  {
    return emitSynchronizationStatus( _<%= Domgen::Naming.camelize(method.service.qualified_name.gsub('.','')) %>.<%= Domgen::Naming.camelize(method.name) %>(), filter );
  }
<% end -%>
}
