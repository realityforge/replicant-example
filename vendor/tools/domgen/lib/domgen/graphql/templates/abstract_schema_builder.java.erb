/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.graphql.qualified_abstract_schema_builder_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.UnusedPrivateField", "PMD.UnnecessaryLocalBeforeReturn" } )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings({"SKIPPED_CLASS_TOO_BIG"})
public abstract class <%= repository.graphql.abstract_schema_builder_name %>
  extends org.realityforge.graphql.domgen.Abstract<%= repository.imit? ? 'Replicant' : '' %>GraphQLSchemaProvider
{
<% repository.data_modules.each do |data_module| -%>
<% data_module.daos.each do |dao| -%>
<% if dao.repository? || (dao.graphql? && data_module.graphql?) -%>
  @javax.inject.Inject
  private <%= dao.jpa.qualified_dao_service_name %> _<%= Reality::Naming.camelize(dao.qualified_name.gsub('.','')) %>;
<% end -%>
<% end -%>
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.services.select{|service| service.graphql? }.each do |service| -%>
  @javax.inject.Inject
  private <%= service.graphql.use_boundary? ? service.ejb.qualified_boundary_interface_name : service.ejb.qualified_service_name %> _<%= Reality::Naming.camelize(service.qualified_name.gsub('.','')) %>;
<% end -%>
<% end -%>
  @javax.annotation.Resource( lookup = "java:appserver/TransactionManager" )
  private javax.transaction.TransactionManager _transactionManager;
  @javax.annotation.Resource( lookup = "<%= repository.graphql.context_service_jndi_name %>" )
  private javax.enterprise.concurrent.ContextService _contextService;
<% if repository.imit? -%>
  @javax.inject.Inject
  private org.realityforge.replicant.server.EntityMessageEndpoint _endpoint;
  @javax.persistence.PersistenceContext( unitName = <%= repository.jpa.qualified_unit_descriptor_name %>.NAME )
  private javax.persistence.EntityManager _entityManager;
  @javax.annotation.Resource
  private javax.transaction.TransactionSynchronizationRegistry _registry;

  @javax.annotation.Nonnull
  @java.lang.Override
  protected javax.transaction.TransactionSynchronizationRegistry getRegistry()
  {
    return _registry;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected org.realityforge.replicant.server.EntityMessageEndpoint getEndpoint()
  {
    return _endpoint;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected javax.persistence.EntityManager getEntityManager()
  {
    return _entityManager;
  }
<% end -%>
  @javax.annotation.Nonnull
  @java.lang.Override
  protected javax.enterprise.concurrent.ContextService getContextService()
  {
    return _contextService;
  }

  @javax.annotation.Nonnull
  @java.lang.Override
  protected javax.transaction.TransactionManager getTransactionManager()
  {
    return _transactionManager;
  }

  @java.lang.Override
  protected void populateGraphQLSchema()
  {
    registerScalarTypes();
    registerEnumTypes();
    registerInputObjectTypes();
    registerObjectTypes();
    resolveInterfaceTypeResolvers();
  }

  protected void registerScalarTypes()
  {
<% repository.graphql.non_standard_scalars.each do |scalar| -%>
    registerScalarTypeUnlessNull( defineScalar_<%= scalar %>() );
<% end -%>
    registerStandardScalarTypes();
  }

  protected void registerEnumTypes()
  {
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.enumerations.select{|enumeration| enumeration.graphql? }.each do |enumeration| -%>
    registerEnumTypeUnlessNull( defineEnumType_<%= data_module.name %>_<%= enumeration.name %>() );
<% end -%>
<% end -%>
  }

  protected void registerInputObjectTypes()
  {
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.structs.select{|struct| struct.graphql? && struct.graphql.input? }.each do |struct| -%>
    registerInputTypeUnlessNull( defineInputObjectType_<%= data_module.name %>_<%= struct.name %>() );
<% end -%>
<% end -%>
  }

  protected void registerObjectTypes()
  {
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.entities.select{|entity| entity.graphql? }.each do |entity| -%>
<% if entity.abstract? -%>
    registerInterfaceTypeUnlessNull( defineInterfaceType_<%= data_module.name %>_<%= entity.name %>() );
<% else -%>
    registerObjectTypeUnlessNull( defineObjectType_<%= data_module.name %>_<%= entity.name %>() );
<% end -%>
<% end -%>
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.structs.select{|struct| struct.graphql? && struct.graphql.output? }.each do |struct| -%>
    registerObjectTypeUnlessNull( defineObjectType_<%= data_module.name %>_<%= struct.name %>() );
<% end -%>
<% end -%>
    registerObjectType( defineQueryObjectType() );
    registerObjectTypeUnlessNull( defineMutationObjectType() );
  }

  protected void resolveInterfaceTypeResolvers()
  {
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.entities.select{|entity| entity.graphql? }.each do |entity| -%>
<% if entity.abstract? -%>
    {
      final graphql.schema.TypeResolver resolver =
        new org.realityforge.graphql.domgen.SimpleTypeResolver.Builder().
<% entity.subtypes.select{|st|st.concrete? && st.jpa?}.each do |st| -%>
        add( <%= st.jpa.qualified_name %>.class, objectType( "<%= st.graphql.name %>" ) ).
<% end -%>
        build();
      ( (graphql.schema.TypeResolverProxy) interfaceType( "<%= entity.graphql.name %>" ).getTypeResolver() ).setTypeResolver( resolver );
    }
<% end -%>
<% end -%>
<% end -%>
  }
<% repository.graphql.non_standard_scalars.each do |scalar| -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLScalarType defineScalar_<%= scalar %>()
  {
    return org.realityforge.graphql.domgen.Scalars.<%= Reality::Naming.uppercase_constantize(scalar) %>;
  }
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.enumerations.select{|enumeration| enumeration.graphql? }.each do |enumeration| -%>

  protected void customizeEnumType_<%= data_module.name %>_<%= enumeration.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLEnumType.Builder objectType )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLEnumType defineEnumType_<%= data_module.name %>_<%= enumeration.graphql.name %>()
  {
    final graphql.schema.GraphQLEnumType.Builder enumType = graphql.schema.GraphQLEnumType.newEnum();
    enumType.name( "<%= enumeration.graphql.name %>" );
<% if has_description?(enumeration) -%>
    enumType.description( "<%= description_to_string(enumeration) %>" );
<% end -%>
<% enumeration.values.select{|value| value.graphql?}.each do |value| -%>
    enumType.value( "<%= value.graphql.name %>", "<%= enumeration.graphql.name %>", "<%= description_to_string(value) %>", <%= value.graphql.deprecation_reason ? "\"#{value.graphql.deprecation_reason}\"" : 'null' %> );
<% end -%>
    customizeEnumType_<%= data_module.name %>_<%= enumeration.name %>( enumType );
    return enumType.build();
  }
<% end -%>
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.entities.select{|entity| entity.graphql? }.each do |entity| -%>
<% entity.attributes.select{|attribute| attribute.graphql?}.each do |attribute| -%>
<% if attribute.abstract? -%>

  private static Object get<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>( @javax.annotation.Nonnull final graphql.schema.DataFetchingEnvironment e )
  {
    final Object source = e.getSource();
    <% attribute.entity.subtypes.select{|st|st.concrete? && st.jpa?}.each do |st| -%>if( source instanceof <%= st.jpa.qualified_name %> )
    {
      return ( (<%= st.jpa.qualified_name %>) source ).<%= getter_for(attribute) %>;
    }
    else <% end %>
    {
      throw new IllegalStateException( "Unable to resolve source object " + source + " to field <%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>" );
    }
  }

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>()
  {
    return <%= repository.graphql.abstract_schema_builder_name %>::get<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>;
  }
<% else -%>

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>()
  {
    return e -> e.<<%= entity.jpa.qualified_name %>>getSource().<%= getter_for(attribute) %>;
  }
<% end -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLFieldDefinition defineField_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>()
  {
    final graphql.schema.GraphQLFieldDefinition.Builder field = graphql.schema.GraphQLFieldDefinition.newFieldDefinition();
    field.name( "<%= attribute.graphql.name %>" );
<% if has_description?(attribute) -%>
    field.description( "<%= description_to_string(attribute) %>" );
<% end -%>
<% if attribute.graphql.deprecation_reason -%>
    field.deprecate( "<%= attribute.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if attribute.reference? && attribute.referenced_entity.qualified_name.to_s == attribute.entity.qualified_name.to_s
      "new graphql.schema.GraphQLTypeReference( \"#{attribute.referenced_entity.graphql.name}\" )"
    elsif attribute.reference? && attribute.referenced_entity.abstract?
      "interfaceType( \"#{attribute.referenced_entity.graphql.name}\" )"
    elsif attribute.reference?
      "objectType( \"#{attribute.referenced_entity.graphql.name}\" )"
    elsif attribute.enumeration?
      "enumType( \"#{attribute.enumeration.graphql.name}\" )"
    else
      "scalarType( \"#{attribute.graphql.scalar_type}\" )"
    end
-%>
    field.type( <% unless attribute.nullable? -%>new graphql.schema.GraphQLNonNull( <% end -%><% if attribute.collection? -%>new graphql.schema.GraphQLList( new graphql.schema.GraphQLNonNull( <% end -%><%= accessor %><% if attribute.collection? -%> ) )<% end %><% unless attribute.nullable? -%> )<% end -%> );
    field.dataFetcher( defineDataFetcher_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>() );
    return field.build();
  }
<% end -%>
<% entity.referencing_attributes.
  select { |attribute| !(attribute.abstract? || attribute.inherited?) && attribute.inverse.graphql? && attribute.inverse.graphql.traversable? }.
  each do |attribute| -%>

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= entity.name %>_<%= attribute.inverse.multiplicity == :many ? Reality::Naming.pluralize(attribute.inverse.name) : attribute.inverse.name %>()
  {
    return e -> e.<<%= entity.jpa.qualified_name %>>getSource().<%= attribute.inverse.multiplicity == :many ? "get#{Reality::Naming.pluralize(attribute.inverse.name)}()" : getter_for(attribute, attribute.inverse.name) %>;
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLFieldDefinition defineField_<%= data_module.name %>_<%= entity.name %>_<%= attribute.inverse.multiplicity == :many ? Reality::Naming.pluralize(attribute.inverse.name) : attribute.inverse.name %>()
  {
    final graphql.schema.GraphQLFieldDefinition.Builder field = graphql.schema.GraphQLFieldDefinition.newFieldDefinition();
    field.name( "<%= attribute.inverse.graphql.name %>" );
<% if has_description?(attribute.inverse) -%>
    field.description( "<%= description_to_string(attribute.inverse) %>" );
<% end -%>
<% if attribute.inverse.graphql.deprecation_reason -%>
    field.deprecate( "<%= attribute.inverse.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if attribute.reference?
      "new graphql.schema.GraphQLTypeReference( \"#{attribute.entity.graphql.name}\" )"
    else
      Domngen.error("Unknown attribute_type for inverse of #{attribute.qualified_name}")
    end
-%>
    field.type( <% unless attribute.inverse.multiplicity == :zero_or_one -%>new graphql.schema.GraphQLNonNull( <% end -%><% if attribute.inverse.multiplicity == :many -%>new graphql.schema.GraphQLList( new graphql.schema.GraphQLNonNull( <% end -%><%= accessor %><% if attribute.inverse.multiplicity == :many -%> ) )<% end %><% unless attribute.inverse.multiplicity == :zero_or_one -%> )<% end -%> );
    field.dataFetcher( defineDataFetcher_<%= data_module.name %>_<%= entity.name %>_<%= attribute.inverse.multiplicity == :many ? Reality::Naming.pluralize(attribute.inverse.name) : attribute.inverse.name %>() );
    return field.build();
  }
<% end -%>
<% if entity.abstract? -%>

  protected void customizeInterfaceType_<%= data_module.name %>_<%= entity.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLInterfaceType.Builder interfaceType )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLInterfaceType defineInterfaceType_<%= data_module.name %>_<%= entity.name %>()
  {
    final graphql.schema.GraphQLInterfaceType.Builder interfaceType = graphql.schema.GraphQLInterfaceType.newInterface();
    interfaceType.name( "<%= entity.graphql.name %>" );
<% if has_description?(entity) -%>
    interfaceType.description( "<%= description_to_string(entity) %>" );
<% end -%>
<% entity.attributes.select{|attribute| attribute.graphql?}.each do |attribute| -%>
    addFieldUnlessNull( interfaceType, defineField_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>() );
<% end -%>
<% entity.referencing_attributes.
  select { |attribute| !(attribute.abstract? || attribute.inherited?) && attribute.inverse.graphql? && attribute.inverse.graphql.traversable? }.
  each do |attribute| -%>
    addFieldUnlessNull( interfaceType, defineField_<%= data_module.name %>_<%= entity.name %>_<%= attribute.inverse.multiplicity == :many ? Reality::Naming.pluralize(attribute.inverse.name) : attribute.inverse.name %>() );
<% end -%>
    interfaceType.typeResolver( new graphql.schema.TypeResolverProxy() );
    customizeInterfaceType_<%= data_module.name %>_<%= entity.name %>( interfaceType );
    return interfaceType.build();
  }
<% else -%>

  protected void customizeObjectType_<%= data_module.name %>_<%= entity.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLObjectType.Builder objectType )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLObjectType defineObjectType_<%= data_module.name %>_<%= entity.name %>()
  {
    final graphql.schema.GraphQLObjectType.Builder objectType = graphql.schema.GraphQLObjectType.newObject();
    objectType.name( "<%= entity.graphql.name %>" );
<% entity.supertypes.select{|type| type.graphql? && type.abstract? }.each do |type| -%>
    objectType.withInterface( interfaceType( "<%= type.graphql.name %>" ) );
<% end -%>
<% if has_description?(entity) -%>
    objectType.description( "<%= description_to_string(entity) %>" );
<% end -%>
<% entity.attributes.select{|attribute| attribute.graphql?}.each do |attribute| -%>
    addFieldUnlessNull( objectType, defineField_<%= data_module.name %>_<%= entity.name %>_<%= attribute.name %>() );
<% end -%>
<% entity.referencing_attributes.
  select { |attribute| !(attribute.abstract? || attribute.inherited?) && attribute.inverse.graphql? && attribute.inverse.graphql.traversable? }.
  each do |attribute| -%>
    addFieldUnlessNull( objectType, defineField_<%= data_module.name %>_<%= entity.name %>_<%= attribute.inverse.multiplicity == :many ? Reality::Naming.pluralize(attribute.inverse.name) : attribute.inverse.name %>() );
<% end -%>
    customizeObjectType_<%= data_module.name %>_<%= entity.name %>( objectType );
    return objectType.build();
  }
<% end -%>
<% end -%>
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.structs.select{|struct| struct.graphql? && struct.graphql.output? }.each do |struct| -%>
<% struct.fields.select{|field| field.graphql?}.each do |field| -%>

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= struct.name %>_<%= field.name %>()
  {
    return e -> e.<<%= struct.ee.qualified_name %>>getSource().<%= getter_for(field) %>;
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLFieldDefinition defineField_<%= data_module.name %>_<%= struct.name %>_<%= field.name %>()
  {
    final graphql.schema.GraphQLFieldDefinition.Builder field = graphql.schema.GraphQLFieldDefinition.newFieldDefinition();
    field.name( "<%= field.graphql.name %>" );
<% if has_description?(field) -%>
    field.description( "<%= description_to_string(field) %>" );
<% end -%>
<% if field.graphql.deprecation_reason -%>
    field.deprecate( "<%= field.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if field.struct? && field.referenced_struct.qualified_name.to_s == field.struct.qualified_name.to_s
      "new graphql.schema.GraphQLTypeReference( \"#{field.referenced_struct.graphql.name}\" )"
    elsif field.struct?
      "objectType( \"#{field.referenced_struct.graphql.name}\" )"
    elsif field.enumeration?
      "enumType( \"#{field.enumeration.graphql.name}\" )"
    else
      "scalarType( \"#{field.graphql.scalar_type}\" )"
    end
-%>
    field.type( <% unless field.nullable? -%>new graphql.schema.GraphQLNonNull( <% end -%><% if field.collection? -%>new graphql.schema.GraphQLList( new graphql.schema.GraphQLNonNull( <% end -%><%= accessor %><% if field.collection? -%> ) )<% end %><% unless field.nullable? -%> )<% end -%> );
    field.dataFetcher( defineDataFetcher_<%= data_module.name %>_<%= struct.name %>_<%= field.name %>() );
    return field.build();
  }
<% end -%>

  protected void customizeObjectType_<%= data_module.name %>_<%= struct.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLObjectType.Builder objectType )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLObjectType defineObjectType_<%= data_module.name %>_<%= struct.name %>()
  {
    final graphql.schema.GraphQLObjectType.Builder objectType = graphql.schema.GraphQLObjectType.newObject();
    objectType.name( "<%= struct.graphql.name %>" );
<% if has_description?(struct) -%>
    objectType.description( "<%= description_to_string(struct) %>" );
<% end -%>
<% struct.fields.select{|field| field.graphql?}.each do |field| -%>
    addFieldUnlessNull( objectType, defineField_<%= data_module.name %>_<%= struct.name %>_<%= field.name %>() );
<% end -%>
    customizeObjectType_<%= data_module.name %>_<%= struct.name %>( objectType );
    return objectType.build();
  }
<% end -%>
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.structs.select{|struct| struct.graphql? && struct.graphql.input? }.each do |struct| -%>
<% struct.fields.select{|field| field.graphql?}.each do |field| -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLInputObjectField defineInputObjectField_<%= data_module.name %>_<%= struct.name %>_<%= field.name %>()
  {
    final graphql.schema.GraphQLInputObjectField.Builder field = graphql.schema.GraphQLInputObjectField.newInputObjectField();
    field.name( "<%= field.graphql.name %>" );
<% if has_description?(field) -%>
    field.description( "<%= description_to_string(field) %>" );
<% end -%>
<% if field.graphql.deprecation_reason -%>
    field.deprecate( "<%= field.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if field.struct? && field.referenced_struct.qualified_name.to_s == field.struct.qualified_name.to_s
      "new graphql.schema.GraphQLTypeReference( \"#{field.referenced_struct.graphql.name}\" )"
    elsif field.struct?
      "inputType( \"#{field.referenced_struct.graphql.name}\" )"
    elsif field.enumeration?
      "enumType( \"#{field.enumeration.graphql.name}\" )"
    else
      "scalarType( \"#{field.graphql.scalar_type}\" )"
    end
-%>
    field.type( <% unless field.nullable? -%>new graphql.schema.GraphQLNonNull( <% end -%><% if field.collection? -%>new graphql.schema.GraphQLList( new graphql.schema.GraphQLNonNull( <% end -%><%= accessor %><% if field.collection? -%> ) )<% end %><% unless field.nullable? -%> )<% end -%> );
    return field.build();
  }
<% end -%>

  @javax.annotation.Nonnull
  private <%= struct.ee.qualified_name -%> mapTo<%= struct.name -%>( @javax.annotation.Nonnull final java.util.Map<java.lang.String, java.lang.Object> fields )
  {
    return new <%= struct.ee.qualified_name -%>( <%= struct.fields.collect{|field|
  accessor = "fields.get( \"#{field.graphql.name}\" )"
  field_value = field.struct? ?
    "mapTo#{field.referenced_struct.name}( (java.util.Map<java.lang.String, java.lang.Object>) #{accessor} )" :
    field.enumeration? ?
    "#{field.enumeration.ee.qualified_name}.valueOf( (java.lang.String) #{accessor})" :
    "(#{field.ee.non_primitive_java_type}) #{accessor}"
  field_value = "null == #{accessor} ? null : #{field_value}" if field.nullable?
  field_value
}.join(", ") -%> );
  }

  protected void customizeInputObjectType_<%= data_module.name %>_<%= struct.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLInputObjectType.Builder objectType )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLInputObjectType defineInputObjectType_<%= data_module.name %>_<%= struct.name %>()
  {
    final graphql.schema.GraphQLInputObjectType.Builder objectType = graphql.schema.GraphQLInputObjectType.newInputObject();
    objectType.name( "<%= struct.graphql.name %>" );
<% if has_description?(struct) -%>
    objectType.description( "<%= description_to_string(struct) %>" );
<% end -%>
<% struct.fields.select{|field| field.graphql?}.each do |field| -%>
    addFieldUnlessNull( objectType, defineInputObjectField_<%= data_module.name %>_<%= struct.name %>_<%= field.name %>() );
<% end -%>
    customizeInputObjectType_<%= data_module.name %>_<%= struct.name %>( objectType );
    return objectType.build();
  }
<% end -%>
<% end -%>

<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.daos.select{|dao| dao.graphql? }.each do |dao| -%>
<% if dao.graphql.expose_create? -%>
<% dao.entity.graphql.createable_attributes.select{|attribute| attribute.graphql.createable?}.each do |attribute| -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLArgument defineArgument_<%= data_module.name %>_<%= dao.name %>_Create_<%= attribute.name %>()
  {
    final graphql.schema.GraphQLArgument.Builder argument = graphql.schema.GraphQLArgument.newArgument();
    argument.name( "<%= attribute.reference? || attribute.remote_reference? ? Reality::Naming.camelize(attribute.referencing_link_name) : attribute.graphql.name %>" );
    argument.type( <% unless attribute.nullable? %>new graphql.schema.GraphQLNonNull( <% end %>scalarType( "<%= dao.entity.primary_key.graphql.scalar_type %>" )<% unless attribute.nullable? %> )<% end %> );
<% if has_description?(attribute) -%>
    argument.description( "<%= description_to_string(attribute) %>" );
<% end -%>
<% if attribute.graphql.deprecation_reason -%>
    argument.deprecate( "<%= attribute.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if attribute.reference?
      "scalarType( \"#{attribute.referenced_entity.primary_key.graphql.scalar_type}\" )"
    elsif attribute.struct?
      "inputType( \"#{attribute.referenced_struct.graphql.name}\" )"
    elsif attribute.enumeration?
      "enumType( \"#{attribute.enumeration.graphql.name}\" )"
    else
      "scalarType( \"#{attribute.graphql.scalar_type}\" )"
    end
-%>
    argument.type( <%= accessor %> );
<% if dao.graphql.create_default?(attribute.name) -%>
    argument.defaultValue( <%= dao.graphql.create_default(attribute.name) %> );
<% end -%>
    return argument.build();
  }
<% end -%>

  @javax.annotation.Nonnull
  protected Object define_<%= data_module.name %>_<%= dao.name %>_Create( @javax.annotation.Nonnull final graphql.schema.DataFetchingEnvironment e )
  {
<% dao.entity.graphql.createable_attributes.select{|attribute| attribute.graphql.createable?}.each do |attribute|
  base_accessor = "e.getArgument( \"#{attribute.reference? || attribute.remote_reference? ? Reality::Naming.camelize(attribute.referencing_link_name) : attribute.graphql.name}\" )"
  v = base_accessor
  if attribute.reference?
    v = "_#{Reality::Naming.camelize(attribute.referenced_entity.dao.qualified_name.gsub('.','')) }.getBy#{attribute.referenced_entity.primary_key.name}(#{v})"
    v = "null == #{base_accessor} ? null : #{v}" if attribute.nullable?
  end
-%>
    final <%= attribute.jpa.java_type %> <%= Reality::Naming.camelize(attribute.name) %> = <%= v %>;
<% end -%>
    return _<%= Reality::Naming.camelize(dao.qualified_name.gsub('.','')) %>.create( <%= dao.entity.graphql.createable_attributes.collect {|attribute| attribute.graphql.createable? ? Reality::Naming.camelize(attribute.name) : attribute.graphql.initial_value }.join(', ') -%> );
  }

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= dao.name %>_Create()
  {
    return wrapTopLevelDataFetcher( "create<%= dao.entity.graphql.name %>", true, this::define_<%= data_module.name %>_<%= dao.name %>_Create );
  }

  protected void customizeMutation_<%= data_module.name %>_<%= dao.name %>_Create( @javax.annotation.Nonnull final graphql.schema.GraphQLFieldDefinition.Builder query )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLFieldDefinition defineMutation_<%= data_module.name %>_<%= dao.name %>_Create()
  {
    final graphql.schema.GraphQLFieldDefinition.Builder mutation = graphql.schema.GraphQLFieldDefinition.newFieldDefinition();
    mutation.name( "create<%= dao.entity.graphql.name %>" );
<% if dao.graphql.create_description -%>
    mutation.description( "<%= escape_description_to_string(dao.graphql.create_description) %>" );
<% end -%>
<% if dao.graphql.create_deprecation_reason -%>
    mutation.deprecate( "<%= dao.graphql.create_deprecation_reason -%>" );
<% end -%>
    mutation.type( new graphql.schema.GraphQLNonNull( objectType( "<%= dao.entity.graphql.name %>" ) ) );
    mutation.dataFetcher( defineDataFetcher_<%= data_module.name %>_<%= dao.name %>_Create() );
<% dao.entity.graphql.createable_attributes.select{|attribute| attribute.graphql.createable?}.each do |attribute| -%>
    mutation.argument( defineArgument_<%= data_module.name %>_<%= dao.name %>_Create_<%= attribute.name %>() );
<% end -%>
    customizeMutation_<%= data_module.name %>_<%= dao.name %>_Create( mutation );
    return mutation.build();
  }
<% end -%>
<% if dao.graphql.expose_create? -%>
<% dao.entity.graphql.updateable_attributes.select{|attribute| attribute.graphql.updateable?}.each do |attribute| -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLArgument defineArgument_<%= data_module.name %>_<%= dao.name %>_Update_<%= attribute.name %>()
  {
    final graphql.schema.GraphQLArgument.Builder argument = graphql.schema.GraphQLArgument.newArgument();
    argument.name( "<%= attribute.reference? || attribute.remote_reference? ? Reality::Naming.camelize(attribute.referencing_link_name) : attribute.graphql.name %>" );
    argument.type( <% unless attribute.nullable? %>new graphql.schema.GraphQLNonNull( <% end %>scalarType( "<%= dao.entity.primary_key.graphql.scalar_type %>" )<% unless attribute.nullable? %> )<% end %> );
<% if has_description?(attribute) -%>
    argument.description( "<%= description_to_string(attribute) %>" );
<% end -%>
<% if attribute.graphql.deprecation_reason -%>
    argument.deprecate( "<%= attribute.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if attribute.reference?
      "scalarType( \"#{attribute.referenced_entity.primary_key.graphql.scalar_type}\" )"
    elsif attribute.struct?
      "inputType( \"#{attribute.referenced_struct.graphql.name}\" )"
    elsif attribute.enumeration?
      "enumType( \"#{attribute.enumeration.graphql.name}\" )"
    else
      "scalarType( \"#{attribute.graphql.scalar_type}\" )"
    end
-%>
    argument.type( <%= accessor %> );
<% if dao.graphql.update_default?(attribute.name) -%>
    argument.defaultValue( <%= dao.graphql.update_default(attribute.name) %> );
<% end -%>
    return argument.build();
  }
<% end -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLArgument defineArgument_<%= data_module.name %>_<%= dao.name %>_Update_$Entity()
  {
    final graphql.schema.GraphQLArgument.Builder argument = graphql.schema.GraphQLArgument.newArgument();
    argument.name( "<%= "#{Reality::Naming.camelize(dao.entity.graphql.name)}#{dao.entity.primary_key.name}" %>" );
    argument.type( new graphql.schema.GraphQLNonNull( scalarType( "<%= dao.entity.primary_key.graphql.scalar_type %>" ) ) );
    return argument.build();
  }

  @javax.annotation.Nonnull
  protected Object define_<%= data_module.name %>_<%= dao.name %>_Update( @javax.annotation.Nonnull final graphql.schema.DataFetchingEnvironment e )
  {
<%-
    v = "e.getArgument( \"#{Reality::Naming.camelize(dao.entity.graphql.name)}#{dao.entity.primary_key.name}\" )"
    v = "_#{Reality::Naming.camelize(dao.qualified_name.gsub('.','')) }.getBy#{dao.entity.primary_key.name}(#{v})"
-%>
    final <%= dao.entity.jpa.qualified_name %> $entity = <%= v %>;
<% dao.entity.graphql.updateable_attributes.select{|attribute| attribute.graphql.updateable?}.each do |attribute|
  base_accessor = "e.getArgument( \"#{attribute.reference? || attribute.remote_reference? ? Reality::Naming.camelize(attribute.referencing_link_name) : attribute.graphql.name}\" )"
  v = base_accessor
  if attribute.reference?
    v = "_#{Reality::Naming.camelize(attribute.referenced_entity.dao.qualified_name.gsub('.','')) }.getBy#{attribute.referenced_entity.primary_key.name}(#{v})"
    v = "null == #{base_accessor} ? null : #{v}" if attribute.nullable?
  end
-%>
    final <%= attribute.jpa.java_type %> <%= Reality::Naming.camelize(attribute.name) %> = <%= v %>;
<% end -%>
    _<%= Reality::Naming.camelize(dao.qualified_name.gsub('.','')) %>.update( $entity, <%= dao.entity.graphql.updateable_attributes.collect {|attribute| attribute.graphql.updateable? ? Reality::Naming.camelize(attribute.name) : "$entity.#{getter_for(attribute)}" }.join(', ') -%> );
    return $entity;
  }

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= dao.name %>_Update()
  {
    return wrapTopLevelDataFetcher( "update<%= dao.entity.graphql.name %>", true, this::define_<%= data_module.name %>_<%= dao.name %>_Update );
  }

  protected void customizeMutation_<%= data_module.name %>_<%= dao.name %>_Update( @javax.annotation.Nonnull final graphql.schema.GraphQLFieldDefinition.Builder query )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLFieldDefinition defineMutation_<%= data_module.name %>_<%= dao.name %>_Update()
  {
    final graphql.schema.GraphQLFieldDefinition.Builder mutation = graphql.schema.GraphQLFieldDefinition.newFieldDefinition();
    mutation.name( "update<%= dao.entity.graphql.name %>" );
<% if dao.graphql.update_description -%>
    mutation.description( "<%= escape_description_to_string(dao.graphql.update_description) %>" );
<% end -%>
<% if dao.graphql.update_deprecation_reason -%>
    mutation.deprecate( "<%= dao.graphql.update_deprecation_reason -%>" );
<% end -%>
    mutation.type( new graphql.schema.GraphQLNonNull( objectType( "<%= dao.entity.graphql.name %>" ) ) );
    mutation.dataFetcher( defineDataFetcher_<%= data_module.name %>_<%= dao.name %>_Update() );
    mutation.argument( defineArgument_<%= data_module.name %>_<%= dao.name %>_Update_$Entity() );
<% dao.entity.graphql.updateable_attributes.select{|attribute| attribute.graphql.updateable?}.each do |attribute| -%>
    mutation.argument( defineArgument_<%= data_module.name %>_<%= dao.name %>_Update_<%= attribute.name %>() );
<% end -%>
    customizeMutation_<%= data_module.name %>_<%= dao.name %>_Update( mutation );
    return mutation.build();
  }
<% end -%>
<% if dao.graphql.expose_delete? -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLArgument defineArgument_<%= data_module.name %>_<%= dao.name %>_Delete_$Entity()
  {
    final graphql.schema.GraphQLArgument.Builder argument = graphql.schema.GraphQLArgument.newArgument();
    argument.name( "<%= "#{Reality::Naming.camelize(dao.entity.graphql.name)}#{dao.entity.primary_key.name}" %>" );
    argument.type( new graphql.schema.GraphQLNonNull( scalarType( "<%= dao.entity.primary_key.graphql.scalar_type %>" ) ) );
    return argument.build();
  }

  @javax.annotation.Nonnull
  protected Object define_<%= data_module.name %>_<%= dao.name %>_Delete( @javax.annotation.Nonnull final graphql.schema.DataFetchingEnvironment e )
  {
<%-
    v = "e.getArgument( \"#{Reality::Naming.camelize(dao.entity.graphql.name)}#{dao.entity.primary_key.name}\" )"
    v = "_#{Reality::Naming.camelize(dao.qualified_name.gsub('.','')) }.getBy#{dao.entity.primary_key.name}(#{v})"
-%>
    final <%= dao.entity.jpa.qualified_name %> $entity = <%= v %>;
    _<%= Reality::Naming.camelize(dao.qualified_name.gsub('.','')) %>.delete( $entity );
    return $entity.<%= getter_for(dao.entity.primary_key) %>;
  }

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= dao.name %>_Delete()
  {
    return wrapTopLevelDataFetcher( "delete<%= dao.entity.graphql.name %>", true, this::define_<%= data_module.name %>_<%= dao.name %>_Delete );
  }

  protected void customizeMutation_<%= data_module.name %>_<%= dao.name %>_Delete( @javax.annotation.Nonnull final graphql.schema.GraphQLFieldDefinition.Builder query )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLFieldDefinition defineMutation_<%= data_module.name %>_<%= dao.name %>_Delete()
  {
    final graphql.schema.GraphQLFieldDefinition.Builder mutation = graphql.schema.GraphQLFieldDefinition.newFieldDefinition();
    mutation.name( "delete<%= dao.entity.graphql.name %>" );
<% if dao.graphql.delete_description -%>
    mutation.description( "<%= escape_description_to_string(dao.graphql.delete_description) %>" );
<% end -%>
<% if dao.graphql.delete_deprecation_reason -%>
    mutation.deprecate( "<%= dao.graphql.delete_deprecation_reason -%>" );
<% end -%>
    mutation.type( new graphql.schema.GraphQLNonNull( scalarType( "<%= dao.entity.primary_key.graphql.scalar_type %>" ) ) );
    mutation.dataFetcher( defineDataFetcher_<%= data_module.name %>_<%= dao.name %>_Delete() );
    mutation.argument( defineArgument_<%= data_module.name %>_<%= dao.name %>_Delete_$Entity() );
    customizeMutation_<%= data_module.name %>_<%= dao.name %>_Delete( mutation );
    return mutation.build();
  }
<% end -%>
<% dao.queries.select{|query| query.graphql? && query.query_type == :select }.each do |query| -%>
<% query.parameters.each do |parameter| -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLArgument defineArgument_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>_<%= parameter.name %>()
  {
    final graphql.schema.GraphQLArgument.Builder argument = graphql.schema.GraphQLArgument.newArgument();
    argument.name( "<%= parameter.graphql.name %>" );
<% if has_description?(parameter) -%>
    argument.description( "<%= description_to_string(parameter) %>" );
<% end -%>
<% if parameter.graphql.deprecation_reason -%>
    argument.deprecate( "<%= parameter.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if parameter.reference?
      "scalarType( \"#{parameter.referenced_entity.primary_key.graphql.scalar_type}\" )"
    elsif parameter.struct?
      "inputType( \"#{parameter.referenced_struct.graphql.name}\" )"
    elsif parameter.enumeration?
      "enumType( \"#{parameter.enumeration.graphql.name}\" )"
    else
      "scalarType( \"#{parameter.graphql.scalar_type}\" )"
    end
-%>
    argument.type( <% unless parameter.nullable? -%>new graphql.schema.GraphQLNonNull( <% end -%><% if parameter.collection? -%>new graphql.schema.GraphQLList( new graphql.schema.GraphQLNonNull( <% end -%><%= accessor %><% if parameter.collection? -%> ) )<% end %><% unless parameter.nullable? -%> )<% end -%> );
    return argument.build();
  }
<% end -%>
  @javax.annotation.Nonnull
  protected Object define_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>( @javax.annotation.Nonnull final graphql.schema.DataFetchingEnvironment e )
  {
    final Object result = _<%= Reality::Naming.camelize(dao.qualified_name.gsub('.','')) %>.<%= Reality::Naming.camelize(query.name) %>(<%= query.parameters.collect do |parameter|
  base_accessor = "e.getArgument( \"#{parameter.graphql.name}\" )"
  v = base_accessor
  if parameter.reference?
    v = "_#{Reality::Naming.camelize(parameter.referenced_entity.dao.qualified_name.gsub('.','')) }.getBy#{parameter.referenced_entity.primary_key.name}(#{v})"
    v = "null == #{base_accessor} ? null : #{v}" if parameter.nullable?
  end
  v
end.join(", ") %>);
    return result;
  }

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>()
  {
    return wrapTopLevelDataFetcher( "<%= query.graphql.name %>", <%= :requires_new != dao.jpa.transaction_type -%>, this::define_<%= data_module.name %>_<%= dao.name %>_<%= query.name %> );
  }

  protected void customizeQuery_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLFieldDefinition.Builder query )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLFieldDefinition defineQuery_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>()
  {
    final graphql.schema.GraphQLFieldDefinition.Builder query = graphql.schema.GraphQLFieldDefinition.newFieldDefinition();
    query.name( "<%= query.graphql.name %>" );
<% if has_description?(query) -%>
    query.description( "<%= description_to_string(query) %>" );
<% end -%>
<% if query.graphql.deprecation_reason -%>
    query.deprecate( "<%= query.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if query.result_entity? && query.entity.abstract?
      "interfaceType( \"#{query.entity.graphql.name}\" )"
    elsif query.result_entity?
      "objectType( \"#{query.entity.graphql.name}\" )"
     elsif query.result_struct?
      "objectType( \"#{query.struct.graphql.name}\" )"
     else
       raise "Unhandled result type"
     end
-%>
    query.type( <%= query.multiplicity == :one ? "new graphql.schema.GraphQLNonNull( " : query.multiplicity == :many ? "new graphql.schema.GraphQLList( new graphql.schema.GraphQLNonNull( " : '' -%><%= accessor %><%= query.multiplicity == :one ? ' )' : query.multiplicity == :many ? " ) )" : '' -%> );
    query.dataFetcher( defineDataFetcher_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>() );
<% query.parameters.each do |parameter| -%>
    query.argument( defineArgument_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>_<%= parameter.name %>() );
<% end -%>
    customizeQuery_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>( query );
    return query.build();
  }
<% end -%>
<% end -%>
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.services.select{|service| service.graphql? }.each do |service| -%>
<% service.methods.select{|method| method.graphql? }.each do |method| -%>
<% method.parameters.each do |parameter| -%>

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLArgument defineArgument_<%= data_module.name %>_<%= service.name %>_<%= method.name %>_<%= parameter.name %>()
  {
    final graphql.schema.GraphQLArgument.Builder argument = graphql.schema.GraphQLArgument.newArgument();
    argument.name( "<%= parameter.graphql.name %>" );
<% if has_description?(parameter) -%>
    argument.description( "<%= description_to_string(parameter) %>" );
<% end -%>
<% if parameter.graphql.deprecation_reason -%>
    argument.deprecate( "<%= parameter.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if parameter.reference?
      "scalarType( \"#{parameter.referenced_entity.primary_key.graphql.scalar_type}\" )"
    elsif parameter.struct?
      "inputType( \"#{parameter.referenced_struct.graphql.name}\" )"
    elsif parameter.enumeration?
      "enumType( \"#{parameter.enumeration.graphql.name}\" )"
    else
      "scalarType( \"#{parameter.graphql.scalar_type}\" )"
    end
-%>
    argument.type( <% unless parameter.nullable? -%>new graphql.schema.GraphQLNonNull( <% end -%><% if parameter.collection? -%>new graphql.schema.GraphQLList( new graphql.schema.GraphQLNonNull( <% end -%><%= accessor %><% if parameter.collection? -%> ) )<% end %><% unless parameter.nullable? -%> )<% end -%> );
    return argument.build();
  }
<% end -%>

  @javax.annotation.Nonnull
  protected Object define_<%= data_module.name %>_<%= service.name %>_<%= method.name %>( @javax.annotation.Nonnull final graphql.schema.DataFetchingEnvironment e )
    throws java.lang.Exception
  {
<% method.parameters.collect do |parameter|
  base_accessor = "e.getArgument( \"#{parameter.graphql.name}\" )"
  v = base_accessor
  if parameter.reference? && !service.graphql.use_boundary?
    v = "_#{Reality::Naming.camelize(parameter.referenced_entity.dao.qualified_name.gsub('.','')) }.getBy#{parameter.referenced_entity.primary_key.name}(#{v})"
    v = "null == #{base_accessor} ? null : #{v}" if parameter.nullable?
  elsif parameter.enumeration?
    v = "_#{Reality::Naming.camelize(parameter.referenced_entity.dao.qualified_name.gsub('.','')) }.getBy#{parameter.referenced_entity.primary_key.name}(#{v})"
    v = "null == #{base_accessor} ? null : #{v}" if parameter.nullable?
  end
  v
-%>
    final <%= parameter.ejb.java_type %> <%= Reality::Naming.camelize(parameter.name) %> = <%= v %>;
<% end -%>
    <%= method.return_value.characteristic_type_key == :void ? '' : 'final Object $result = ' %>_<%= Reality::Naming.camelize(service.qualified_name.gsub('.','')) %>.<%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect {|parameter| Reality::Naming.camelize(parameter.name) }.join(", ") %>);
    return <%= method.graphql.custom_return_characteristic? ? "#{Reality::Naming.camelize(method.graphql.return_characteristic.name)}" : '$result' %>;
  }

  @javax.annotation.Nonnull
  protected graphql.schema.DataFetcher defineDataFetcher_<%= data_module.name %>_<%= service.name %>_<%= method.name %>()
  {
    return wrapTopLevelDataFetcher( "<%= method.graphql.name %>", <%= !service.graphql.use_boundary? -%>, this::define_<%= data_module.name %>_<%= service.name %>_<%= method.name %> );
  }

  protected void customize<%= method.graphql.mutation? ? 'Mutation' : 'Query' %>_<%= data_module.name %>_<%= service.name %>_<%= method.name %>( @javax.annotation.Nonnull final graphql.schema.GraphQLFieldDefinition.Builder query )
  {
  }

  @javax.annotation.Nullable
  protected graphql.schema.GraphQLFieldDefinition define<%= method.graphql.mutation? ? 'Mutation' : 'Query' %>_<%= data_module.name %>_<%= service.name %>_<%= method.name %>()
  {
    final graphql.schema.GraphQLFieldDefinition.Builder method = graphql.schema.GraphQLFieldDefinition.newFieldDefinition();
    method.name( "<%= method.graphql.name %>" );
<% if has_description?(method) -%>
    method.description( "<%= description_to_string(method) %>" );
<% end -%>
<% if method.graphql.deprecation_reason -%>
    method.deprecate( "<%= method.graphql.deprecation_reason -%>" );
<% end -%>
<%
  accessor =
    if method.graphql.return_characteristic.reference? && method.graphql.return_characteristic.referenced_entity.abstract?
      "interfaceType( \"#{method.graphql.return_characteristic.referenced_entity.graphql.name}\" )"
    elsif method.graphql.return_characteristic.reference?
      "objectType( \"#{method.graphql.return_characteristic.referenced_entity.graphql.name}\" )"
     elsif method.graphql.return_characteristic.struct?
      "objectType( \"#{method.graphql.return_characteristic.referenced_struct.graphql.name}\" )"
     elsif method.graphql.return_characteristic.enumeration?
      "enumType( \"#{method.graphql.return_characteristic.enumeration.graphql.name}\" )"
     else
      "scalarType( \"#{method.graphql.return_characteristic.graphql.scalar_type}\" )"
     end
-%>
    method.type( <%= method.graphql.return_characteristic.nullable? ? '' : 'new graphql.schema.GraphQLNonNull( ' %><%= method.graphql.return_characteristic.collection? ? "new graphql.schema.GraphQLList( new graphql.schema.GraphQLNonNull( " : '' -%><%= accessor %><%= method.graphql.return_characteristic.nullable? ? '' : ' )' %><%= method.graphql.return_characteristic.collection? ? " ) )" : '' -%> );
<% method.parameters.each do |parameter| -%>
    method.argument( defineArgument_<%= data_module.name %>_<%= service.name %>_<%= method.name %>_<%= parameter.name %>() );
<% end -%>
    method.dataFetcher( defineDataFetcher_<%= data_module.name %>_<%= service.name %>_<%= method.name %>() );
    customize<%= method.graphql.mutation? ? 'Mutation' : 'Query' %>_<%= data_module.name %>_<%= service.name %>_<%= method.name %>( method );
    return method.build();
  }
<% end -%>
<% end -%>
<% end -%>

  protected void customizeQueryObjectType( @javax.annotation.Nonnull final graphql.schema.GraphQLObjectType.Builder objectType )
  {
  }

  @javax.annotation.Nonnull
  protected graphql.schema.GraphQLObjectType defineQueryObjectType()
  {
    final graphql.schema.GraphQLObjectType.Builder objectType = graphql.schema.GraphQLObjectType.newObject();
    objectType.name( com.coxautodev.graphql.tools.RootTypeInfo.DEFAULT_QUERY_NAME );
<% if repository.graphql.query_description.to_s.strip != '' -%>
    objectType.description( "<%= escape_description_to_string(repository.graphql.query_description) %>" );
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.daos.select{|dao| dao.graphql? }.each do |dao| -%>
<% dao.queries.select{|query| query.graphql? && query.query_type == :select }.each do |query| -%>
    addFieldUnlessNull( objectType, defineQuery_<%= data_module.name %>_<%= dao.name %>_<%= query.name %>() );
<% end -%>
<% end -%>
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.services.select{|service| service.graphql? }.each do |service| -%>
<% service.methods.select{|method| method.graphql? && !method.graphql.mutation? }.each do |method| -%>
    addFieldUnlessNull( objectType, defineQuery_<%= data_module.name %>_<%= service.name %>_<%= method.name %>() );
<% end -%>
<% end -%>
<% end -%>
    customizeQueryObjectType( objectType );
    return objectType.build();
  }

  protected void customizeMutationObjectType( @javax.annotation.Nonnull final graphql.schema.GraphQLObjectType.Builder objectType )
  {
  }

  @javax.annotation.Nonnull
  protected graphql.schema.GraphQLObjectType defineMutationObjectType()
  {
    final graphql.schema.GraphQLObjectType.Builder objectType = graphql.schema.GraphQLObjectType.newObject();
    objectType.name( com.coxautodev.graphql.tools.RootTypeInfo.DEFAULT_MUTATION_NAME );
<% if repository.graphql.mutation_description.to_s.strip != '' -%>
    objectType.description( "<%= escape_description_to_string(repository.graphql.mutation_description) %>" );
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.daos.select{|dao| dao.graphql? }.each do |dao| -%>
<% if dao.graphql.expose_create? -%>
    addFieldUnlessNull( objectType, defineMutation_<%= data_module.name %>_<%= dao.name %>_Create() );
<% end -%>
<% if dao.graphql.expose_update? -%>
    addFieldUnlessNull( objectType, defineMutation_<%= data_module.name %>_<%= dao.name %>_Update() );
<% end -%>
<% if dao.graphql.expose_delete? -%>
    addFieldUnlessNull( objectType, defineMutation_<%= data_module.name %>_<%= dao.name %>_Delete() );
<% end -%>
<% end -%>
<% end -%>
<% repository.data_modules.select{|data_module| data_module.graphql?}.each do |data_module| -%>
<% data_module.services.select{|service| service.graphql? }.each do |service| -%>
<% service.methods.select{|method| method.graphql? && method.graphql.mutation? }.each do |method| -%>
    addFieldUnlessNull( objectType, defineMutation_<%= data_module.name %>_<%= service.name %>_<%= method.name %>() );
<% end -%>
<% end -%>
<% end -%>
    customizeMutationObjectType( objectType );
    final graphql.schema.GraphQLObjectType mutation = objectType.build();
    if( mutation.getFieldDefinitions().isEmpty() )
    {
      return null;
    }
    else
    {
      return mutation;
    }
  }
}
