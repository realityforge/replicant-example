/* DO NOT EDIT: File is auto-generated */
package <%= to_package(client.qualified_keycloak_filter_name) %>;

@javax.annotation.Generated( "Domgen" )
@javax.servlet.annotation.WebFilter( asyncSupported = true, initParams = { @javax.servlet.annotation.WebInitParam( name = "keycloak.config.resolver", value = "<%= client.qualified_keycloak_config_resolver_name %>" ) }, urlPatterns = { <%= client.protected_url_patterns.collect{|p|"\"#{p}\""}.join( ', ' )  %> } )
public class <%= client.keycloak_filter_name %>
  extends org.keycloak.adapters.servlet.KeycloakOIDCFilter
{
  @javax.inject.Inject
  private <%= client.qualified_keycloak_filter_interface_name %> _urlFilter;

  private boolean _disabled;

  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "RC_REF_COMPARISON_BAD_PRACTICE_BOOLEAN" } )
  @java.lang.Override
  public void init( final javax.servlet.FilterConfig filterConfig )
    throws javax.servlet.ServletException
  {
    try
    {
      _disabled = new javax.naming.InitialContext().lookup( "<%= client.jndi_debug_key %>" ) == Boolean.TRUE;
    }
    catch ( final java.lang.Exception e )
    {
      //Ignored.
    }
    super.init( filterConfig );
  }

  @java.lang.Override
  public void doFilter( final javax.servlet.ServletRequest request,
                        final javax.servlet.ServletResponse response,
                        final javax.servlet.FilterChain chain )
    throws java.io.IOException, javax.servlet.ServletException
  {
    if ( !_disabled && _urlFilter.shouldProtectRequest( request ) )
    {
      super.doFilter( request, response, chain );
    }
    else
    {
      chain.doFilter( request, response );
    }
  }
}
