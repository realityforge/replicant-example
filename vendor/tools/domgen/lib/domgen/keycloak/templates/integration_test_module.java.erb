/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.keycloak.qualified_integration_test_module_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration" } )
@javax.annotation.Generated( "Domgen" )
public class <%= repository.keycloak.integration_test_module_name %>
  extends org.realityforge.guiceyloops.shared.AbstractModule
{
  @Override
  protected void configure()
  {
<% repository.keycloak.remote_clients.each do |remote_client| -%>
    {
      final org.realityforge.keycloak.client.authfilter.KeycloakConfig config =
        org.realityforge.keycloak.client.authfilter.KeycloakConfig.createPasswordConfig( getKeycloakServerURL( "<%= Reality::Naming.underscore(remote_client.name) %>" ),
                                                                                         getKeycloakRealm( "<%= Reality::Naming.underscore(remote_client.name) %>" ),
                                                                                         getKeycloakClient( "<%= Reality::Naming.underscore(remote_client.name) %>" ),
                                                                                         getKeycloakServiceUsername( "<%= Reality::Naming.underscore(remote_client.name) %>" ),
                                                                                         getKeycloakServicePassword( "<%= Reality::Naming.underscore(remote_client.name) %>" ) );
      bindResource( org.realityforge.keycloak.client.authfilter.KeycloakConfig.class, "<%= remote_client.name %>.KeycloakConfig", config );
      bindResource( org.realityforge.keycloak.client.authfilter.Keycloak.class, "<%= remote_client.name %>.Keycloak", new org.realityforge.keycloak.client.authfilter.Keycloak( config ) );
    }
<% end -%>
  }

  @javax.annotation.Nullable
  protected String getKeycloakServerURL( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.server-url" );
  }

  @javax.annotation.Nullable
  protected String getKeycloakPublicKey( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.public-key" );
  }

  @javax.annotation.Nullable
  protected String getKeycloakRealm( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.realm" );
  }

  @javax.annotation.Nullable
  protected String getKeycloakServiceUsername( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.service_username" );
  }

  @javax.annotation.Nullable
  protected String getKeycloakServicePassword( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.service_password" );
  }

  @javax.annotation.Nullable
  protected String getKeycloakClient( @javax.annotation.Nullable final String prefix )
  {
    return ensureProperty( prefix, "keycloak.client" );
  }

  @javax.annotation.Nonnull
  protected String ensureProperty( @javax.annotation.Nullable final String prefix, @javax.annotation.Nonnull final String key )
  {
    final String p = prefix == null ? "" : prefix + ".";
    final String v = System.getProperties().getProperty( p + key, null );
    if( null == v && null != prefix )
    {
      return ensureProperty( null, key );
    }
    else if( null == v )
    {
      throw new IllegalStateException( "Unable to locate expected configuration property '" + p + key + "' required for tests" );
    }
    else
    {
      return v;
    }
  }
}
