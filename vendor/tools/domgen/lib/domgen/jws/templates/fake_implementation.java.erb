/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.jws.qualified_fake_implementation_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@javax.jws.WebService( serviceName = <%= service.jws.qualified_java_service_name %>.MetaData.SERVICE_NAME, portName = <%= service.jws.qualified_java_service_name %>.MetaData.PORT_NAME, targetNamespace = <%= service.jws.qualified_java_service_name %>.MetaData.NAMESPACE, endpointInterface = <%= service.jws.qualified_java_service_name %>.MetaData.ENDPOINT_INTERFACE, wsdlLocation = <%= service.jws.qualified_java_service_name %>.MetaData.LOCAL_JAR_WSDL_LOCATION )
@com.sun.xml.ws.developer.SchemaValidation
public class <%= service.jws.fake_implementation_name %>
  implements <%= service.jws.qualified_java_service_name %>
{
  private <%= service.jws.qualified_java_service_name %> _delegate;

  public final void setDelegate( final <%= service.jws.qualified_java_service_name %> delegate )
  {
    _delegate = delegate;
  }

<% service.methods.select{|m| m.jws?}.each do |method|
%>  public <%= annotated_type(method.return_value, :jws, :boundary) %> <%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p| "#{annotated_type(p, :jws, :boundary, :final => true)} #{p.name}" }.join(', ') %>)<%=
    method.exceptions.empty? ? '' : "\n    throws #{method.exceptions.collect{|e| e.jws.qualified_name}.join(', ')}"
%>
  {
    <%= method.return_value.return_type == :void ? '' : 'return '  %>_delegate.<%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect {|parameter| parameter.name }.join(', ') %>);
  }

<% end %>}
