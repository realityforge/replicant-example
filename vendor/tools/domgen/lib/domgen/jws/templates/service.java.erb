/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.jws.qualified_java_service_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
@javax.jws.WebService( name = <%= service.jws.java_service_name %>.MetaData.WEB_SERVICE_NAME, targetNamespace = <%= service.jws.java_service_name %>.MetaData.NAMESPACE, wsdlLocation = <%= service.jws.java_service_name %>.MetaData.WSDL_LOCATION )
@javax.jws.soap.SOAPBinding( style = javax.jws.soap.SOAPBinding.Style.DOCUMENT,
                             use = javax.jws.soap.SOAPBinding.Use.LITERAL,
                             parameterStyle = javax.jws.soap.SOAPBinding.ParameterStyle.WRAPPED )
public interface <%= service.jws.java_service_name %>
{
  interface MetaData
  {
    String NAME = "<%= service.jws.boundary_ejb_name %>";
    String NAMESPACE = "<%= service.jws.namespace %>";
    String WSDL_LOCATION = "<%= service.jws.system_id %>";
    String ENDPOINT_INTERFACE = "<%= service.jws.qualified_java_service_name %>";
    String PORT_NAME = "<%= service.jws.port_name %>";
    String SERVICE_NAME = "<%= service.jws.service_name %>";
    String WEB_SERVICE_NAME = "<%= service.jws.web_service_name %>";
    String LOCAL_WAR_WSDL_LOCATION = "WEB-INF/wsdl/<%= service.jws.wsdl_name %>";
    String LOCAL_JAR_WSDL_LOCATION = "META-INF/wsdl/<%= service.jws.wsdl_name %>";
  }

<% service.methods.select{|m| m.jws?}.each do |method|
%>  @javax.jws.WebMethod( operationName = "<%= method.name %>" )
  @javax.xml.ws.RequestWrapper( localName = "<%= method.name %>", targetNamespace = <%= service.jws.java_service_name %>.MetaData.NAMESPACE, className = "<%= service.jws.qualified_java_service_name %>$<%= method.name %>" )
  @javax.xml.ws.ResponseWrapper( localName = "<%= method.name %>Response", targetNamespace = <%= service.jws.java_service_name %>.MetaData.NAMESPACE, className = "<%= service.jws.qualified_java_service_name %>$<%= method.name %>Response" )
  @javax.xml.ws.Action( input = "<%= method.jws.input_action %>", output = "<%= method.jws.output_action %>", fault = {<% method.exceptions.each do |exception|
%>
    @javax.xml.ws.FaultAction( className = <%= exception.jws.qualified_name %>.class, value = "<%= exception.jws.fault_action(method) %>" ),
<% end %>} )
<% if method.return_value.return_type != :void -%>
  @javax.jws.WebResult( targetNamespace = "" )
<% end -%>
  <%= annotated_type(method.return_value, :jws, :boundary) %> <%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p| "@javax.jws.WebParam( name = \"#{p.name}\", mode = javax.jws.WebParam.Mode.IN, header = false, targetNamespace = \"\" ) #{annotated_type(p, :jws, :boundary)} #{p.name}" }.join(', ') %>)<%=
    method.exceptions.empty? ? '' : "\n    throws #{method.exceptions.collect{|e| e.jws.qualified_name}.join(', ')}"
%>;

<% end %>}
