/* DO NOT EDIT: File is auto-generated */
package <%= to_package(dao.jpa.qualified_dao_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "PMD.UnusedPrivateField" } )
@javax.enterprise.context.ApplicationScoped
@javax.transaction.Transactional( javax.transaction.Transactional.TxType.<%= Reality::Naming.uppercase_constantize(dao.jpa.transaction_type.to_s) %> )
@javax.enterprise.inject.Typed( <%= dao.jpa.qualified_dao_service_name %>.class )
public class <%= dao.jpa.dao_name %>
  implements <%= dao.jpa.qualified_dao_service_name %>
{
<% unless dao.repository? -%>
<% dao.queries.select{|q| q.jpa?}.each do |query| -%>
  private static final String <%= Reality::Naming.uppercase_constantize(query.name) %> = "<%= query.qualified_name %>";
<% end %>
<% end -%>
<% dao.queries.select{|q| q.jpa? && !q.basic_result_type?}.collect{|q|q.result_type}.sort.uniq.each do |result_type|
  converter = Domgen::TypeDB.characteristic_type_by_name(result_type).jpa.converter(dao.data_module.sql.dialect)
  if converter
-%>
  private final <%= converter %> _<%= result_type %>Converter = new <%= converter %>();
<% end -%>
<% end -%>
<% if dao.repository? -%>
<% dao.entity.referencing_attributes.select{|a|a.jpa? && a.entity != dao.entity}.collect{|a|a.entity.concrete? ? [a.entity] : [a.entity] + a.entity.subtypes.select{|st|st.concrete? && st.jpa?}}.flatten.uniq.sort{|a,b| a.qualified_name.to_s <=> b.qualified_name.to_s }.each do |entity| -%>
  @javax.inject.Inject
  private <%= entity.dao.jpa.qualified_dao_service_name %> _<%= Reality::Naming.camelize(entity.qualified_name.gsub('.','')) %>Repository;
<% end -%>
<% end -%>
  @javax.persistence.PersistenceContext( unitName = <%= dao.data_module.repository.jpa.qualified_unit_descriptor_name %>.<%= dao.jpa.persistence_unit_name.nil? ? 'NAME' : "#{Reality::Naming.uppercase_constantize(dao.jpa.persistence_unit_name)}_NAME" %> )
  private javax.persistence.EntityManager em;

<% dao.queries.select{|q| q.jpa?}.each do |query| -%>
<%
  requires_result_conversion = !query.basic_result_type?
  method_result_java_type = query.result_type? ? query_component_result_type(query) : nil
  db_result_java_type = method_result_java_type || (dao.repository? ? query.entity.jpa.qualified_name : 'java.lang.Object')
  -%>
  @java.lang.Override
  public <%= query_result_type(query) %> <%= Reality::Naming.camelize(query.name) %>(<%= (query.parameters.collect {|p|  "#{annotated_type(p, :jpa, :default, :final => true)} #{Reality::Naming.camelize(p.name)}"} + [query.jpa.limit ? 'final int limit': nil] + [query.jpa.offset ? 'final int offset': nil]).compact.join(', ') %>)
  {
    final javax.persistence.TypedQuery<<%= db_result_java_type %>> query =
      em.createNamedQuery( <%= dao.repository? ? "#{query.entity.jpa.qualified_name}." : '' %><%= Reality::Naming.uppercase_constantize(query.name) %>, <%= db_result_java_type %>.class );
<%
   if !query.jpa.native?
    query.parameters.each do |p|
%>    query.setParameter( <%= "\"#{p.name}\"" %>, <%= p.remote_reference? ? "#{Reality::Naming.camelize(p.name)}.#{getter_for(p.referenced_remote_entity.primary_key)}" : Reality::Naming.camelize(p.name) %> );
<%  end
   else -%>
<%  query.parameters.each_with_index do |p, index|
    param_suffix = nil
    if p.reference?
      param_suffix = ".#{getter_for(p.referenced_entity.primary_key)}"
    elsif p.remote_reference?
      param_suffix = ".#{getter_for(p.referenced_remote_entity.primary_key)}"
    elsif p.enumeration? && p.enumeration.textual_values?
      param_suffix = '.name()'
    elsif p.enumeration? && p.enumeration.numeric_values?
      param_suffix = '.ordinal()'
    end
    param_value = "#{Reality::Naming.camelize(p.name)}#{param_suffix}"
    if param_suffix && p.nullable?
      param_value = "null == #{Reality::Naming.camelize(p.name)} ? null : #{param_value}"
    end
-%>
    query.setParameter( <%= index + 1 %>, <%= param_value %> );
<%  end
   end -%>
<% if query.jpa.offset -%>
    query.setFirstResult( offset );
<% end -%>
<% if query.jpa.limit -%>
    query.setMaxResults( limit );
<% end -%>
<% if query.query_type == :select -%>
<%
  return_clause = !requires_result_conversion ? 'return ' : query.multiplicity == :many ? "final java.util.List<#{db_result_java_type}> result = " : "final #{db_result_java_type} result = "
  converter_clause = "(#{method_result_java_type}) _#{query.result_type}Converter.convertToEntityAttribute( XXXX )"
-%>
<% if query.multiplicity == :many -%>
    <%= return_clause %>query.getResultList();
<% if requires_result_conversion -%>
    final java.util.ArrayList<<%= method_result_java_type %>> $result = new java.util.ArrayList<<%= method_result_java_type %>>();
    for ( final java.lang.Object $v : result )
    {
      $result.add( <%= converter_clause.gsub('XXXX', '$v') %> );
    }
    return $result;
<% end -%>
<% elsif query.multiplicity == :one -%>
    <%= return_clause %>query.getSingleResult();
<% if requires_result_conversion -%>
    return <%= converter_clause.gsub('XXXX', 'result') %>;
<% end -%>
<% else -%>
    query.setMaxResults( 1 );
    final java.util.List<<%= db_result_java_type %>> resultList = query.getResultList();
    if ( resultList.isEmpty() )
    {
      return null;
    }
    else
    {
      <%= return_clause %>resultList.get( 0 );
<% if requires_result_conversion -%>
    return <%= converter_clause.gsub('XXXX', 'result') %>;
<% end -%>
    }
<% end
   else -%>
    return query.executeUpdate();
<% end -%>
  }

<% end -%>
<% if dao.repository? -%>
<% if dao.entity.concrete? -%>
  @java.lang.Override
  @javax.annotation.Nonnull
  public <%= dao.entity.jpa.qualified_name %> create( <%= dao.entity.attributes.select{|a| !a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %> )
  {
    final <%= dao.entity.jpa.qualified_name %> $_ = new <%= dao.entity.jpa.qualified_name %>( <%= dao.entity.attributes.select{|a| a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| Reality::Naming.camelize(a.name)}.join(', ') %> );
<% dao.entity.attributes.select{|a|!a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent?}.each do |a| -%>
    $_.set<%= a.name %>( <%= Reality::Naming.camelize(a.name) %> );
<% end -%>
    persist( $_ );
    return $_;
  }

  @java.lang.Override
  public void delete( @javax.annotation.Nonnull final <%= dao.entity.jpa.qualified_name %> $_ )
  {
<% dao.entity.referencing_attributes.select{|a|a.jpa? && a.inverse.multiplicity != :many}.each do |a|
  repository_prefix = a.entity == dao.entity ? '' : "_#{Reality::Naming.camelize(a.entity.qualified_name.gsub('.',''))}Repository."
-%>
    {
      final <%= a.entity.jpa.qualified_name %> other = <%= a.inverse.traversable? ? "$_.#{getter_for(a, a.inverse.name)}" : "#{repository_prefix}find#{a.entity.sync? && a.entity.sync.transaction_time? ? 'Undeleted' : ''}By#{a.name}( $_ )" -%>;
      if( null != other )
      {
<% if a.nullable? && !a.immutable? && !a.set_once? -%>
        other.set<%= a.name %>( null );
<% else -%>
<% if a.entity.abstract? -%>
        <% a.entity.subtypes.select{|st|st.concrete? && st.jpa?}.each do |st|
repository_prefix = st == dao.entity ? '' : "_#{Reality::Naming.camelize(st.qualified_name.gsub('.',''))}Repository."
  -%>if( other instanceof <%= st.jpa.qualified_name %> )
        {
          <%= repository_prefix %>delete( (<%= st.jpa.qualified_name %>) other );
        }
        else <% end %>
        {
          throw new java.lang.IllegalStateException( "Unknown subtype: " + other.getClass().getName() + " instance: " + other );
        }
<% else -%>
        <%= repository_prefix %>delete( other );
<% end -%>
<% end -%>
      }
    }
<% end -%>
<% dao.entity.referencing_attributes.select{|a|a.jpa? && a.inverse.multiplicity == :many}.each do |a|
  repository_prefix = a.entity == dao.entity ? '' : "_#{Reality::Naming.camelize(a.entity.qualified_name.gsub('.',''))}Repository."
-%>
    {
      for ( final <%= a.entity.jpa.qualified_name %> other : new java.util.ArrayList<>( <%= a.inverse.jpa.java_traversable? ? "$_.#{getter_for(a, Reality::Naming.pluralize(a.inverse.name))}" : "#{repository_prefix}findAll#{a.entity.sync? && a.entity.sync.transaction_time? ? 'Undeleted' : ''}By#{a.name}( $_ )" -%> ) )
      {
<% if a.nullable? && !a.immutable? && !a.set_once? -%>
        other.set<%= a.name %>( null );
<% else -%>
<% if a.entity.abstract? -%>
        <% a.entity.subtypes.select{|st|st.concrete? && st.jpa?}.each do |st|
repository_prefix = st == dao.entity ? '' : "_#{Reality::Naming.camelize(st.qualified_name.gsub('.',''))}Repository."
  -%>if( other instanceof <%= st.jpa.qualified_name %> )
        {
          <%= repository_prefix %>delete( (<%= st.jpa.qualified_name %>) other );
        }
        else <% end %>
        {
          throw new java.lang.IllegalStateException( "Unknown subtype: " + other.getClass().getName() + " instance: " + other );
        }
<% else -%>
        <%= repository_prefix %>delete( other );
<% end -%>
<% end -%>
      }
    }
<% end -%>
<% if dao.entity.sync? && dao.entity.sync.transaction_time? -%>
    $_.setDeletedAt( new java.util.Date() );
<% else -%>
    remove( $_ );
<% end -%>
  }

<% dao.entity.jpa.create_defaults.each do |defaults| -%>
  @java.lang.Override
  @javax.annotation.Nonnull
  public <%= dao.entity.jpa.qualified_name %> create( <%= dao.entity.attributes.select{|a| !a.generated_value? && a.jpa? && a.jpa.persistent? && !defaults.has_attribute?(a.name) }.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %> )
  {
    return create( <%= dao.entity.attributes.select{|a|!a.generated_value? && a.jpa? && a.jpa.persistent?}.collect {|a| defaults.has_attribute?(a.name) ? defaults.value_for(a.name) : Reality::Naming.camelize(a.name) }.join(', ') %> );
  }

<% end -%>
<% if dao.entity.attributes.any?{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent?} -%>
  @java.lang.Override
  public void update( @javax.annotation.Nonnull final <%= dao.entity.jpa.qualified_name %> $_, <%= dao.entity.attributes.select{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %>)
  {
<% dao.entity.attributes.select{|a|!a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent?}.each do |a| -%>
    $_.set<%= a.name %>( <%= Reality::Naming.camelize(a.name) %> );
<% end -%>
  }
<% dao.entity.jpa.update_defaults.each do |defaults|
    attr = dao.entity.attributes.select{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent? && (!defaults.has_attribute?(a.name) || !defaults.value_for(a.name).nil?)}
    non_default_attr = attr.select{|a| !defaults.has_attribute?(a.name)}
  -%>

  @java.lang.Override
  public void <%= defaults.factory_method_name %>( @javax.annotation.Nonnull final <%= dao.entity.jpa.qualified_name %> $_<%= non_default_attr.empty? ? '' : ', ' %><%= non_default_attr.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %> )
  {
<% attr.each do |a| -%>
    $_.set<%= a.name %>( <%= defaults.has_attribute?(a.name) ? defaults.value_for(a.name) : Reality::Naming.camelize(a.name) %> );
<% end -%>
  }
<% end -%>
<% end -%>
<% end -%>
<% if dao.entity.jpa.detachable? -%>

  @java.lang.Override
  public void detach( final <%= dao.entity.jpa.qualified_name %> entity )
  {
    em.detach( entity );
  }

  @java.lang.Override
  public <%= dao.entity.jpa.qualified_name %> merge( final <%= dao.entity.jpa.qualified_name %> entity )
  {
    return em.merge( entity );
  }

<% end -%>
  @java.lang.Override
  public void persist( final <%= dao.entity.jpa.qualified_name %> entity )
  {
    em.persist( entity );
    em.flush();
  }

  @java.lang.Override
  public void refresh( final <%= dao.entity.jpa.qualified_name %> entity )
  {
    em.refresh( entity );
  }

  @java.lang.Override
  public void remove( final <%= dao.entity.jpa.qualified_name %> entity )
  {
    em.remove( entity );
    em.flush();
  }
<% end -%>
}
