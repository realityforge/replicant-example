/* DO NOT EDIT: File is auto-generated */
package <%= to_package(entity.jpa.qualified_name) %>;

@javax.annotation.Generated( "Domgen" )
@edu.umd.cs.findbugs.annotations.SuppressFBWarnings( { "EI_EXPOSE_REP", "EI_EXPOSE_REP2", "BC_VACUOUS_INSTANCEOF" } )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc", "PMD.UnusedPrivateField", "deprecated" } )
<%
   jpa_queries = entity.queries.select {|q| q.jpa? && !q.jpa.native? }
   if !jpa_queries.empty? %>@javax.persistence.NamedQueries( value = {
<%= jpa_queries.collect do |q|
  "  @javax.persistence.NamedQuery( name = #{entity.jpa.name}.#{Reality::Naming.uppercase_constantize(q.name)}, query = \"#{q.jpa.query_string.gsub('"',"\\\"")}\", hints = {#{q.jpa.actual_hints.collect{|k,v| "@javax.persistence.QueryHint(name = \"#{k}\", value = \"#{v}\")"}.join(', ')}} )"
  end.join(",\n") %>
} )<% end %>
<%
   native_queries = entity.queries.select {|q| q.jpa? && q.jpa.native? }
   if !native_queries.empty? %>@javax.persistence.NamedNativeQueries( value = {
<%= native_queries.collect { |q|
  result = ''
  result = ", resultClass = #{entity.jpa.name}.class" if q.jpa.native? && :select == q.query_type && q.result_entity?
  result = ", resultSetMapping = \"#{q.qualified_name}\"" if q.jpa.native? && :select == q.query_type && q.result_struct?
  "  @javax.persistence.NamedNativeQuery( name = #{entity.jpa.name}.#{Reality::Naming.uppercase_constantize(q.name)}, query = \"#{q.jpa.query_string.gsub('"',"\\\"")}\"#{result}, hints = {#{q.jpa.actual_hints.collect{|k,v| "@javax.persistence.QueryHint(name = \"#{k}\", value = \"#{v}\")"}.join(', ')}} )"
  }.join(",\n")
        %>
} )<% end -%>
@javax.persistence.Access( javax.persistence.AccessType.FIELD )
@javax.persistence.Entity( name = "<%= entity.jpa.jpql_name %>" )
<% if entity.extends.nil? -%>
<% if entity.direct_subtypes.size != 0 -%>
@javax.persistence.Inheritance( strategy = javax.persistence.InheritanceType.SINGLE_TABLE )
@javax.persistence.DiscriminatorColumn( name = "_type_", discriminatorType = javax.persistence.DiscriminatorType.STRING )
<% end -%>
@javax.persistence.Table( name = "<%= entity.jpa.table_name %>",
                          schema = "<%= entity.data_module.sql.schema %>",
                          uniqueConstraints = {<%=
  entity.attributes.select{|a|a.unique?}.collect{|a|
  "@javax.persistence.UniqueConstraint( columnNames = {\"#{a.sql.column_name}\"})"
  }.join(",\n                          ")
%>},
                          indexes = {<%= entity.sql.indexes.collect{|index|
        "@javax.persistence.Index(name =\"#{index.index_name}\", columnList = \"#{index.attribute_names.collect{|a| "#{entity.attribute_by_name(a).sql.column_name} ASC"}.join(', ')}\", unique = #{index.unique?} /* cluster = #{index.cluster?}, gist = #{index.gist?}, filter = \"#{index.filter}\", includeColumnList = \"#{index.include_attribute_names.collect{|a| "#{ entity.attribute_by_name( a).sql.column_name} ASC"}.join(', ')}\",  */)"
        }.join(",\n                   ")
%>})
<% else -%>
@javax.persistence.DiscriminatorValue( value = "<%= entity.sql.discriminator %>" )
<% end -%>
<% if entity.read_only? && entity.data_module.repository.jpa.provider == :eclipselink %>
@org.eclipse.persistence.annotations.ReadOnly
<% end -%>
<% if entity.jpa.entity_listeners.size > 0 %>
@javax.persistence.EntityListeners( { <%= entity.jpa.entity_listeners.collect{|l| "#{l}.class"}.join( ', ' ) %> } )
<% end -%>
@javax.persistence.Cacheable( <%= entity.jpa.cacheable? ? 'true' : 'false' %> )
<% if entity.data_module.repository.ee.version != '6' %>@javax.enterprise.inject.Vetoed
<% end -%>
<% entity.xor_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c| %>
@<%= entity.jpa.name %>.<%= validation_name(c.name) %><% end -%>
<% entity.codependent_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c| %>
@<%= entity.jpa.name %>.<%= validation_name(c.name) %><% end -%>
<% entity.dependency_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c| %>
@<%= entity.jpa.name %>.<%= validation_name(c.name) %><% end -%>
<% entity.incompatible_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c| %>
@<%= entity.jpa.name %>.<%= validation_name(c.name) %><% end -%>
<% entity.relationship_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c| %>
@<%= entity.jpa.name %>.<%= validation_name(c.name) %><% end -%>
<% entity.cycle_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c| %>
@<%= entity.jpa.name %>.<%= validation_name(c.name) %><% end %>
public <%= entity.abstract? ? 'abstract ' : '' %>class <%= entity.jpa.name %>
<%= entity.extends ?
  "    extends #{entity.data_module.entity_by_name(entity.extends).jpa.qualified_name}\n" :
  '' -%>
<%= (!entity.extends || entity.jpa.interfaces.size > 0) ? '  implements ' : '' -%><%= ((entity.extends ? [] : %w(java.io.Serializable)) + entity.jpa.interfaces).join(", ") %>
{
<% entity.declared_attributes.select { |a| !a.abstract? && a.jpa? && a.jpa.persistent? && a.text? && a.has_non_max_length? }.each do |attribute| -%>
  public static final int <%= Reality::Naming.uppercase_constantize(attribute.name) -%>_MAX_SIZE = <%= attribute.length -%>;
<% end -%>
  private static final long serialVersionUID = 1;

<% if entity.declared_attributes.any? { |a| a.remote_reference? } -%>
  @javax.persistence.Transient
  private transient org.realityforge.replicant.client.EntitySystem _$entitySystem;
<% end -%>
<% unless entity.extends -%>
  @javax.persistence.Transient
  private transient boolean _loaded;
  @javax.persistence.Transient
  private transient boolean _removed;
<% end -%>
<% entity.queries.select{|q| q.jpa?}.each do |query| %>  public static final String <%= Reality::Naming.uppercase_constantize(query.name) %> = "<%= query.qualified_name %>";
<%
  end
  entity.declared_attributes.select { |a| !a.abstract? && a.jpa? && a.jpa.persistent? }.each do |attribute|
    type = attribute.remote_reference? ? attribute.referenced_remote_entity.primary_key.jpa.non_primitive_java_type : attribute.jpa.java_type
    field_name = attribute.remote_reference? ? attribute.jpa.field_name(:transport) : attribute.jpa.field_name
%>
<%= j_jpa_field_attributes(attribute) -%>  private <%= type %> <%= field_name %>;
<% if !attribute.immutable? && entity.jpa.track_changes? -%>
  @javax.persistence.Transient
  private transient <%= type %> <%= field_name %>Original;
<% if attribute.jpa.fetch_type == :lazy -%>
  @javax.persistence.Transient
  private transient boolean <%= field_name %>Recorded;
<% end -%>
<% end -%>
<% if attribute.remote_reference? -%>
  @javax.persistence.Transient
  private transient <%= attribute.jpa.java_type %> <%= attribute.jpa.field_name %>;
<% end -%>
<% end %>
<% entity.referencing_attributes.
  select { |attribute| !(attribute.abstract? || attribute.inherited?) && attribute.inverse.jpa? && attribute.inverse.jpa.traversable? }.
  each do |attribute| %><%= j_declared_relation(attribute) %>
<% end %>
<%= j_constructors(entity) %>
<%= j_declared_attribute_and_relation_accessors(entity) %>
<%= j_equals_method(entity) %>
<%= j_to_string_methods(entity) -%>

<% unless entity.extends -%>
  protected final boolean loaded()
  {
    return _loaded;
  }

  public final boolean removed()
  {
    return _removed;
  }

  protected final void verifyNotRemoved()
  {
    if( removed() )
    {
      throw new IllegalStateException( "Attempting to manipulate entity that has been removed" );
    }
  }
<% end -%>

<% if entity.jpa.track_changes? -%>
  @javax.persistence.PostLoad
  protected void postLoad()
  {
<% if entity.extends -%>
    super.postLoad();
<% else -%>
    _loaded = true;
<% end -%>
<% entity.declared_attributes.select { |a| !a.immutable? && !a.abstract? && a.jpa? && a.jpa.persistent? && a.jpa.fetch_type == :eager }.each do |attribute|
  field_name = attribute.remote_reference? ? attribute.jpa.field_name(:transport) : attribute.jpa.field_name
  -%>
    <%= field_name %>Original = <%= field_name %>;
<% end -%>
  }

  public boolean unmodified()
  {
    return
      loaded() &&
<% if entity.extends -%>
      super.unmodified() &&
<% end -%>
<% entity.declared_attributes.select { |a| !a.immutable? && !a.abstract? && a.jpa? && a.jpa.persistent? && a.jpa.fetch_type == :eager }.each do |attribute|
  field_name = attribute.remote_reference? ? attribute.jpa.field_name(:transport) : attribute.jpa.field_name
  -%>
<% if attribute.nullable? -%>
      ((<%= field_name %>Original == null &&  <%= field_name %> == null) || (<%= field_name %>Original != null && <%= field_name %>Original.equals( <%= field_name %> ) ) ) &&
<% elsif attribute.text? || attribute.date? || attribute.datetime? || attribute.geometry? -%>
      <%= field_name %>Original.equals( <%= field_name %> ) &&
<% else -%>
      <%= field_name %>Original == <%= field_name %> &&
<% end -%>
<% end -%>
<% entity.declared_attributes.select { |a| !a.immutable? && !a.abstract? && a.jpa? && a.jpa.persistent? && a.jpa.fetch_type == :lazy }.each do |attribute|
  field_name = attribute.remote_reference? ? attribute.jpa.field_name(:transport) : attribute.jpa.field_name
-%>
<% if attribute.nullable? -%>
      (!<%= field_name %>Recorded || ((<%= field_name %>Original == null &&  <%= field_name %> == null) || (<%= field_name %>Original != null && <%= field_name %>Original.equals( <%= field_name %> ) ) ) ) &&
<% elsif attribute.text? || attribute.date? || attribute.datetime? || attribute.geometry? -%>
      (!<%= field_name %>Recorded || <%= field_name %>Original.equals( <%= field_name %> ) ) &&
<% else -%>
      (!<%= field_name %>Recorded || <%= field_name %>Original == <%= field_name %> ) &&
<% end -%>
<% end -%>
      true;
  }
<% end -%>

  @javax.persistence.PostRemove
  protected void postRemove()
  {
    if( removed() )
    {
      throw new IllegalStateException( "Attempting to remove already removed entity" );
    }
<% if entity.extends -%>
    super.postRemove();
<% else -%>
    _removed = true;
<% end -%>
  }
<%
  attributes_to_delink_in_remove =
    entity.declared_attributes.select { |attribute| attribute.reference? && !(attribute.abstract? || attribute.inherited?) && attribute.inverse.jpa.java_traversable? && attribute.inverse.jpa.traversable? }
  if attributes_to_delink_in_remove.size > 0
%>

  <% if entity.sync? && entity.sync.transaction_time? -%>
  /**
   * This method should not be called directly. It is called from the constructor of #{attribute.entity.jpa.qualified_name}.
   * @deprecated
   */
  @java.lang.Deprecated
  public<% else -%>private<% end -%> void delinkDuringPreRemove()
  {
<% attributes_to_delink_in_remove.each do |attribute| -%>
    if ( null != <%= attribute.jpa.field_name %> )
    {
      <%= attribute.jpa.field_name %>.remove<%= attribute.inverse.name %>( this );
    }
<% end -%>
  }

  @javax.persistence.PreRemove
  protected void preRemove()
  {
    delinkDuringPreRemove();
  }
<% elsif entity.sync? && entity.sync.transaction_time? -%>

  /**
   * This method should not be called directly. It is called from the constructor of #{attribute.entity.jpa.qualified_name}.
   * @deprecated
   */
  @java.lang.Deprecated
  public void delinkDuringPreRemove()
  {
  }
<% end -%>
<%
      entity.codependent_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c|
        attributes = c.attribute_names.collect {|attribute_name| entity.attribute_by_name(attribute_name)}
-%>
<%= validation_prefix(c.name, entity) %>
        if( !(( <%= attributes.collect {|a| "object.#{getter_for(a)} == null"}.join(' && ') %> ) || (<%= attributes.collect {|a| "object.#{getter_for(a)} != null"}.join(' && ') %>) ) )
        {
          return false;
        }
<%= validation_suffix() %>
<% end -%>
<%
      entity.xor_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c|
        attributes = c.attribute_names.collect {|attribute_name| entity.attribute_by_name(attribute_name)}
-%>
<%= validation_prefix(c.name, entity) %>
        int count = 0;
<% attributes.each do |a| -%>
        count += (object.<%= getter_for(a) %> == null ? 0 : 1);
<% end -%>
        if( 1 != count )
        {
          return false;
        }
<%= validation_suffix() %>
<% end -%>
<%
      entity.incompatible_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c|
        attributes = c.attribute_names.collect {|attribute_name| entity.attribute_by_name(attribute_name)}
-%>
<%= validation_prefix(c.name, entity) %>
        if( (<% attributes.each do |selected| -%>(<%= "null != object.#{getter_for(selected)}" %> && (<%= attributes.collect {|a| a == selected ? nil : "null != object.#{getter_for(a)}"}.compact.join(' || ') %>)) || <% end -%> false) )
        {
          return false;
        }
<%= validation_suffix() %>
<% end -%>
<%
      entity.relationship_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c|
        lhs = entity.attribute_by_name(c.lhs_operand)
        rhs = entity.attribute_by_name(c.rhs_operand)
        op = c.class.operators[c.operator]
        op_prefix = ''
        if lhs.date? || lhs.datetime?
          if '=' == op
            op = '.equals'
          elsif '!=' == op
            op = '.equals'
            op_prefix = '!'
          elsif '>' == op
            op = '.after'
          elsif '<=' == op
            op = '.after'
            op_prefix = '!'
          elsif '<' == op
            op = '.before'
          elsif '>=' == op
            op = '.before'
            op_prefix = '!'
          end
        end
        op = '==' if '=' == op
-%>
<%= validation_prefix(c.name, entity) %>
        if( <% if lhs.nullable? %>null != object.<%= getter_for(lhs) %> && <% end %><% if rhs.nullable? %>null != object.<%= getter_for(rhs) %> && <% end %>!( <%= op_prefix %>(object.<%= getter_for(lhs) %>)<%= op %>(object.<%= getter_for(rhs) %>) ) )
        {
          return false;
        }
<%= validation_suffix() %>
<% end -%>
<%
      entity.cycle_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c|
        target_attribute = entity.attribute_by_name(c.attribute_name)
        first_attribute_step = self.entity.attribute_by_name(c.attribute_name_path[0])
        scoping_attribute = target_attribute.referenced_entity.attribute_by_name(c.scoping_attribute)

        last_is_primitive = false
        current_entity = entity
        elements = c.attribute_name_path.collect do |element_name|
          new_attr = current_entity.attribute_by_name(element_name)
          current_entity = new_attr.referenced_entity
          last_is_primitive = current_entity.primary_key.jpa.primitive?(:default)
          new_attr
        end

-%>
<%= validation_prefix(c.name, entity) %>
        if( <% if target_attribute.nullable? %>null != object.<%= getter_for(target_attribute) %> && <% end %><% if first_attribute_step.nullable? %>null != object.<%= getter_for(first_attribute_step) %> && <% end %>!((object.<%= getter_for(target_attribute) %>.<%= getter_for(scoping_attribute) %>.<%= getter_for(scoping_attribute.entity.primary_key) %> <%= last_is_primitive ? ' == ' : '.equals' %>(object.<%= elements.collect{|e|getter_for(e)}.join('.') %>.<%= getter_for(elements.last.entity.primary_key) %> ) ) ) )
        {
          return false;
        }
<%= validation_suffix() %>
<% end -%>
<%
      entity.dependency_constraints.select {|c| jpa_validation_in_jpa?(c) }.each do |c|
        dependent_attributes = c.dependent_attribute_names.collect {|attribute_name| entity.attribute_by_name(attribute_name)}
        base_attribute = entity.attribute_by_name(c.attribute_name)
-%>
<%= validation_prefix(c.name, entity) %>
        if( !(null == object.<%= getter_for(base_attribute) %> || (<%= dependent_attributes.collect {|a| "object.#{getter_for(a)} != null"}.join(' && ') %>) ) )
        {
          return false;
        }
<%= validation_suffix() %>
<% end -%>
<% if  entity.declared_attributes.any? { |a| a.remote_reference? }-%>

  @java.lang.SuppressWarnings( "unchecked" )
  @javax.annotation.Nonnull
  private org.realityforge.replicant.client.EntitySystem getEntitySystem()
  {
    if( null == _$entitySystem )
    {
      final javax.enterprise.inject.spi.BeanManager beanManager = javax.enterprise.inject.spi.CDI.current().getBeanManager();
      final javax.enterprise.inject.spi.Bean<org.realityforge.replicant.client.EntitySystem> bean = (javax.enterprise.inject.spi.Bean<org.realityforge.replicant.client.EntitySystem>) beanManager.getBeans( org.realityforge.replicant.client.EntitySystem.class ).iterator().next();
      final javax.enterprise.context.spi.CreationalContext<org.realityforge.replicant.client.EntitySystem> context = beanManager.createCreationalContext( bean );
      _$entitySystem = (org.realityforge.replicant.client.EntitySystem) beanManager.getReference( bean, org.realityforge.replicant.client.EntitySystem.class, context );
    }
    return _$entitySystem;
  }
<% end -%>

  @javax.annotation.Nonnull
  public <%= entity.jpa.name %> self()
  {
    return this;
  }
}
