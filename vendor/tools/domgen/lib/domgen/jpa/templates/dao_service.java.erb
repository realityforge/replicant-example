/* DO NOT EDIT: File is auto-generated */
package <%= to_package(dao.jpa.qualified_dao_service_name) %>;

@javax.annotation.Generated( "Domgen" )
@java.lang.SuppressWarnings( { "UnusedDeclaration", "JavaDoc" } )
public interface <%= dao.jpa.dao_service_name %>
{
<% dao.queries.select{|q| q.jpa?}.each do |query| -%>
  <%= query_result_type(query) %> <%= Reality::Naming.camelize(query.name) %>(<%= (query.parameters.collect {|p| "#{p.jpa.primitive? ? '' : nullability_annotation(p.nullable?)} #{p.jpa.java_type} #{p.name}"} + [query.jpa.limit ? 'int limit': nil] + [query.jpa.offset ? 'int offset': nil]).compact.join(', ') %>);

<% end -%>
<% if dao.repository? -%>
<% if dao.entity.concrete? -%>
  /** Create the <%= dao.entity.jpa.qualified_name %> with specified parameters. */
  @javax.annotation.Nonnull
  <%= dao.entity.jpa.qualified_name %> create( <%= dao.entity.attributes.select{|a| !a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| "#{annotated_type(a, :jpa, :default)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %> );

  /** Delete the <%= dao.entity.jpa.qualified_name %>, recursivly nulling references/deleting dependent entities. */
  void delete( @javax.annotation.Nonnull <%= dao.entity.jpa.qualified_name %> $_ );

<% dao.entity.jpa.create_defaults.each do |defaults| -%>
  @javax.annotation.Nonnull
  <%= dao.entity.jpa.qualified_name %> create( <%= dao.entity.attributes.select{|a| !a.generated_value? && a.jpa? && a.jpa.persistent? && !defaults.has_attribute?(a.name) }.collect{|a| "#{annotated_type(a, :jpa, :default, :final => true)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %> );

<% end -%>
<% if dao.entity.attributes.any?{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent?} -%>
  /** Update the <%= dao.entity.jpa.qualified_name %> with specified parameters. */
  void update( @javax.annotation.Nonnull <%= dao.entity.jpa.qualified_name %> $_, <%= dao.entity.attributes.select{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent?}.collect{|a| "#{annotated_type(a, :jpa, :default)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %>);

<% dao.entity.jpa.update_defaults.each do |defaults|
    attr = dao.entity.attributes.select{|a| !a.immutable? && !a.generated_value? && a.jpa? && a.jpa.persistent? && (!defaults.has_attribute?(a.name) || !defaults.value_for(a.name).nil?)}
    non_default_attr = attr.select{|a| !defaults.has_attribute?(a.name)}
  -%>
  /** Update the <%= dao.entity.jpa.qualified_name %> with specified parameters. */
  void <%= defaults.factory_method_name %>( @javax.annotation.Nonnull <%= dao.entity.jpa.qualified_name %> $_<%= non_default_attr.empty? ? '' : ', ' %><%= non_default_attr.collect{|a| "#{annotated_type(a, :jpa, :default)} #{Reality::Naming.camelize(a.name)}"}.join(', ') %> );

<% end -%>
<% end -%>
<% end -%>
<% if dao.entity.jpa.detachable? -%>
  /** Remove the given  <%= dao.entity.jpa.qualified_name %> from the persistence context, causing a managed entity to become detached. */
  void detach( <%= dao.entity.jpa.qualified_name %> entity );

  /** Merge the state of the given <%= dao.entity.jpa.qualified_name %> into the current persistence context. */
  <%= dao.entity.jpa.qualified_name %> merge( <%= dao.entity.jpa.qualified_name %> entity );
<% end -%>
  /** Make an <%= dao.entity.jpa.qualified_name %> instance managed and persistent. */
  void persist( <%= dao.entity.jpa.qualified_name %> entity );

  /** Refresh the state of the <%= dao.entity.jpa.qualified_name %> instance from the database, overwriting changes made to the entity, if any. */
  void refresh( <%= dao.entity.jpa.qualified_name %> entity );

  /** Remove the <%= dao.entity.jpa.qualified_name %> instance. */
  void remove( <%= dao.entity.jpa.qualified_name %> entity );
<% end -%>
}
