/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.jpa.qualified_abstract_entity_test_name) %>;

@java.lang.SuppressWarnings( { "UnusedDeclaration" } )
@javax.annotation.Generated( "Domgen" )
public abstract class <%= repository.jpa.abstract_entity_test_name %>
  extends org.realityforge.guiceyloops.server.AbstractServerTest
{
<% repository.jpa.test_factories.each do |short_code, classname| -%>
  @javax.annotation.Nonnull
  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings( "NP_NONNULL_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR" )
  protected <%= classname %> <%= short_code %>;
<% end -%>

  @org.testng.annotations.BeforeMethod
  public void preTest()
    throws Exception
  {
    super.preTest();
<% if repository.application.remote_references_included?-%>
    org.realityforge.replicant.client.test.ee.ReplicantEntityCustomizer.configure( em(), s( org.realityforge.replicant.client.EntitySystem.class ) );
<% end -%>
<% repository.jpa.test_factories.each do |short_code, classname| -%>
    <%= short_code %> = s( <%= classname %>.class );
<% end -%>
<%
  # TODO - there should be a better way of doing this. Perhaps Runnables/Actions that are added by facets?
  if repository.imit?
-%>
    s( javax.transaction.TransactionSynchronizationRegistry.class ).putResource( "ReplicationActive", "Test" );
<% end -%>
  }
<% repository.jpa.test_modules.each_pair do |name, classname| -%>

  @javax.annotation.Nullable
  protected com.google.inject.Module new<%= name %>()
  {
    return new <%= classname =~ /\(/ ? classname : "#{classname}()" %>;
  }
<% end -%>
<% repository.jpa.test_class_contents.each do |content| -%>
<%= content -%>
<% end -%>

  @java.lang.Override
  protected com.google.inject.Module[] getModules()
  {
    final java.util.ArrayList<com.google.inject.Module> modules = new java.util.ArrayList<>();
    java.util.Collections.addAll( modules, super.getModules() );
<% repository.jpa.test_modules.keys.each do |name| -%>
    addModule( modules, new<%= name %>() );
<% end -%>
    return modules.toArray( new com.google.inject.Module[ modules.size() ] );
  }
}
