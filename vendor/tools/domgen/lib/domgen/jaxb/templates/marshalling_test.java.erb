/* DO NOT EDIT: File is auto-generated */
package <%= to_package(repository.jaxb.qualified_marshalling_test_name) %>;

@java.lang.SuppressWarnings( "deprecation" )
public class <%= repository.jaxb.marshalling_test_name %>
{
<%
  repository.data_modules.select{|dm|dm.jaxb?}.each do |data_module|
    data_module.enumerations.select{|e|e.jaxb?}.each do |enumeration|
-%>
  @org.testng.annotations.Test
  public void marshal<%= data_module.name %><%= enumeration.name %>()
    throws Exception
  {
    final java.io.StringWriter xml = new java.io.StringWriter();
    final <%= enumeration.ee.qualified_name %> input = <%= enumeration.ee.qualified_name %>.<%= enumeration.values[0].name %>;
    javax.xml.bind.JAXB.marshal( input, xml );
    final String data = xml.toString();
    org.testng.Assert.assertTrue( data.contains( "><%= enumeration.numeric_values? ? '0' : enumeration.values[0].name %><" ) );
<% if enumeration.top_level? -%>
    final javax.xml.validation.SchemaFactory schemaFactory = javax.xml.validation.SchemaFactory.newInstance( javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI );
    final java.net.URL resource = getClass().getResource( "/<%= data_module.xml.resource_xsd_name %>" );
    org.testng.Assert.assertNotNull( resource );
    schemaFactory.newSchema( resource ).newValidator().validate( new javax.xml.transform.stream.StreamSource( new java.io.StringReader( data ) ) );
<% end -%>
    final <%= enumeration.ee.qualified_name %> output = javax.xml.bind.JAXB.unmarshal( new java.io.StringReader( data ), <%= enumeration.ee.qualified_name %>.class );
    org.testng.Assert.assertEquals( output, input );
  }
<%
    end

def create_parameter_value(p, parent_context = nil)
  type_spec = ''
  v =
    if p.integer?
      "1"
    elsif p.reference?
      create_parameter_value(p.referenced_entity.primary_key)
    elsif p.boolean?
      "true"
    elsif p.enumeration?
      "#{p.enumeration.ee.qualified_name}.#{p.enumeration.values[0].name}"
    elsif p.struct?
      if parent_context == p.referenced_struct
        type_spec = "<#{p.referenced_struct.ee.qualified_name}>"
        ''
      else
        create_struct(p.referenced_struct, p.characteristic_container)
      end
    elsif p.datetime?
      "new java.util.Date(77, 11, 3, 22, 32)"
    elsif p.date?
      "new java.util.Date(77, 11, 3)"
    elsif p.text?
      "\"HelloWorld\""
    else
      Domgen.error("Unknown parameter type for #{p.qualified_name}")
    end
  !p.collection? ? v : (p.collection_type == :sequence) ? "java.util.Arrays.#{type_spec}asList( #{v} )" : "new java.util.HashSet<>( java.util.Arrays.#{type_spec}asList( #{v} ) )"
end

def create_struct(struct, context)
  result = "new #{struct.ee.qualified_name}("
  result << struct.fields.collect { |p| create_parameter_value(p, context) }.join(", ")
  result << ")"
end

    data_module.structs.select{|s|s.jaxb?}.each do |struct|
%>
  @org.testng.annotations.Test
  public void marshal<%= data_module.name %><%= struct.name %>()
    throws Exception
  {
    final java.io.StringWriter xml = new java.io.StringWriter();
    final <%= struct.ee.qualified_name %> input = <%= create_struct(struct, nil) %>;
    javax.xml.bind.JAXB.marshal( input, xml );
    final String data = xml.toString();
<% if struct.top_level? -%>
    final javax.xml.validation.SchemaFactory schemaFactory = javax.xml.validation.SchemaFactory.newInstance( javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI );
    final java.net.URL resource = getClass().getResource( "/<%= data_module.xml.resource_xsd_name %>" );
    org.testng.Assert.assertNotNull( resource );
    schemaFactory.setResourceResolver( new TestLSResourceResolver() );
    schemaFactory.newSchema( resource ).newValidator().validate( new javax.xml.transform.stream.StreamSource( new java.io.StringReader( data ) ) );
<% end -%>
    final <%= struct.ee.qualified_name %> output = javax.xml.bind.JAXB.unmarshal( new java.io.StringReader( data ), <%= struct.ee.qualified_name %>.class );
    org.testng.Assert.assertEquals( output, input );
  }
<%
    end
  end
-%>

  private class TestLSResourceResolver
    implements org.w3c.dom.ls.LSResourceResolver
  {
    @java.lang.Override
    public org.w3c.dom.ls.LSInput resolveResource( final String type,
                                                   final String namespaceURI,
                                                   final String publicId,
                                                   final String systemId,
                                                   final String baseURI )
    {
<%
  repository.data_modules.select{|dm|dm.jaxb?}.each do |data_module|
%>
      if ( "<%= data_module.xml.namespace %>".equals( namespaceURI ) ||
           "<%= data_module.xml.namespace %>".equals( systemId ) ||
           "<%= data_module.xml.namespace %>".equals( publicId ) )
      {
        try
        {
          final java.io.InputStream inputStream = getClass().getResourceAsStream( "/<%= data_module.xml.resource_xsd_name %>" );
          org.testng.Assert.assertNotNull( inputStream );
          return new TestLSInput( "<%= data_module.xml.namespace %>", "<%= data_module.xml.namespace %>", inputStream );
        }
        catch ( final Exception e )
        {
          throw new RuntimeException( e );
        }
      }
<%
  end
%>      return null;
    }
  }

  private static class TestLSInput
    implements org.w3c.dom.ls.LSInput
  {
    private final String _publicID;
    private final String _systemID;
    private final java.io.InputStream _inputStream;

    private TestLSInput( final String publicID, final String systemID, final java.io.InputStream inputStream )
    {
      _publicID = publicID;
      _systemID = systemID;
      _inputStream = inputStream;
    }

    @java.lang.Override
    public java.io.Reader getCharacterStream()
    {
      return null;
    }

    @java.lang.Override
    public void setCharacterStream( final java.io.Reader characterStream )
    {
    }

    @java.lang.Override
    public java.io.InputStream getByteStream()
    {
      return null;
    }

    @java.lang.Override
    public void setByteStream( final java.io.InputStream byteStream )
    {
    }

    @java.lang.Override
    public String getStringData()
    {
      synchronized ( _inputStream )
      {
        try
        {
          final byte[] input = new byte[ _inputStream.available() ];
          _inputStream.read( input );
          return new String( input );
        }
        catch ( java.io.IOException e )
        {
          return null;
        }
      }
    }

    @java.lang.Override
    public void setStringData( final String stringData )
    {

    }

    @java.lang.Override
    public String getSystemId()
    {
      return _systemID;
    }

    @java.lang.Override
    public void setSystemId( final String systemId )
    {

    }

    @java.lang.Override
    public String getPublicId()
    {
      return _publicID;
    }

    @java.lang.Override
    public void setPublicId( final String publicId )
    {

    }

    @java.lang.Override
    public String getBaseURI()
    {
      return null;
    }

    @java.lang.Override
    public void setBaseURI( final String baseURI )
    {

    }

    @java.lang.Override
    public String getEncoding()
    {
      return null;
    }

    @java.lang.Override
    public void setEncoding( final String encoding )
    {

    }

    @java.lang.Override
    public boolean getCertifiedText()
    {
      return false;
    }

    @java.lang.Override
    public void setCertifiedText( final boolean certifiedText )
    {

    }
  }
}
