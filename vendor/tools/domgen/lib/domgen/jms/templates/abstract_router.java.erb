/* DO NOT EDIT: File is auto-generated */
package <%= to_package(service.jms.qualified_abstract_router_name) %>;

@javax.annotation.Generated( "Domgen" )
public abstract class <%= service.jms.abstract_router_name %>
<%= service.jms.router_extends.nil? ? '' : "  extends #{service.jms.router_extends}\n" -%>
  implements <%= service.ejb.qualified_service_name %>
{
  @javax.inject.Inject
  @javax.jms.JMSConnectionFactory( <%= service.data_module.repository.jms.qualified_constants_container_name %>.CONNECTION_FACTORY_RESOURCE_NAME )
  private javax.jms.JMSContext _context;

<% service.methods.select{|m|m.jms? && m.jms.router?}.each do |m| -%>
  @javax.annotation.Resource( lookup = <%= service.data_module.repository.jms.qualified_constants_container_name %>.<%= Reality::Naming.uppercase_constantize(m.jms.route_to_destination.name) %>_RESOURCE_NAME )
  private <%= m.jms.route_to_destination.destination_type %> _<%= Reality::Naming.camelize(m.name)%>Target;
<% end -%>
<% service.methods.select{|m|m.jms? && m.jms.router?}.each do |m| -%>
  // Use a per-thread marshaller as creating a marshaller is expensive, but they are not thread safe.
  private final java.lang.ThreadLocal<javax.xml.bind.Marshaller> _<%= Reality::Naming.camelize(m.name)%>Marshallers = new java.lang.ThreadLocal<>();
<% end -%>

<% service.methods.select{|m|m.jms? && m.jms.router?}.each do |method| -%>
  <%=

  parameter = method.parameters.empty? ? nil : method.parameters[0]
  encoded_type = parameter.non_standard_type? ? parameter.parameter_type : parameter.ejb.java_type

  annotated_type(method.return_value, :ejb, :default, :public => true) %> <%= Reality::Naming.camelize(method.name) %>(<%= method.parameters.collect{|p| "#{annotated_type(p, :ejb, :default, :final => true)} #{Reality::Naming.camelize(p.name)}" }.join(', ') %>)<%=
    method.exceptions.empty? ? '' : "\n    throws #{method.exceptions.collect{|e| e.ee.qualified_name}.join(', ')}"
-%>

  {
    try
    {
      final String text = <% if parameter -%>convert<%= method.name %>ToText( <%= Reality::Naming.camelize(parameter.name) %> )<% else -%>""<% end -%>;
      send<%= method.name %>Message( process<%= method.name %>( _context.createTextMessage( text ) ) );
    }
    catch ( final javax.jms.JMSException e )
    {
      throw new javax.jms.JMSRuntimeException( "Error processing message prior to transmission: " + e.getMessage(), "", e );
    }
  }

  protected @javax.annotation.Nonnull javax.jms.TextMessage process<%= method.name %>( @javax.annotation.Nonnull final javax.jms.TextMessage message )
    throws javax.jms.JMSException
  {
    return message;
  }

<% if parameter -%>
  protected String convert<%= method.name %>ToText( <%= annotated_type(parameter, :ejb, :default, :final => true) %> <%= Reality::Naming.camelize(parameter.name) %> )
  {
    try
    {
      final java.io.StringWriter writer = new java.io.StringWriter();
      get<%= method.name %>Marshaller().marshal( <%= Reality::Naming.camelize(parameter.name) %>, writer );
      return writer.toString();
    }
    catch ( final java.lang.Throwable t )
    {
      throw new RuntimeException( "Error converting message " + <%= Reality::Naming.camelize(parameter.name) %>.getClass(), t );
    }
  }

  private javax.xml.bind.Marshaller get<%= method.name %>Marshaller()
    throws javax.xml.bind.JAXBException
  {
    javax.xml.bind.Marshaller marshaller = _<%= Reality::Naming.camelize(method.name)%>Marshallers.get();
    if ( null == marshaller )
    {
      marshaller = new<%= method.name %>JAXBContext().createMarshaller();
      marshaller.setProperty( "jaxb.formatted.output", Boolean.TRUE );
      _<%= Reality::Naming.camelize(method.name)%>Marshallers.set( marshaller );
    }
    return marshaller;
  }

  protected javax.xml.bind.JAXBContext new<%= method.name %>JAXBContext()
    throws javax.xml.bind.JAXBException
  {
    return javax.xml.bind.JAXBContext.newInstance( <%= parameter.jms.object_factory ? parameter.jms.object_factory : encoded_type %>.class );
  }

<% end -%>
  protected void send<%= method.name %>Message( @javax.annotation.Nonnull final javax.jms.Message message )
  {
    getJMSContext().createProducer().send( _<%= Reality::Naming.camelize(method.name) %>Target, message );
  }
<% end -%>

  protected javax.jms.JMSContext getJMSContext()
  {
    return _context;
  }
}
